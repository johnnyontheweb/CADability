using System;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;

namespace CADability
{

    /* Gebrauchsanweisung
     * Die folgenden Klassen sind fast nur weiterleitungen an Windows API
     * bzw. an OpenGL. Sie sind entnommen aus verschiedenen Dateien unter
     * C:\Programme\Tao\source\src\Tao.OpenGl bzw. C:\Programme\Tao\source\src\Tao.Platform.Windows
     * Wenn etwas fehlt, einfach von dort kopieren
     */

    public class Kernel
    {
        // --- Fields ---
        #region Private Constants
        #region string KERNEL_NATIVE_LIBRARY
        /// <summary>
        ///     Specifies Kernel32's native library archive.
        /// </summary>
        /// <remarks>
        ///     Specifies kernel32.dll for Windows.
        /// </remarks>
        private const string KERNEL_NATIVE_LIBRARY = "kernel32.dll";
        #endregion string KERNEL_NATIVE_LIBRARY

        #region CallingConvention CALLING_CONVENTION
        /// <summary>
        ///     Specifies the calling convention.
        /// </summary>
        /// <remarks>
        ///     Specifies <see cref="CallingConvention.StdCall" />.
        /// </remarks>
        private const CallingConvention CALLING_CONVENTION = CallingConvention.StdCall;
        #endregion CallingConvention CALLING_CONVENTION
        #endregion Private Constants

        #region Public Structs
        #region MEMORYSTATUS
        /// <summary>
        ///     <para>
        ///         The <b>MEMORYSTATUS</b> structure contains information about the current state
        ///         of both physical and virtual memory.
        ///     </para>
        ///     <para>
        ///         The <see cref="GlobalMemoryStatus" /> function stores information in a
        ///         <b>MEMORYSTATUS</b> structure.
        ///     </para>
        /// </summary>
        /// <remarks>
        ///     <para>
        ///         <b>MEMORYSTATUS</b> reflects the state of memory at the time of the call.  It
        ///         reflects the size of the paging file at that time.  The operating system can
        ///         enlarge the paging file up to the maximum size set by the administrator.
        ///     </para>
        ///     <para>
        ///         On computers with more than 4 GB of memory, the <b>MEMORYSTATUS</b> structure
        ///         can return incorrect information.  Windows reports a value of -1 to indicate
        ///         an overflow, while Windows NT reports a value that is the real amount of
        ///         memory, modulo 4 GB.  If your application is at risk for this behavior, use
        ///         the <b>GlobalMemoryStatusEx</b> function instead of the
        ///         <see cref="GlobalMemoryStatus" /> function.
        ///     </para>
        /// </remarks>
        /// <seealso cref="GlobalMemoryStatus" />
        // <seealso cref="GlobalMemoryStatusEx" />
        // typedef struct _MEMORYSTATUS {
        //     DWORD dwLength;
        //     DWORD dwMemoryLoad;
        //     SIZE_T dwTotalPhys;
        //     SIZE_T dwAvailPhys;
        //     SIZE_T dwTotalPageFile;
        //     SIZE_T dwAvailPageFile;
        //     SIZE_T dwTotalVirtual;
        //     SIZE_T dwAvailVirtual;
        // } MEMORYSTATUS, *LPMEMORYSTATUS;
        [StructLayout(LayoutKind.Sequential)]
        public struct MEMORYSTATUS
        {
            #region int Length
            /// <summary>
            ///     Size of the <b>MEMORYSTATUS</b> data structure, in bytes.  You do not need to
            ///     set this member before calling the <see cref="GlobalMemoryStatus" /> function;
            ///     the function sets it.
            /// </summary>
            public int Length;
            #endregion int Length

            #region int MemoryLoad
            /// <summary>
            ///     <para>
            ///         Approximate percentage of total physical memory that is in use.
            ///     </para>
            ///     <para>
            ///         <b>Windows NT:</b>  Percentage of approximately the last 1000 pages of
            ///         physical memory that is in use.
            ///     </para>
            /// </summary>
            public int MemoryLoad;
            #endregion int MemoryLoad

            #region int TotalPhys
            /// <summary>
            ///     Total size of physical memory, in bytes.
            /// </summary>
            public int TotalPhys;
            #endregion int TotalPhys

            #region int AvailPhys
            /// <summary>
            ///     Size of physical memory available, in bytes.
            /// </summary>
            public int AvailPhys;
            #endregion int AvailPhys

            #region int TotalPageFile
            /// <summary>
            ///     Size of the committed memory limit, in bytes.
            /// </summary>
            public int TotalPageFile;
            #endregion int TotalPageFile

            #region int AvailPageFile
            /// <summary>
            ///     Size of available memory to commit, in bytes.
            /// </summary>
            public int AvailPageFile;
            #endregion int AvailPageFile

            #region int TotalVirtual
            /// <summary>
            ///     Total size of the user mode portion of the virtual address space of the
            ///     calling process, in bytes.
            /// </summary>
            public int TotalVirtual;
            #endregion int TotalVirtual

            #region int AvailVirtual
            /// <summary>
            ///     Size of unreserved and uncommitted memory in the user mode portion of the
            ///     virtual address space of the calling process, in bytes.
            /// </summary>
            public int AvailVirtual;
            #endregion int AvailVirtual
        }
        #endregion MEMORYSTATUS

        #region SYSTEM_INFO
        /// <summary>
        ///     The <b>SYSTEM_INFO</b> structure contains information about the current computer
        ///     system.  This includes the architecture and type of the processor, the number of
        ///     processors in the system, the page size, and other such information.
        /// </summary>
        /// <seealso cref="GetSystemInfo" />
        /// <seealso cref="SYSTEM_INFO_UNION" />
        // <seealso cref="MapViewOfFile" />
        // <seealso cref="MapViewOfFileEx" />
        // typedef struct _SYSTEM_INFO {
        //     union {
        //         DWORD dwOemId;          // Obsolete field...do not use
        //         struct {
        //             WORD wProcessorArchitecture;
        //             WORD wReserved;
        //         };
        //     };
        //     DWORD dwPageSize;
        //     LPVOID lpMinimumApplicationAddress;
        //     LPVOID lpMaximumApplicationAddress;
        //     DWORD_PTR dwActiveProcessorMask;
        //     DWORD dwNumberOfProcessors;
        //     DWORD dwProcessorType;
        //     DWORD dwAllocationGranularity;
        //     WORD wProcessorLevel;
        //     WORD wProcessorRevision;
        // } SYSTEM_INFO, *LPSYSTEM_INFO;
        [StructLayout(LayoutKind.Sequential)]
        public struct SYSTEM_INFO
        {
            #region SYSTEM_INFO_UNION SystemInfoUnion
            /// <summary>
            ///     Union for the OemId, ProcessorArchitecture, and Reserved fields of the
            ///     SYSTEM_INFO structure.  See <see cref="SYSTEM_INFO_UNION" />.
            /// </summary>
            public SYSTEM_INFO_UNION SystemInfoUnion;
            #endregion SYSTEM_INFO_UNION SystemInfoUnion

            #region int PageSize
            /// <summary>
            ///     Page size and the granularity of page protection and commitment.  This is the
            ///     page size used by the <b>VirtualAlloc</b> function.
            /// </summary>
            public int PageSize;
            #endregion int PageSize

            #region IntPtr MinimumApplicationAddress
            /// <summary>
            ///     Pointer to the lowest memory address accessible to applications and
            ///     dynamic-link libraries (DLLs).
            /// </summary>
            public IntPtr MinimumApplicationAddress;
            #endregion IntPtr MinimumApplicationAddress

            #region IntPtr MaximumApplicationAddress
            /// <summary>
            ///     Pointer to the highest memory address accessible to applications and DLLs.
            /// </summary>
            public IntPtr MaximumApplicationAddress;
            #endregion IntPtr MaximumApplicationAddress

            #region int ActiveProcessorMask
            /// <summary>
            ///     Mask representing the set of processors configured into the system.  Bit 0 is
            ///     processor 0; bit 31 is processor 31.
            /// </summary>
            public int ActiveProcessorMask;
            #endregion int ActiveProcessorMask

            #region int NumberOfProcessors
            /// <summary>
            ///     Number of processors in the system.
            /// </summary>
            public int NumberOfProcessors;
            #endregion int NumberOfProcessors

            #region int ProcessorType
            /// <summary>
            ///     <para>
            ///         An obsolete member that is retained for compatibility with Windows NT 3.5
            ///         and earlier.  Use the <i>SystemInfoUnion.ProcessorArchitecture</i>,
            ///         <i>ProcessorLevel</i>, and <i>ProcessorRevision</i> members to determine
            ///         the type of processor.
            ///     </para>
            ///     <para>
            ///         <b>Windows Me/98/95:</b>  Specifies the type of processor in the system.
            ///         This member is one of the following values:
            ///     </para>
            ///     <para>
            ///         <see cref="WinNt.PROCESSOR_INTEL_386" />
            ///     </para>
            ///     <para>
            ///         <see cref="WinNt.PROCESSOR_INTEL_486" />
            ///     </para>
            ///     <para>
            ///         <see cref="WinNt.PROCESSOR_INTEL_PENTIUM" />
            ///     </para>
            /// </summary>
            public int ProcessorType;
            #endregion int ProcessorType

            #region int AllocationGranularity
            /// <summary>
            ///     Granularity with which virtual memory is allocated.  For example, a
            ///     <b>VirtualAlloc</b> request to allocate 1 byte will reserve an address space
            ///     of <i>AllocationGranularity</i> bytes.  This value was hard coded as 64K in
            ///     the past, but other hardware architectures may require different values.
            /// </summary>
            public int AllocationGranularity;
            #endregion int AllocationGranularity

            #region int ProcessorLevel
            /// <summary>
            ///     <para>
            ///         System's architecture-dependent processor level.  It should be used only
            ///         for display purposes.  To determine the feature set of a processor, use
            ///         the <see cref="IsProcessorFeaturePresent" /> function.
            ///     </para>
            ///     <para>
            ///         If <i>SystemInfoUnion.ProcessorArchitecture</i> is
            ///         <see cref="WinNt.PROCESSOR_ARCHITECTURE_INTEL" />, <i>ProcessorLevel</i>
            ///         is defined by the CPU vendor.
            ///     </para>
            ///     <para>
            ///         If <i>SystemInfoUnion.ProcessorArchitecture</i> is
            ///         <see cref="WinNt.PROCESSOR_ARCHITECTURE_IA64" />, <i>ProcessorLevel</i> is
            ///         set to 1.
            ///     </para>
            ///     <para>
            ///         If <i>SystemInfoUnion.ProcessorArchitecture</i> is
            ///         <see cref="WinNt.PROCESSOR_ARCHITECTURE_MIPS" />, <i>ProcessorLevel</i> is
            ///         of the form 00xx, where xx is an 8-bit implementation number (bits 8-15 of
            ///         the PRId register).  The member can be the following value:
            ///     </para>
            ///     <para>
            ///         <list type="table">
            ///             <listheader>
            ///                 <term>Value</term>
            ///                 <description>Description</description>
            ///             </listheader>
            ///             <item>
            ///                 <term>0004</term>
            ///                 <description>MIPS R4000</description>
            ///             </item>
            ///         </list>
            ///     </para>
            ///     <para>
            ///         If <i>SystemInfoUnion.ProcessorArchitecture</i> is
            ///         <see cref="WinNt.PROCESSOR_ARCHITECTURE_ALPHA" />, <i>ProcessorLevel</i>
            ///         is of the form xxxx, where xxxx is a 16-bit processor version number (the
            ///         low-order 16 bits of a version number from the firmware).  The member can
            ///         be one of the following values:
            ///     </para>
            ///     <para>
            ///         <list type="table">
            ///             <listheader>
            ///                 <term>Value</term>
            ///                 <description>Description</description>
            ///             </listheader>
            ///             <item>
            ///                 <term>21064</term>
            ///                 <description>Alpha 21064</description>
            ///             </item>
            ///             <item>
            ///                 <term>21066</term>
            ///                 <description>Alpha 21066</description>
            ///             </item>
            ///             <item>
            ///                 <term>21164</term>
            ///                 <description>Alpha 21164</description>
            ///             </item>
            ///         </list>
            ///     </para>
            ///     <para>
            ///         If <i>SystemInfoUnion.ProcessorArchitecture</i> is
            ///         <see cref="WinNt.PROCESSOR_ARCHITECTURE_PPC" />, <i>ProcessorLevel</i> is
            ///         of the form xxxx, where xxxx is a 16-bit processor version number (the
            ///         high-order 16 bits of the Processor Version Register).  The member can be
            ///         one of the following values:
            ///     </para>
            ///     <para>
            ///         <list type="table">
            ///             <listheader>
            ///                 <term>Value</term>
            ///                 <description>Description</description>
            ///             </listheader>
            ///             <item>
            ///                 <term>1</term>
            ///                 <description>PPC 601</description>
            ///             </item>
            ///             <item>
            ///                 <term>3</term>
            ///                 <description>PPC 603</description>
            ///             </item>
            ///             <item>
            ///                 <term>4</term>
            ///                 <description>PPC 604</description>
            ///             </item>
            ///             <item>
            ///                 <term>6</term>
            ///                 <description>PPC 603+</description>
            ///             </item>
            ///             <item>
            ///                 <term>9</term>
            ///                 <description>PPC 604+</description>
            ///             </item>
            ///             <item>
            ///                 <term>20</term>
            ///                 <description>PPC 620</description>
            ///             </item>
            ///         </list>
            ///     </para>
            /// </summary>
            public int ProcessorLevel;
            #endregion int ProcessorLevel

            #region int ProcessorRevision
            /// <summary>
            ///     <para>
            ///         Architecture-dependent processor revision.  The following table shows how
            ///         the revision value is assembled for each type of processor architecture:
            ///     </para>
            ///     <para>
            ///         <list type="table">
            ///             <listheader>
            ///                 <term>Processor</term>
            ///                 <description>Description</description>
            ///             </listheader>
            ///             <item>
            ///                 <term>Intel 80386 or 80486</term>
            ///                 <description>
            ///                     <para>
            ///                         A value of the form xxyz.
            ///                     </para>
            ///                     <para>
            ///                         If xx is equal to 0xFF, y - 0xA is the model number, and
            ///                         z is the stepping identifier.  For example, an Intel
            ///                         80486-D0 system returns 0xFFD0.
            ///                     </para>
            ///                     <para>
            ///                         If xx is not equal to 0xFF, xx + 'A' is the stepping
            ///                         letter and yz is the minor stepping.
            ///                     </para>
            ///                 </description>
            ///             </item>
            ///             <item>
            ///                 <term>Intel Pentium, Cyrix, or NextGen 586</term>
            ///                 <description>
            ///                     <para>
            ///                         A value of the form xxyy, where xx is the model number and
            ///                         yy is the stepping.  Display this value of 0x0201 as
            ///                         follows:
            ///                     </para>
            ///                     <para>
            ///                         Model xx, Stepping yy.
            ///                     </para>
            ///                 </description>
            ///             </item>
            ///             <item>
            ///                 <term>MIPS</term>
            ///                 <description>
            ///                     A value of the form 00xx, where xx is the 8-bit revision
            ///                     number of the processor (the low-order 8 bits of the
            ///                     PRId register).
            ///                 </description>
            ///             </item>
            ///             <item>
            ///                 <term>ALPHA</term>
            ///                 <description>
            ///                     <para>
            ///                         A value of the form xxyy, where xxyy is the low-order 16
            ///                         bits of the processor revision number from the firmware.
            ///                         Display this value as follows:
            ///                     </para>
            ///                     <para>
            ///                         Model A+xx, Pass yy.
            ///                     </para>
            ///                 </description>
            ///             </item>
            ///             <item>
            ///                 <term>PPC</term>
            ///                 <description>
            ///                     <para>
            ///                         A value of the form xxyy, where xxyy is the low-order 16
            ///                         bits of the processor version register.  Display this
            ///                         value as follows:
            ///                     </para>
            ///                     <para>
            ///                         xx.yy.
            ///                     </para>
            ///                 </description>
            ///             </item>
            ///         </list>
            ///     </para>
            /// </summary>
            public int ProcessorRevision;
            #endregion int ProcessorRevision
        }
        #endregion SYSTEM_INFO

        #region SYSTEM_INFO_UNION
        /// <summary>
        ///     Union for the OemId, ProcessorArchitecture, and Reserved fields of the
        ///     <see cref="SYSTEM_INFO" /> structure.
        /// </summary>
        /// <seealso cref="SYSTEM_INFO" />
        //     union {
        //         DWORD dwOemId;          // Obsolete field...do not use
        //         struct {
        //             WORD wProcessorArchitecture;
        //             WORD wReserved;
        //         };
        //     };
        [StructLayout(LayoutKind.Explicit)]
        public struct SYSTEM_INFO_UNION
        {
            #region int OemId
            /// <summary>
            ///     <para>
            ///         An obsolete member that is retained for compatibility with Windows NT 3.5
            ///         and earlier.  New applications should use the <i>ProcessorArchitecture</i>
            ///         branch of the union.
            ///     </para>
            ///     <para>
            ///         <b>Windows Me/98/95:</b>  The system always sets this member to zero, the
            ///         value defined for <see cref="WinNt.PROCESSOR_ARCHITECTURE_INTEL" />.
            ///     </para>
            /// </summary>
            [FieldOffset(0)]
            public int OemId;
            #endregion int OemId

            #region short ProcessorArchitecture
            /// <summary>
            ///     <para>
            ///         System's processor architecture.  This value can be one of the following
            ///         values:
            ///     </para>
            ///     <para>
            ///         <see cref="WinNt.PROCESSOR_ARCHITECTURE_UNKNOWN" />
            ///     </para>
            ///     <para>
            ///         <see cref="WinNt.PROCESSOR_ARCHITECTURE_INTEL" />
            ///     </para>
            ///     <para>
            ///         <b>Windows NT 3.51:</b>  <see cref="WinNt.PROCESSOR_ARCHITECTURE_MIPS" />
            ///     </para>
            ///     <para>
            ///         <b>Windows NT 4.0 and earlier:</b>
            ///         <see cref="WinNt.PROCESSOR_ARCHITECTURE_ALPHA" />
            ///     </para>
            ///     <para>
            ///         <b>Windows NT 4.0 and earlier:</b>
            ///         <see cref="WinNt.PROCESSOR_ARCHITECTURE_PPC" />
            ///     </para>
            ///     <para>
            ///         <b>64-bit Windows:</b>  <see cref="WinNt.PROCESSOR_ARCHITECTURE_IA64" />,
            ///         <see cref="WinNt.PROCESSOR_ARCHITECTURE_IA32_ON_WIN64" />,
            ///         <see cref="WinNt.PROCESSOR_ARCHITECTURE_AMD64" />
            ///     </para>
            /// </summary>
            [FieldOffset(0)]
            public short ProcessorArchitecture;
            #endregion short ProcessorArchitecture

            #region short Reserved
            /// <summary>
            ///     Reserved for future use.
            /// </summary>
            [FieldOffset(2)]
            public short Reserved;
            #endregion short Reserved
        }
        #endregion SYSTEM_INFO_UNION
        #endregion Public Structs

        // --- Constructors & Destructors ---
        #region Kernel()
        /// <summary>
        ///     Prevents instantiation.
        /// </summary>
        private Kernel()
        {
        }
        #endregion Kernel()

        // --- Public Externs ---
        #region bool Beep(int frequency, int duration)
        /// <summary>
        ///     The <b>Beep</b> function generates simple tones on the speaker.  The function is
        ///     synchronous; it does not return control to its caller until the sound finishes.
        /// </summary>
        /// <param name="frequency">
        ///     <para>
        ///         Frequency of the sound, in hertz.  This parameter must be in the range
        ///         37 through 32,767 (0x25 through 0x7FFF).
        ///     </para>
        ///     <para>
        ///         <b>Windows 95/98/Me:</b>  The <b>Beep</b> function ignores this parameter.
        ///     </para>
        /// </param>
        /// <param name="duration">
        ///     <para>
        ///         Duration of the sound, in milliseconds.
        ///     </para>
        ///     <para>
        ///         <b>Windows 95/98/Me:</b>  The <b>Beep</b> function ignores this parameter.
        ///     </para>
        /// </param>
        /// <returns>
        ///     <para>
        ///         If the function succeeds, the return value is true.
        ///     </para>
        ///     <para>
        ///         If the function fails, the return value is false.  To get extended error
        ///         information, call <see cref="Marshal.GetLastWin32Error" />.
        ///     </para>
        /// </returns>
        /// <remarks>
        ///     <para>
        ///         <b>Terminal Services:</b>  The beep is redirected to the client.
        ///     </para>
        ///     <para>
        ///         <b>Windows 95/98/Me:</b>  On computers with a sound card, the function
        ///         plays the default sound event.  On computers without a sound card, the
        ///         function plays the standard system beep.
        ///     </para>
        /// </remarks>
        // <seealso cref="User.MessageBeep" />
        // WINBASEAPI BOOL WINAPI Beep(IN DWORD dwFreq, IN DWORD dwDuration);
        [DllImport(KERNEL_NATIVE_LIBRARY, CallingConvention = CALLING_CONVENTION, SetLastError = true), SuppressUnmanagedCodeSecurity]
        public static extern bool Beep(int frequency, int duration);
        #endregion bool Beep(int frequency, int duration)

        #region bool FreeLibrary(IntPtr moduleHandle)
        /// <summary>
        ///     The <b>FreeLibrary</b> function decrements the reference count of the loaded
        ///     dynamic-link library (DLL).  When the reference count reaches zero, the module
        ///     is unmapped from the address space of the calling process and the handle is no
        ///     longer valid.
        /// </summary>
        /// <param name="moduleHandle">
        ///     Handle to the loaded DLL module.  The <see cref="LoadLibrary" /> or
        ///     <see cref="GetModuleHandle" /> function returns this handle.
        /// </param>
        /// <returns>
        ///     <para>
        ///         If the function succeeds, the return value is true.
        ///     </para>
        ///     <para>
        ///         If the function fails, the return value is false.  To get extended error
        ///         information, call <see cref="Marshal.GetLastWin32Error" />.
        ///     </para>
        /// </returns>
        /// <remarks>
        ///     <para>
        ///         Each process maintains a reference count for each loaded library module.  This
        ///         reference count is incremented each time <see cref="LoadLibrary" /> is called
        ///         and is decremented each time <b>FreeLibrary</b> is called.  A DLL module
        ///         loaded at process initialization due to load-time dynamic linking has a
        ///         reference count of one.  This count is incremented if the same module is
        ///         loaded by a call to <see cref="LoadLibrary" />.
        ///     </para>
        ///     <para>
        ///         Before unmapping a library module, the system enables the DLL to detach from
        ///         the process by calling the DLL's <b>DllMain</b> function, if it has one, with
        ///         the DLL_PROCESS_DETACH value.  Doing so gives the DLL an opportunity to clean
        ///         up resources allocated on behalf of the current process.  After the
        ///         entry-point function returns, the library module is removed from the address
        ///         space of the current process.
        ///     </para>
        ///     <para>
        ///         It is not safe to call <b>FreeLibrary</b> from <b>DllMain</b>.  For more
        ///         information, see the Remarks section in <b>DllMain</b>.
        ///     </para>
        ///     <para>
        ///         Calling <b>FreeLibrary</b> does not affect other processes using the same
        ///         library module.
        ///     </para>
        /// </remarks>
        /// <seealso cref="GetModuleHandle" />
        /// <seealso cref="LoadLibrary" />
        // <seealso cref="DllMain" />
        // <seealso cref="FreeLibraryAndExitThread" />
        // WINBASEAPI BOOL WINAPI FreeLibrary(IN OUT HMODULE hLibModule);
        [DllImport(KERNEL_NATIVE_LIBRARY, CallingConvention = CALLING_CONVENTION, SetLastError = true), SuppressUnmanagedCodeSecurity]
        public static extern bool FreeLibrary(IntPtr moduleHandle);
        #endregion bool FreeLibrary(IntPtr moduleHandle)

        #region int GetDllDirectory(int bufferLength, [Out] StringBuilder buffer)
        /// <summary>
        ///     The <b>GetDllDirectory</b> function retrieves the application-specific portion of
        ///     the search path used to locate DLLs for the application.
        /// </summary>
        /// <param name="bufferLength">
        ///     Size of the output buffer, in characters.
        /// </param>
        /// <param name="buffer">
        ///     Pointer to a buffer that receives the application-specific portion of the search path.
        /// </param>
        /// <returns>
        ///     <para>
        ///         If the function succeeds, the return value is the length of the string copied
        ///         to <i>buffer</i>, in characters, not including the terminating null character.
        ///         If the return value is greater than <i>bufferLength</i>, it specifies the size
        ///         of the buffer required for the path.
        ///     </para>
        ///     <para>
        ///         If the function fails, the return value is zero.  To get extended error
        ///         information, call <see cref="Marshal.GetLastWin32Error" />.
        ///     </para>
        /// </returns>
        /// <seealso cref="SetDllDirectory" />
        // WINBASEAPI DWORD WINAPI GetDllDirectoryA(IN DWORD nBufferLength, OUT LPSTR lpBuffer);
        // WINBASEAPI DWORD WINAPI GetDllDirectoryW(IN DWORD nBufferLength, OUT LPWSTR lpBuffer);
        [DllImport(KERNEL_NATIVE_LIBRARY, CallingConvention = CALLING_CONVENTION, CharSet = CharSet.Auto, SetLastError = true), SuppressUnmanagedCodeSecurity]
        public static extern int GetDllDirectory(int bufferLength, [Out] StringBuilder buffer);
        #endregion int GetDllDirectory(int bufferLength, [Out] StringBuilder buffer)

        #region int GetModuleFileName(IntPtr module, [Out] StringBuilder fileName, int size)
        /// <summary>
        ///     <para>
        ///         The <b>GetModuleFileName</b> function retrieves the fully qualified path for
        ///         the specified module.
        ///     </para>
        ///     <para>
        ///         To specify the process that contains the module, use the
        ///         <b>GetModuleFileNameEx</b> function.
        ///     </para>
        /// </summary>
        /// <param name="module">
        ///     Handle to the module whose path is being requested.  If this parameter is NULL,
        ///     <b>GetModuleFileName</b> retrieves the path for the current module.
        /// </param>
        /// <param name="fileName">
        ///     <para>
        ///         Pointer to a buffer that receives a null-terminated string that specifies the
        ///         fully-qualified path of the module.  If the length of the path exceeds the
        ///         size specified by the <i>size</i> parameter, the function succeeds and the
        ///         string is truncated to <i>size</i> characters and null terminated.
        ///     </para>
        ///     <para>
        ///         The path can have the prefix "\\?\", depending on how the module was loaded.
        ///     </para>
        /// </param>
        /// <param name="size">
        ///     Size of the <i>filename</i> buffer, in TCHARs.
        /// </param>
        /// <returns>
        ///     <para>
        ///         If the function succeeds, the return value is the length of the string copied
        ///         to the buffer, in TCHARs.  If the buffer is too small to hold the module name,
        ///         the string is truncated to <i>size</i>, and the function returns <i>size</i>.
        ///     </para>
        ///     <para>
        ///         If the function fails, the return value is zero.  To get extended error
        ///         information, call <see cref="Marshal.GetLastWin32Error" />.
        ///     </para>
        /// </returns>
        /// <remarks>
        ///     <para>
        ///         If a DLL is loaded in two processes, its file name in one process may differ
        ///         in case from its file name in the other process.
        ///     </para>
        ///     <para>
        ///         For the ANSI version of the function, the number of TCHARs is the number of
        ///         bytes; for the Unicode version, it is the number of characters.
        ///     </para>
        ///     <para>
        ///         <b>Windows Me/98/95:</b>  This function retrieves long file names when an
        ///         application's version number is greater than or equal to 4.00 and the long
        ///         file name is available.  Otherwise, it returns only 8.3 format file names.
        ///     </para>
        /// </remarks>
        /// <seealso cref="GetModuleHandle" />
        /// <seealso cref="LoadLibrary" />
        // <seealso cref="GetModuleFileNameEx" />
        // WINBASEAPI DWORD WINAPI GetModuleFileNameA(IN HMODULE hModule, OUT LPSTR lpFilename, IN DWORD nSize);
        // WINBASEAPI DWORD WINAPI GetModuleFileNameW(IN HMODULE hModule, OUT LPWSTR lpFilename, IN DWORD nSize);
        [DllImport(KERNEL_NATIVE_LIBRARY, CallingConvention = CALLING_CONVENTION, CharSet = CharSet.Auto, SetLastError = true), SuppressUnmanagedCodeSecurity]
        public static extern int GetModuleFileName(IntPtr module, [Out] StringBuilder fileName, int size);
        #endregion int GetModuleFileName(IntPtr module, [Out] StringBuilder fileName, int size)

        #region IntPtr GetModuleHandle(string moduleName)
        /// <summary>
        ///     <para>
        ///         The <b>GetModuleHandle</b> function retrieves a module handle for the
        ///         specified module if the file has been mapped into the address space of the
        ///         calling process.
        ///     </para>
        ///     <para>
        ///         To avoid the race conditions described in the Remarks section, use the
        ///         <b>GetModuleHandleEx</b> function.
        ///     </para>
        /// </summary>
        /// <param name="moduleName">
        ///     <para>
        ///         Pointer to a null-terminated string that contains the name of the module
        ///         (either a .dll or .exe file).  If the file name extension is omitted, the
        ///         default library extension .dll is appended.  The file name string can include
        ///         a trailing point character (.) to indicate that the module name has no
        ///         extension.  The string does not have to specify a path.  When specifying a
        ///         path, be sure to use backslashes (\), not forward slashes (/).  The name is
        ///         compared (case independently) to the names of modules currently mapped into
        ///         the address space of the calling process.
        ///     </para>
        ///     <para>
        ///         If this parameter is NULL, <b>GetModuleHandle</b> returns a handle to the
        ///         file used to create the calling process.
        ///     </para>
        /// </param>
        /// <returns>
        ///     <para>
        ///         If the function succeeds, the return value is a handle to the specified module
        ///         (IntPtr).
        ///     </para>
        ///     <para>
        ///         If the function fails, the return value is NULL (IntPtr.Zero).  To get
        ///         extended error information, call <see cref="Marshal.GetLastWin32Error" />.
        ///     </para>
        /// </returns>
        /// <remarks>
        ///     <para>
        ///         The returned handle is not global or inheritable.  It cannot be duplicated
        ///         or used by another process.
        ///     </para>
        ///     <para>
        ///         The <b>GetModuleHandle</b> function returns a handle to a mapped module
        ///         without incrementing its reference count.  Therefore, use care when passing
        ///         the handle to the <see cref="FreeLibrary" /> function, because doing so can
        ///         cause a DLL module to be unmapped prematurely.
        ///     </para>
        ///     <para>
        ///         This function must be used carefully in a multithreaded application.  There
        ///         is no guarantee that the module handle remains valid between the time this
        ///         function returns the handle and the time it is used.  For example, a thread
        ///         retrieves a module handle, but before it uses the handle, a second thread
        ///         frees the module.  If the system loads another module, it could reuse the
        ///         module handle that was recently freed.  Therefore, first thread would have
        ///         a handle to a module different than the one intended.
        ///     </para>
        /// </remarks>
        /// <seealso cref="FreeLibrary" />
        /// <seealso cref="GetModuleFileName" />
        // <seealso cref="GetModuleHandleEx" />
        // WINBASEAPI HMODULE WINAPI GetModuleHandleA(IN LPCSTR lpModuleName);
        // WINBASEAPI HMODULE WINAPI GetModuleHandleW(IN LPCWSTR lpModuleName);
        [DllImport(KERNEL_NATIVE_LIBRARY, CallingConvention = CALLING_CONVENTION, CharSet = CharSet.Auto, SetLastError = true), SuppressUnmanagedCodeSecurity]
        public static extern IntPtr GetModuleHandle(string moduleName);
        #endregion IntPtr GetModuleHandle(string moduleName)

        #region IntPtr GetProcAddress(IntPtr module, string processName)
        /// <summary>
        ///     The <b>GetProcAddress</b> function retrieves the address of an exported function
        ///     or variable from the specified dynamic-link library (DLL).
        /// </summary>
        /// <param name="module">
        ///     Handle to the DLL module that contains the function or variable.  The
        ///     <see cref="LoadLibrary" /> or <see cref="GetModuleHandle" /> function returns
        ///     this handle.
        /// </param>
        /// <param name="processName">
        ///     Pointer to a null-terminated string that specifies the function or variable name,
        ///     or the function's ordinal value.  If this parameter is an ordinal value, it must
        ///     be in the low-order word; the high-order word must be zero.
        /// </param>
        /// <returns>
        ///     <para>
        ///         If the function succeeds, the return value is the address of the exported
        ///         function or variable.
        ///     </para>
        ///     <para>
        ///         If the function fails, the return value is NULL (IntPtr.Zero).  To get
        ///         extended error information, call <see cref="Marshal.GetLastWin32Error" />.
        ///     </para>
        /// </returns>
        /// <remarks>
        ///     <para>
        ///         The spelling and case of a function name pointed to by <i>processName</i> must
        ///         be identical to that in the EXPORTS statement of the source DLL's
        ///         module-definition (.def) file.  The exported names of functions may differ
        ///         from the names you use when calling these functions in your code.  This
        ///         difference is hidden by macros used in the SDK header files.
        ///     </para>
        ///     <para>
        ///         The <i>processName</i> parameter can identify the DLL function by specifying
        ///         an ordinal value associated with the function in the EXPORTS statement.
        ///         <b>GetProcAddress</b> verifies that the specified ordinal is in the range 1
        ///         through the highest ordinal value exported in the .def file.  The function
        ///         then uses the ordinal as an index to read the function's address from a
        ///         function table.  If the .def file does not number the functions consecutively
        ///         from 1 to N (where N is the number of exported functions), an error can occur
        ///         where <b>GetProcAddress</b> returns an invalid, non-NULL address, even though
        ///         there is no function with the specified ordinal.
        ///     </para>
        ///     <para>
        ///         In cases where the function may not exist, the function should be specified by
        ///         name rather than by ordinal value.
        ///     </para>
        /// </remarks>
        /// <seealso cref="FreeLibrary" />
        /// <seealso cref="GetModuleHandle" />
        /// <seealso cref="LoadLibrary" />
        // WINBASEAPI FARPROC WINAPI GetProcAddress(IN HMODULE hModule, IN LPCSTR lpProcName);
        [DllImport(KERNEL_NATIVE_LIBRARY, CallingConvention = CALLING_CONVENTION, CharSet = CharSet.Ansi, SetLastError = true), SuppressUnmanagedCodeSecurity]
        public static extern IntPtr GetProcAddress(IntPtr module, string processName);
        #endregion IntPtr GetProcAddress(IntPtr module, string processName)

        #region bool GetProcessWorkingSetSize(IntPtr process, out int minimumWorkingSetSize, out int maximumWorkingSetSize)
        /// <summary>
        ///     The <b>GetProcessWorkingSetSize</b> function retrieves the minimum and maximum
        ///     working set sizes of the specified process.
        /// </summary>
        /// <param name="process">
        ///     Handle to the process whose working set sizes will be obtained.  The handle must
        ///     have the PROCESS_QUERY_INFORMATION access right.
        /// </param>
        /// <param name="minimumWorkingSetSize">
        ///     Pointer to a variable that receives the minimum working set size of the specified
        ///     process, in bytes.  The virtual memory manager attempts to keep at least this much
        ///     memory resident in the process whenever the process is active.
        /// </param>
        /// <param name="maximumWorkingSetSize">
        ///     Pointer to a variable that receives the maximum working set size of the specified
        ///     process, in bytes.  The virtual memory manager attempts to keep no more than this
        ///     much memory resident in the process whenever the process is active when memory is
        ///     in short supply.
        /// </param>
        /// <returns>
        ///     <para>
        ///         If the function succeeds, the return value is true.
        ///     </para>
        ///     <para>
        ///         If the function fails, the return value is false.  To get extended error
        ///         information, call <see cref="Marshal.GetLastWin32Error" />.
        ///     </para>
        /// </returns>
        /// <remarks>
        ///     The "working set" of a process is the set of memory pages currently visible to
        ///     the process in physical RAM memory.  These pages are resident and available for
        ///     an application to use without triggering a page fault.  The minimum and maximum
        ///     working set sizes affect the virtual memory paging behavior of a process.
        /// </remarks>
        /// <seealso cref="SetProcessWorkingSetSize" />
        // WINBASEAPI BOOL WINAPI GetProcessWorkingSetSize(IN HANDLE hProcess, OUT PSIZE_T lpMinimumWorkingSetSize, OUT PSIZE_T lpMaximumWorkingSetSize);
        [DllImport(KERNEL_NATIVE_LIBRARY, CallingConvention = CALLING_CONVENTION, SetLastError = true), SuppressUnmanagedCodeSecurity]
        public static extern bool GetProcessWorkingSetSize(IntPtr process, out int minimumWorkingSetSize, out int maximumWorkingSetSize);
        #endregion bool GetProcessWorkingSetSize(IntPtr process, out int minimumWorkingSetSize, out int maximumWorkingSetSize)

        #region int GetSystemDirectory([Out] StringBuilder buffer, int size)
        /// <summary>
        ///     <para>
        ///         The <b>GetSystemDirectory</b> function retrieves the path of the system
        ///         directory.  The system directory contains system such files such as
        ///         dynamic-link libraries, drivers, and font files.
        ///     </para>
        ///     <para>
        ///         This function is provided primarily for compatibility.  Applications should
        ///         store code in the Program Files folder and persistent data in the Application
        ///         Data folder in the user's profile.
        ///     </para>
        /// </summary>
        /// <param name="buffer">
        ///     Pointer to the buffer to receive the null-terminated string containing the path.
        ///     This path does not end with a backslash unless the system directory is the root
        ///     directory.  For example, if the system directory is named Windows\System on drive
        ///     C, the path of the system directory retrieved by this function is
        ///     C:\Windows\System.
        /// </param>
        /// <param name="size">
        ///     Maximum size of the buffer, in TCHARs.  This value should be set to at least
        ///     MAX_PATH+1 to allow sufficient space for the path and the null terminator.
        /// </param>
        /// <returns>
        ///     <para>
        ///         If the function succeeds, the return value is the length, in TCHARs, of the
        ///         string copied to the buffer, not including the terminating null character.  If
        ///         the length is greater than the size of the buffer, the return value is the
        ///         size of the buffer required to hold the path.
        ///     </para>
        ///     <para>
        ///         If the function fails, the return value is zero.  To get extended error
        ///         information, call <see cref="Marshal.GetLastWin32Error" />.
        ///     </para>
        /// </returns>
        /// <remarks>
        ///     Applications should not create files in the system directory.  If the user is
        ///     running a shared version of the operating system, the application does not have
        ///     write access to the system directory.
        /// </remarks>
        /// <seealso cref="GetWindowsDirectory" />
        // <seealso cref="GetCurrentDirectory" />
        // <seealso cref="SetCurrentDirectory" />
        // WINBASEAPI UINT WINAPI GetSystemDirectoryA(OUT LPSTR lpBuffer, IN UINT uSize);
        // WINBASEAPI UINT WINAPI GetSystemDirectoryW(OUT LPWSTR lpBuffer, IN UINT uSize);
        [DllImport(KERNEL_NATIVE_LIBRARY, CallingConvention = CALLING_CONVENTION, CharSet = CharSet.Auto, SetLastError = true), SuppressUnmanagedCodeSecurity]
        public static extern int GetSystemDirectory([Out] StringBuilder buffer, int size);
        #endregion int GetSystemDirectory([Out] StringBuilder buffer, int size)

        #region GetSystemInfo(out SYSTEM_INFO systemInfo)
        /// <summary>
        ///     <para>
        ///         The <b>GetSystemInfo</b> function returns information about the current
        ///         system.
        ///     </para>
        ///     <para>
        ///         To retrieve accurate information for a Win32-based application running on
        ///         WOW64, call the <b>GetNativeSystemInfo</b> function.
        ///     </para>
        /// </summary>
        /// <param name="systemInfo">
        ///     Pointer to a <see cref="SYSTEM_INFO" /> structure that receives the information.
        /// </param>
        /// <seealso cref="SYSTEM_INFO" />
        // <seealso cref="GetNativeSystemInfo" />
        // WINBASEAPI VOID WINAPI GetSystemInfo(OUT LPSYSTEM_INFO lpSystemInfo);
        [DllImport(KERNEL_NATIVE_LIBRARY, CallingConvention = CALLING_CONVENTION), SuppressUnmanagedCodeSecurity]
        public static extern void GetSystemInfo(out SYSTEM_INFO systemInfo);
        #endregion GetSystemInfo(out SYSTEM_INFO systemInfo)

        #region int GetSystemWindowsDirectory([Out] StringBuilder buffer, int size)
        /// <summary>
        ///     The <b>GetSystemWindowsDirectory</b> function retrieves the path of the shared
        ///     Windows directory on a multi-user system.
        /// </summary>
        /// <param name="buffer">
        ///     Pointer to the buffer to receive a null-terminated string containing the path.
        ///     This path does not end with a backslash unless the Windows directory is the root
        ///     directory.  For example, if the Windows directory is named Windows on drive C,
        ///     the path of the Windows directory retrieved by this function is C:\Windows.  If
        ///     the system was installed in the root directory of drive C, the path retrieved
        ///     is C:\.
        /// </param>
        /// <param name="size">
        ///     Maximum size of the buffer specified by the <i>buffer</i> parameter, in TCHARs.
        ///     This value should be set to at least MAX_PATH+1 to allow sufficient space for the
        ///     path and the null-terminating character.
        /// </param>
        /// <returns>
        ///     <para>
        ///         If the function succeeds, the return value is the length of the string copied
        ///         to the buffer, in TCHARs, not including the terminating null character.
        ///     </para>
        ///     <para>
        ///         If the length is greater than the size of the buffer, the return value is the
        ///         size of the buffer required to hold the path.
        ///     </para>
        ///     <para>
        ///         If the function fails, the return value is zero.  To get extended error
        ///         information, call <see cref="Marshal.GetLastWin32Error" />.
        ///     </para>
        /// </returns>
        /// <remarks>
        ///     <para>
        ///         On a system that is running Terminal Server, each user has a unique Windows
        ///         directory.  The system Windows directory is shared by all users, so it is the
        ///         directory where an application should store initialization and help files that
        ///         apply to all users.
        ///     </para>
        ///     <para>
        ///         With Terminal Services, the <b>GetSystemWindowsDirectory</b> function
        ///         retrieves the path of the system Windows directory, while the
        ///         <see cref="GetWindowsDirectory" /> function retrieves the path of a Windows
        ///         directory that is private for each user.  On a single-user system,
        ///         <b>GetSystemWindowsDirectory</b> is the same as
        ///         <see cref="GetWindowsDirectory" />.
        ///     </para>
        ///     <para>
        ///         <b>Windows NT 4.0 Terminal Server Edition:</b>  To retrieve the shared
        ///         Windows directory, call <see cref="GetSystemDirectory" /> and trim the
        ///         "System32" element from the end of the returned path.
        ///     </para>
        /// </remarks>
        /// <seealso cref="GetWindowsDirectory" />
        // WINBASEAPI UINT WINAPI GetSystemWindowsDirectoryA(OUT LPSTR lpBuffer, IN UINT uSize);
        // WINBASEAPI UINT WINAPI GetSystemWindowsDirectoryW(OUT LPWSTR lpBuffer, IN UINT uSize);
        [DllImport(KERNEL_NATIVE_LIBRARY, CallingConvention = CALLING_CONVENTION, CharSet = CharSet.Auto, SetLastError = true), SuppressUnmanagedCodeSecurity]
        public static extern int GetSystemWindowsDirectory([Out] StringBuilder buffer, int size);
        #endregion int GetSystemWindowsDirectory([Out] StringBuilder buffer, int size)

        #region int GetTickCount()
        /// <summary>
        ///     The <b>GetTickCount</b> function retrieves the number of milliseconds that have
        ///     elapsed since the system was started.  It is limited to the resolution of the
        ///     system timer.  To obtain the system timer resolution, use the
        ///     <b>GetSystemTimeAdjustment</b> function.
        /// </summary>
        /// <returns>
        ///     The return value is the number of milliseconds that have elapsed since the system
        ///     was started.
        /// </returns>
        /// <remarks>
        ///     <para>
        ///         The elapsed time is stored as a DWORD value.  Therefore, the time will wrap
        ///         around to zero if the system is run continuously for 49.7 days.
        ///     </para>
        ///     <para>
        ///         If you need a higher resolution timer, use a multimedia timer or a
        ///         high-resolution timer.
        ///     </para>
        ///     <para>
        ///         To obtain the time elapsed since the computer was started, retrieve the System
        ///         Up Time counter in the performance data in the registry key
        ///         HKEY_PERFORMANCE_DATA.  The value returned is an 8-byte value.
        ///     </para>
        /// </remarks>
        [DllImport(KERNEL_NATIVE_LIBRARY, CallingConvention = CALLING_CONVENTION), SuppressUnmanagedCodeSecurity]
        public static extern int GetTickCount();
        #endregion int GetTickCount()

        #region int GetWindowsDirectory([Out] StringBuilder buffer, int size)
        /// <summary>
        ///     <para>
        ///         The <b>GetWindowsDirectory</b> function retrieves the path of the Windows
        ///         directory.  The Windows directory contains such files as applications,
        ///         initialization files, and help files.
        ///     </para>
        ///     <para>
        ///         This function is provided primarily for compatibility.  Applications should
        ///         store code in the Program Files folder and persistent data in the Application
        ///         Data folder in the user's profile.
        ///     </para>
        /// </summary>
        /// <param name="buffer">
        ///     Pointer to the buffer to receive the null-terminated string containing the path.
        ///     This path does not end with a backslash unless the Windows directory is the root
        ///     directory.  For example, if the Windows directory is named Windows on drive C, the
        ///     path of the Windows directory retrieved by this function is C:\Windows.  If the
        ///     system was installed in the root directory of drive C, the path retrieved is C:\.
        /// </param>
        /// <param name="size">
        ///     Maximum size of the buffer specified by the <i>buffer</i> parameter, in TCHARs.
        ///     This value should be set to MAX_PATH.
        /// </param>
        /// <returns>
        ///     <para>
        ///         If the function succeeds, the return value is the length of the string copied
        ///         to the buffer, in TCHARs, not including the terminating null character.
        ///     </para>
        ///     <para>
        ///         If the length is greater than the size of the buffer, the return value is the
        ///         size of the buffer required to hold the path.
        ///     </para>
        ///     <para>
        ///         If the function fails, the return value is zero.  To get extended error
        ///         information, call <see cref="Marshal.GetLastWin32Error" />.
        ///     </para>
        /// </returns>
        /// <remarks>
        ///     <para>
        ///         The Windows directory is the directory where an application should store
        ///         initialization and help files. If the user is running a shared version of the
        ///         system, the Windows directory is guaranteed to be private for each user.
        ///     </para>
        ///     <para>
        ///         If an application creates other files that it wants to store on a per-user
        ///         basis, it should place them in the directory specified by the HOMEPATH
        ///         environment variable.  This directory will be different for each user, if so
        ///         specified by an administrator, through the User Manager administrative tool.
        ///         HOMEPATH always specifies either the user's home directory, which is
        ///         guaranteed to be private for each user, or a default directory (for example,
        ///         C:\USERS\DEFAULT) where the user will have all access.
        ///     </para>
        ///     <para>
        ///         <b>Terminal Services:</b>  If the application is running in a Terminal
        ///         Services environment, each user has a unique Windows directory.  If an
        ///         application that is not Terminal-Services-aware calls this function, it
        ///         retrieves the path of the Windows directory on the client, not the Windows
        ///         directory on the server.
        ///     </para>
        /// </remarks>
        /// <seealso cref="GetSystemDirectory" />
        /// <seealso cref="GetSystemWindowsDirectory" />
        // <seealso cref="GetCurrentDirectory" />
        // WINBASEAPI UINT WINAPI GetWindowsDirectoryA(OUT LPSTR lpBuffer, IN UINT uSize);
        // WINBASEAPI UINT WINAPI GetWindowsDirectoryW(OUT LPWSTR lpBuffer, IN UINT uSize);
        [DllImport(KERNEL_NATIVE_LIBRARY, CallingConvention = CALLING_CONVENTION, CharSet = CharSet.Auto, SetLastError = true), SuppressUnmanagedCodeSecurity]
        public static extern int GetWindowsDirectory([Out] StringBuilder buffer, int size);
        #endregion int GetWindowsDirectory([Out] StringBuilder buffer, int size)

        #region GlobalMemoryStatus(out MEMORYSTATUS buffer)
        /// <summary>
        ///     <para>
        ///         The <b>GlobalMemoryStatus</b> function obtains information about the system's
        ///         current usage of both physical and virtual memory.
        ///     </para>
        ///     <para>
        ///         To obtain information about the extended portion of the virtual address space,
        ///         or if your application may run on computers with more than 4 GB of main
        ///         memory, use the <b>GlobalMemoryStatusEx</b> function.
        ///     </para>
        /// </summary>
        /// <param name="buffer">
        ///     Pointer to a <see cref="MEMORYSTATUS" /> structure.  The <b>GlobalMemoryStatus</b>
        ///     function stores information about current memory availability into this structure.
        /// </param>
        /// <remarks>
        ///     <para>
        ///         You can use the <b>GlobalMemoryStatus</b> function to determine how much
        ///         memory your application can allocate without severely impacting other
        ///         applications.
        ///     </para>
        ///     <para>
        ///         The information returned by the <b>GlobalMemoryStatus</b> function is
        ///         volatile.  There is no guarantee that two sequential calls to this function
        ///         will return the same information.
        ///     </para>
        ///     <para>
        ///         On computers with more than 4 GB of memory, the <b>GlobalMemoryStatus</b>
        ///         function can return incorrect information.  Windows 2000 and later report a
        ///         value of -1 to indicate an overflow.  Earlier versions of Windows NT report a
        ///         value that is the real amount of memory, modulo 4 GB.  For this reason, use
        ///         the <b>GlobalMemoryStatusEx</b> function instead.
        ///     </para>
        ///     <para>
        ///         On Intel x86 computers with more than 2 GB and less than 4 GB of memory, the
        ///         <b>GlobalMemoryStatus</b> function will always return 2 GB in the
        ///         <see cref="MEMORYSTATUS.TotalPhys" /> member of the
        ///         <see cref="MEMORYSTATUS" /> structure.  Similarly, if the total available
        ///         memory is between 2 and 4 GB, the <see cref="MEMORYSTATUS.AvailPhys" /> member
        ///         of the <see cref="MEMORYSTATUS" /> structure will be rounded down to 2 GB.  If
        ///         the executable is linked using the /LARGEADDRESSWARE linker option, then the
        ///         <b>GlobalMemoryStatus</b> function will return the correct amount of physical
        ///         memory in both members.
        ///     </para>
        /// </remarks>
        /// <seealso cref="MEMORYSTATUS" />
        // <seealso cref="GlobalMemoryStatusEx" />
        // WINBASEAPI VOID WINAPI GlobalMemoryStatus(IN OUT LPMEMORYSTATUS lpBuffer);
        [DllImport(KERNEL_NATIVE_LIBRARY, CallingConvention = CALLING_CONVENTION), SuppressUnmanagedCodeSecurity]
        public static extern void GlobalMemoryStatus(out MEMORYSTATUS buffer);
        #endregion GlobalMemoryStatus(out MEMORYSTATUS buffer)

        #region bool IsProcessorFeaturePresent(int processorFeature)
        /// <summary>
        ///     The <b>IsProcessorFeaturePresent</b> function determines whether the specified
        ///     processor feature is supported by the current computer.
        /// </summary>
        /// <param name="processorFeature">
        ///     <para>
        ///         Processor feature to be tested.  This parameter can be one of the following
        ///         values:
        ///     </para>
        ///     <para>
        ///         <list type="table">
        ///             <listheader>
        ///                 <term>Value</term>
        ///                 <description>Description</description>
        ///             </listheader>
        ///             <item>
        ///                 <term><see cref="WinNt.PF_3DNOW_INSTRUCTIONS_AVAILABLE" /></term>
        ///                 <description>
        ///                     The 3D-Now instruction set is available.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="WinNt.PF_COMPARE_EXCHANGE_DOUBLE" /></term>
        ///                 <description>
        ///                     The compare and exchange double operation is available (Pentium,
        ///                     MIPS, and Alpha).
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="WinNt.PF_FLOATING_POINT_EMULATED" /></term>
        ///                 <description>
        ///                     <para>
        ///                         Floating-point operations are emulated using a software
        ///                         emulator.
        ///                     </para>
        ///                     <para>
        ///                         This function returns true if floating-point operations are
        ///                         emulated; otherwise, it returns false.
        ///                     </para>
        ///                     <para>
        ///                         <b>Windows NT 4.0:</b>  This function returns false if
        ///                         floating-point operations are emulated; otherwise, it returns
        ///                         true.  This behavior is a bug that is fixed in later versions.
        ///                     </para>
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="WinNt.PF_FLOATING_POINT_PRECISION_ERRATA" /></term>
        ///                 <description>
        ///                     <b>Pentium:</b>  In rare circumstances, a floating-point precision
        ///                     error can occur.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="WinNt.PF_MMX_INSTRUCTIONS_AVAILABLE" /></term>
        ///                 <description>
        ///                     The MMX instruction set is available.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="WinNt.PF_PAE_ENABLED" /></term>
        ///                 <description>
        ///                     The processor is PAE-enabled.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="WinNt.PF_RDTSC_INSTRUCTION_AVAILABLE" /></term>
        ///                 <description>
        ///                     The RDTSC instruction is available.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="WinNt.PF_XMMI_INSTRUCTIONS_AVAILABLE" /></term>
        ///                 <description>
        ///                     The SSE instruction set is available.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <term><see cref="WinNt.PF_XMMI64_INSTRUCTIONS_AVAILABLE" /></term>
        ///                 <description>
        ///                     The SSE2 instruction set is available.
        ///                 </description>
        ///             </item>
        ///         </list>
        ///     </para>
        /// </param>
        /// <returns>
        ///     <para>
        ///         If the feature is supported, the return value is true.
        ///     </para>
        ///     <para>
        ///         If the feature is not supported, the return value is false.
        ///     </para>
        /// </returns>
        // WINBASEAPI BOOL WINAPI IsProcessorFeaturePresent(IN DWORD ProcessorFeature);
        [DllImport(KERNEL_NATIVE_LIBRARY, CallingConvention = CALLING_CONVENTION), SuppressUnmanagedCodeSecurity]
        public static extern bool IsProcessorFeaturePresent(int processorFeature);
        #endregion bool IsProcessorFeaturePresent(int processorFeature)

        #region IntPtr LoadLibrary(string fileName)
        /// <summary>
        ///     The <b>LoadLibrary</b> function maps the specified executable module into the
        ///     address space of the calling process.
        /// </summary>
        /// <param name="fileName">
        ///     <para>
        ///         Pointer to a null-terminated string that names the executable module (either
        ///         a .dll or .exe file).  The name specified is the file name of the module and
        ///         is not related to the name stored in the library module itself, as specified
        ///         by the LIBRARY keyword in the module-definition (.def) file.
        ///     </para>
        ///     <para>
        ///         If the string specifies a path but the file does not exist in the specified
        ///         directory, the function fails.  When specifying a path, be sure to use
        ///         backslashes (\), not forward slashes (/).
        ///     </para>
        ///     <para>
        ///         If the string does not specify a path, the function uses a standard search
        ///         strategy to find the file.  See the Remarks for more information.
        ///     </para>
        /// </param>
        /// <returns>
        ///     <para>
        ///         If the function succeeds, the return value is a handle to the module (IntPtr).
        ///     </para>
        ///     <para>
        ///         If the function fails, the return value is NULL (IntPtr.Zero).  To get
        ///         extended error information, call <see cref="Marshal.GetLastWin32Error" />.
        ///     </para>
        ///     <para>
        ///         <b>Windows Me/98/95:</b>  If you are using <b>LoadLibrary</b> to load a module
        ///         that contains a resource whose numeric identifier is greater than 0x7FFF,
        ///         <b>LoadLibrary</b> fails.  If you are attempting to load a 16-bit DLL directly
        ///         from 32-bit code, <b>LoadLibrary</b> fails.  If you are attempting to load a
        ///         DLL whose subsystem version is greater than 4.0, <b>LoadLibrary</b> fails.  If
        ///         your <b>DllMain</b> function tries to call the Unicode version of a function,
        ///         <b>LoadLibrary</b> fails.
        ///     </para>
        /// </returns>
        /// <remarks>
        ///     <para>
        ///         <b>LoadLibrary</b> can be used to map a DLL module and return a handle that
        ///         can be used in <see cref="GetProcAddress" /> to get the address of a DLL
        ///         function.  <b>LoadLibrary</b> can also be used to map other executable
        ///         modules.  For example, the function can specify an .exe file to get a
        ///         handle that can be used in <b>FindResource</b> or <b>LoadResource</b>.
        ///         However, do not use <b>LoadLibrary</b> to run an .exe file, use the
        ///         <b>CreateProcess</b> function.
        ///     </para>
        ///     <para>
        ///         If the module is a DLL not already mapped for the calling process, the system
        ///         calls the DLL's <b>DllMain</b> function with the DLL_PROCESS_ATTACH value.  If
        ///         the DLL's entry-point function does not return TRUE, <b>LoadLibrary</b> fails
        ///         and returns NULL.  (The system immediately calls your entry-point function
        ///         with DLL_PROCESS_DETACH and unloads the DLL.)
        ///     </para>
        ///     <para>
        ///         It is not safe to call <b>LoadLibrary</b> from <b>DllMain</b>.  For more
        ///         information, see the Remarks section in <b>DllMain</b>.
        ///     </para>
        ///     <para>
        ///         Module handles are not global or inheritable.  A call to <b>LoadLibrary</b> by
        ///         one process does not produce a handle that another process can use — for
        ///         example, in calling <see cref="GetProcAddress" />.  The other process must
        ///         make its own call to <b>LoadLibrary</b> for the module before calling
        ///         <see cref="GetProcAddress" />.
        ///     </para>
        ///     <para>
        ///         If no file name extension is specified in the <i>fileName</i> parameter, the
        ///         default library extension .dll is appended.  However, the file name string
        ///         can include a trailing point character (.) to indicate that the module name
        ///         has no extension.  When no path is specified, the function searches for loaded
        ///         modules whose base name matches the base name of the module to be loaded.  If
        ///         the name matches, the load succeeds.  Otherwise, the function searches for the
        ///         file in the following sequence:
        ///     </para>
        ///     <para>
        ///         <list type="number">
        ///             <item>
        ///                 <description>
        ///                     The directory from which the application loaded.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <description>
        ///                     The current directory.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <description>
        ///                     The system directory.  Use the <see cref="GetSystemDirectory" />
        ///                     function to get the path of this directory.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <description>
        ///                     <para>
        ///                         The 16-bit system directory.  There is no function that
        ///                         obtains the path of this directory, but it is searched.
        ///                     </para>
        ///                     <para>
        ///                         <b>Windows Me/98/95:</b>  This directory does not exist.
        ///                     </para>
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <description>
        ///                     The Windows directory.  Use the <see cref="GetWindowsDirectory" />
        ///                     function to get the path of this directory.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <description>
        ///                     The directories that are listed in the PATH environment variable.
        ///                 </description>
        ///             </item>
        ///         </list>
        ///     </para>
        ///     <para>
        ///         <b>Windows Server 2003, Windows XP SP1:</b>  The default value of
        ///         HKLM\System\CurrentControlSet\Control\Session Manager\SafeDllSearchMode is 1
        ///         (current directory is searched after the system and Windows directories).
        ///     </para>
        ///     <para>
        ///         <b>Windows XP:</b>  If
        ///         HKLM\System\CurrentControlSet\Control\Session Manager\SafeDllSearchMode is 1,
        ///         the current directory is searched after the system and Windows directories,
        ///         but before the directories in the PATH environment variable.  The default
        ///         value is 0 (current directory is searched before the system and Windows
        ///         directories).
        ///     </para>
        ///     <para>
        ///         The first directory searched is the one directory containing the image file
        ///         used to create the calling process (for more information, see the
        ///         <b>CreateProcess</b> function).  Doing this allows private dynamic-link
        ///         library (DLL) files associated with a process to be found without adding the
        ///         process's installed directory to the PATH environment variable.
        ///     </para>
        ///     <para>
        ///         The search path can be altered using the <see cref="SetDllDirectory" />
        ///         function.  This solution is recommended instead of using
        ///         <b>SetCurrentDirectory</b> or hard-coding the full path to the DLL.
        ///     </para>
        ///     <para>
        ///         If a path is specified and there is a redirection file for the application,
        ///         the function searches for the module in the application's directory.  If the
        ///         module exists in the application's directory, the <b>LoadLibrary</b> function
        ///         ignores the specified path and loads the module from the application's
        ///         directory.  If the module does not exist in the application's directory,
        ///         <b>LoadLibrary</b> loads the module from the specified directory.
        ///     </para>
        /// </remarks>
        /// <seealso cref="FreeLibrary" />
        /// <seealso cref="GetProcAddress" />
        /// <seealso cref="GetSystemDirectory" />
        /// <seealso cref="GetWindowsDirectory" />
        /// <seealso cref="SetDllDirectory" />
        // <seealso cref="DllMain" />
        // <seealso cref="FindResource" />
        // <seealso cref="LoadLibraryEx" />
        // <seealso cref="LoadResource" />
        // WINBASEAPI HMODULE WINAPI LoadLibraryA(IN LPCSTR lpLibFileName);
        // WINBASEAPI HMODULE WINAPI LoadLibraryW(IN LPCWSTR lpLibFileName);
        [DllImport(KERNEL_NATIVE_LIBRARY, CallingConvention = CALLING_CONVENTION, CharSet = CharSet.Auto, SetLastError = true), SuppressUnmanagedCodeSecurity]
        public static extern IntPtr LoadLibrary(string fileName);
        #endregion IntPtr LoadLibrary(string fileName)

        #region bool QueryPerformanceCounter(out long performanceCount)
        /// <summary>
        ///     The <b>QueryPerformanceCounter</b> function retrieves the current value of the
        ///     high-resolution performance counter.
        /// </summary>
        /// <param name="performanceCount">
        ///     Pointer to a variable that receives the current performance-counter value, in
        ///     counts.
        /// </param>
        /// <returns>
        ///     <para>
        ///         If the function succeeds, the return value is true.
        ///     </para>
        ///     <para>
        ///         If the function fails, the return value is false.  To get extended error
        ///         information, call <see cref="Marshal.GetLastWin32Error" />.
        ///     </para>
        /// </returns>
        /// <remarks>
        ///     On a multiprocessor machine, it should not matter which processor is called.
        ///     However, you can get different results on different processors due to bugs in the
        ///     BIOS or the HAL.  To specify processor affinity for a thread, use the
        ///     <b>SetThreadAffinityMask</b> function.
        /// </remarks>
        /// <seealso cref="QueryPerformanceCounterFast" />
        /// <seealso cref="QueryPerformanceFrequency" />
        [DllImport(KERNEL_NATIVE_LIBRARY, CallingConvention = CALLING_CONVENTION, SetLastError = true), SuppressUnmanagedCodeSecurity]
        public static extern bool QueryPerformanceCounter(out long performanceCount);
        #endregion bool QueryPerformanceCounter(out long performanceCount)

        #region int QueryPerformanceCounterFast(out long performanceCount)
        /// <summary>
        ///     The <b>QueryPerformanceCounterFast</b> function retrieves the current value of the
        ///     high-resolution performance counter.
        /// </summary>
        /// <param name="performanceCount">
        ///     Pointer to a variable that receives the current performance-counter value, in
        ///     counts.
        /// </param>
        /// <returns>
        ///     <para>
        ///         If the function succeeds, the return value is true.
        ///     </para>
        ///     <para>
        ///         If the function fails, the return value is false.
        ///     </para>
        /// </returns>
        /// <remarks>
        ///     <para>
        ///         This version of <see cref="QueryPerformanceCounter" /> is slightly faster.  It
        ///         does not set the last Windows error.  Use with care.
        ///     </para>
        ///     <para>
        ///         On a multiprocessor machine, it should not matter which processor is called.
        ///         However, you can get different results on different processors due to bugs in
        ///         the BIOS or the HAL.  To specify processor affinity for a thread, use the
        ///         <b>SetThreadAffinityMask</b> function.
        ///     </para>
        /// </remarks>
        /// <seealso cref="QueryPerformanceCounter" />
        /// <seealso cref="QueryPerformanceFrequency" />
        [DllImport(KERNEL_NATIVE_LIBRARY, CallingConvention = CALLING_CONVENTION, EntryPoint = "QueryPerformanceCounter"), SuppressUnmanagedCodeSecurity]
        public static extern int QueryPerformanceCounterFast(out long performanceCount);
        #endregion int QueryPerformanceCounterFast(out long performanceCount)

        #region bool QueryPerformanceFrequency(out long frequency)
        /// <summary>
        ///     The <b>QueryPerformanceFrequency</b> function retrieves the frequency of the
        ///     high-resolution performance counter, if one exists.  The frequency cannot change
        ///     while the system is running.
        /// </summary>
        /// <param name="frequency">
        ///     Pointer to a variable that receives the current performance-counter frequency, in
        ///     counts per second.  If the installed hardware does not support a high-resolution
        ///     performance counter, this parameter can be zero.
        /// </param>
        /// <returns>
        ///     <para>
        ///         If the installed hardware supports a high-resolution performance counter, the
        ///         return value is true.
        ///     </para>
        ///     <para>
        ///         If the function fails, the return value is false.  To get extended error
        ///         information, call <see cref="Marshal.GetLastWin32Error" />.  For example, if
        ///         the installed hardware does not support a high-resolution performance counter,
        ///         the function fails.
        ///     </para>
        /// </returns>
        /// <remarks>
        ///     <b>Note</b>  The frequency of the high-resolution performance counter is not the
        ///     processor speed.
        /// </remarks>
        /// <seealso cref="QueryPerformanceCounter" />
        [DllImport(KERNEL_NATIVE_LIBRARY, CallingConvention = CALLING_CONVENTION, SetLastError = true), SuppressUnmanagedCodeSecurity]
        public static extern bool QueryPerformanceFrequency(out long frequency);
        #endregion #region bool QueryPerformanceFrequency(out long frequency)

        #region bool SetDllDirectory(string pathName)
        /// <summary>
        ///     The <b>SetDllDirectory</b> function modifies the search path used to locate DLLs
        ///     for the application.
        /// </summary>
        /// <param name="pathName">
        ///     Pointer to a null-terminated string that specifies the directories to be added to
        ///     the search path, separated by semicolons.  If this parameter is NULL, the default
        ///     search path is used.
        /// </param>
        /// <returns>
        ///     <para>
        ///         If the function succeeds, the return value is true.
        ///     </para>
        ///     <para>
        ///         If the function fails, the return value is false.  To get extended error
        ///         information, call <see cref="Marshal.GetLastWin32Error" />.
        ///     </para>
        /// </returns>
        /// <remarks>
        ///     <para>
        ///         The <b>SetDllDirectory</b> function affects all subsequent calls to the
        ///         <see cref="LoadLibrary" /> and <b>LoadLibraryEx</b> functions.  After calling
        ///         <b>SetDllDirectory</b>, the DLL search path is:
        ///     </para>
        ///     <para>
        ///         <list type="number">
        ///             <item>
        ///                 <description>
        ///                     The directory from which the application loaded.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <description>
        ///                     The directory specified by the <i>pathName</i> parameter.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <description>
        ///                     The system directory.  Use the <see cref="GetSystemDirectory" />
        ///                     function to get the path of this directory.  The name of this
        ///                     directory is System32.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <description>
        ///                     The 16-bit system directory.  There is no function that obtains
        ///                     the path of this directory, but it is searched.  The name of this
        ///                     directory is System.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <description>
        ///                     The Windows directory.  Use the <see cref="GetWindowsDirectory" />
        ///                     function to get the path of this directory.
        ///                 </description>
        ///             </item>
        ///             <item>
        ///                 <description>
        ///                     The directories that are listed in the PATH environment variable.
        ///                 </description>
        ///             </item>
        ///         </list>
        ///     </para>
        ///     <para>
        ///         To revert to the default search path used by <see cref="LoadLibrary" /> and
        ///         <b>LoadLibraryEx</b>, call <b>SetDllDirectory</b> with NULL.
        ///     </para>
        /// </remarks>
        /// <seealso cref="GetDllDirectory" />
        /// <seealso cref="GetSystemDirectory" />
        /// <seealso cref="GetWindowsDirectory" />
        /// <seealso cref="LoadLibrary" />
        // <seealso cref="LoadLibraryEx" />
        // WINBASEAPI BOOL WINAPI SetDllDirectoryA(IN LPCSTR lpPathName);
        // WINBASEAPI BOOL WINAPI SetDllDirectoryW(IN LPCWSTR lpPathName);
        [DllImport(KERNEL_NATIVE_LIBRARY, CallingConvention = CALLING_CONVENTION, CharSet = CharSet.Auto, SetLastError = true), SuppressUnmanagedCodeSecurity]
        public static extern bool SetDllDirectory(string pathName);
        #endregion bool SetDllDirectory(string pathName)

        #region bool SetProcessWorkingSetSize(IntPtr process, int minimumWorkingSetSize, int maximumWorkingSetSize)
        /// <summary>
        ///     The <b>SetProcessWorkingSetSize</b> function sets the minimum and maximum working
        ///     set sizes for the specified process.
        /// </summary>
        /// <param name="process">
        ///     <para>
        ///         Handle to the process whose working set sizes is to be set.
        ///     </para>
        ///     <para>
        ///         The handle must have the PROCESS_SET_QUOTA access right.
        ///     </para>
        /// </param>
        /// <param name="minimumWorkingSetSize">
        ///     <para>
        ///         Minimum working set size for the process, in bytes.  The virtual memory
        ///         manager attempts to keep at least this much memory resident in the
        ///         process whenever the process is active.
        ///     </para>
        ///     <para>
        ///         If both <i>minimumWorkingSetSize</i> and <i>maximumWorkingSetSize</i> have the
        ///         value -1, the function temporarily trims the working set of the specified
        ///         process to zero.  This essentially swaps the process out of physical RAM
        ///         memory.
        ///     </para>
        /// </param>
        /// <param name="maximumWorkingSetSize">
        ///     <para>
        ///         Maximum working set size for the process, in bytes.  The virtual memory
        ///         manager attempts to keep no more than this much memory resident in the
        ///         process whenever the process is active and memory is in short supply.
        ///     </para>
        ///     <para>
        ///         If both <i>minimumWorkingSetSize</i> and <i>maximumWorkingSetSize</i> have the
        ///         value -1, the function temporarily trims the working set of the specified
        ///         process to zero.  This essentially swaps the process out of physical RAM
        ///         memory.
        ///     </para>
        /// </param>
        /// <returns>
        ///     <para>
        ///         If the function succeeds, the return value is true.
        ///     </para>
        ///     <para>
        ///         If the function fails, the return value is false.  To get extended error
        ///         information, call <see cref="Marshal.GetLastWin32Error" />.
        ///     </para>
        /// </returns>
        /// <remarks>
        ///     <para>
        ///         The working set of a process is the set of memory pages currently visible to
        ///         the process in physical RAM memory.  These pages are resident and available
        ///         for an application to use without triggering a page fault.  The minimum and
        ///         maximum working set sizes affect the virtual memory paging behavior of a
        ///         process.
        ///     </para>
        ///     <para>
        ///         The working set of the specified process can be emptied by specifying the
        ///         value -1 for both the minimum and maximum working set sizes.
        ///     </para>
        ///     <para>
        ///         If the values of either <i>minimumWorkingSetSize</i> or
        ///         <i>maximumWorkingSetSize</i> are greater than the process' current working
        ///         set sizes, the specified process must have the SE_INC_BASE_PRIORITY_NAME
        ///         privilege.  Users in the Administrators and Power Users groups generally
        ///         have this privilege.
        ///     </para>
        ///     <para>
        ///         The operating system allocates working set sizes on a first-come,
        ///         first-served basis.  For example, if an application successfully sets 40
        ///         megabytes as its minimum working set size on a 64-megabyte system, and a
        ///         second application requests a 40-megabyte working set size, the operating
        ///         system denies the second application's request.
        ///     </para>
        ///     <para>
        ///         Using the <b>SetProcessWorkingSetSize</b> function to set an application's
        ///         minimum and maximum working set sizes does not guarantee that the requested
        ///         memory will be reserved, or that it will remain resident at all times.  When
        ///         the application is idle, or a low-memory situation causes a demand for memory,
        ///         the operating system can reduce the application's working set.  An application
        ///         can use the <b>VirtualLock</b> function to lock ranges of the application's
        ///         virtual address space in memory; however, that can potentially degrade the
        ///         performance of the system.
        ///     </para>
        ///     <para>
        ///         When you increase the working set size of an application, you are taking away
        ///         physical memory from the rest of the system.  This can degrade the performance
        ///         of other applications and the system as a whole.  It can also lead to failures
        ///         of operations that require physical memory to be present; for example,
        ///         creating processes, threads, and kernel pool.  Thus, you must use the
        ///         <b>SetProcessWorkingSetSize</b> function carefully.  You must always consider
        ///         the performance of the whole system when you are designing an application.
        ///     </para>
        /// </remarks>
        /// <seealso cref="GetProcessWorkingSetSize" />
        // <seealso cref="VirtualLock" />
        // WINBASEAPI BOOL WINAPI SetProcessWorkingSetSize(IN HANDLE hProcess, IN SIZE_T dwMinimumWorkingSetSize, IN SIZE_T dwMaximumWorkingSetSize);
        [DllImport(KERNEL_NATIVE_LIBRARY, CallingConvention = CALLING_CONVENTION, SetLastError = true), SuppressUnmanagedCodeSecurity]
        public static extern bool SetProcessWorkingSetSize(IntPtr process, int minimumWorkingSetSize, int maximumWorkingSetSize);
        #endregion bool SetProcessWorkingSetSize(IntPtr process, int minimumWorkingSetSize, int maximumWorkingSetSize)
    }

    /// <summary>
    /// OpenGL wrapper methods and constants. See OpenGL documentation for more information.
    /// </summary>

    [CLSCompliant(false)]
    public static class Gl
    {
        public const int GL_MATRIX4_ARB = 0x000088c4;
        public const int GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x000083f2;
        public const int GL_ONE_MINUS_SRC_ALPHA = 0x00000303;
        public const int GL_STENCIL_BACK_FUNC = 0x00008800;
        public const int GL_AND_REVERSE = 0x00001502;
        public const int GL_UNSIGNED_SHORT_8_8_APPLE = 0x000085ba;
        public const int GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = 0x000080ba;
        public const int GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 0x00200000;
        public const int GL_DRAW_BUFFER3_ARB = 0x00008828;
        public const int GL_REG_9_ATI = 0x0000892a;
        public const int GL_SGIX_sprite = 0x00000001;
        public const int GL_DEPTH_BOUNDS_EXT = 0x00008891;
        public const int GL_POINT_SIZE_GRANULARITY = 0x00000b13;
        public const int GL_CONVOLUTION_WIDTH = 0x00008018;
        public const int GL_RGB_FLOAT32_ATI = 0x00008815;
        public const int GL_COLOR_INDEXES = 0x00001603;
        public const int GL_CON_26_ATI = 0x0000895b;
        public const int GL_TRIANGLE_LIST_SUN = 0x000081d7;
        public const int GL_COLOR_ARRAY_STRIDE = 0x00008083;
        public const int GL_TEXTURE_CLIPMAP_CENTER_SGIX = 0x00008171;
        public const int GL_OUTPUT_TEXTURE_COORD21_EXT = 0x000087b2;
        public const int GL_MAX_VIEWPORT_DIMS = 0x00000d3a;
        public const int GL_GENERATE_MIPMAP_SGIS = 0x00008191;
        public const int GL_PIXEL_MAP_I_TO_G_SIZE = 0x00000cb3;
        public const int GL_LUMINANCE8_ALPHA8_EXT = 0x00008045;
        public const int GL_BINORMAL_ARRAY_STRIDE_EXT = 0x00008441;
        public const int GL_OP_RECIP_SQRT_EXT = 0x00008795;
        public const int GL_SAMPLER_2D_RECT_ARB = 0x00008b63;
        public const int GL_MATRIX29_ARB = 0x000088dd;
        public const int GL_CULL_VERTEX_IBM = 0x0001928a;
        public const int GL_MAX = 0x00008008;
        public const int GL_OBJECT_LINE_SGIS = 0x000081f7;
        public const int GL_SIGNED_LUMINANCE8_ALPHA8_NV = 0x00008704;
        public const int GL_CLAMP_READ_COLOR_ARB = 0x0000891c;
        public const int GL_PIXEL_SUBSAMPLE_4444_SGIX = 0x000085a2;
        public const int GL_COMPRESSED_LUMINANCE_ARB = 0x000084ea;
        public const int GL_TEXTURE_BINDING_CUBE_MAP_EXT = 0x00008514;
        public const int GL_STRICT_LIGHTING_HINT_PGI = 0x0001a217;
        public const int GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = 0x00008455;
        public const int GL_INDEX_TEST_REF_EXT = 0x000081b7;
        public const int GL_COMBINER2_NV = 0x00008552;
        public const int GL_SMOOTH_LINE_WIDTH_RANGE = 0x00000b22;
        public const int GL_MAX_TEXTURE_COORDS_ARB = 0x00008871;
        public const int GL_DECAL = 0x00002101;
        public const int GL_UNPACK_ALIGNMENT = 0x00000cf5;
        public const int GL_MAX_PROGRAM_MATRICES_ARB = 0x0000862f;
        public const int GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 0x000086a2;
        public const int GL_FLOAT_RGBA32_NV = 0x0000888b;
        public const int GL_FOG_COORDINATE_ARRAY_LIST_IBM = 0x000192a4;
        public const int GL_CON_4_ATI = 0x00008945;
        public const int GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = 0x000083f5;
        public const int GL_COMBINE_ARB = 0x00008570;
        public const int GL_BOOL_VEC2_ARB = 0x00008b57;
        public const int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = 0x0000851a;
        public const int GL_BUMP_TEX_UNITS_ATI = 0x00008778;
        public const int GL_BINORMAL_ARRAY_POINTER_EXT = 0x00008443;
        public const int GL_TEXTURE21_ARB = 0x000084d5;
        public const int GL_OPERAND2_ALPHA = 0x0000859a;
        public const int GL_COLOR_ATTACHMENT7_EXT = 0x00008ce7;
        public const int GL_OPERAND0_ALPHA_EXT = 0x00008598;
        public const int GL_OUTPUT_TEXTURE_COORD1_EXT = 0x0000879e;
        public const int GL_MODELVIEW29_ARB = 0x0000873d;
        public const int GL_VERTEX_ATTRIB_ARRAY5_NV = 0x00008655;
        public const int GL_FUNC_ADD_EXT = 0x00008006;
        public const int GL_SCALE_BY_FOUR_NV = 0x0000853f;
        public const int GL_FOG_SCALE_SGIX = 0x000081fc;
        public const int GL_CONSTANT_BORDER_HP = 0x00008151;
        public const int GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x000088a2;
        public const int GL_COLOR_WRITEMASK = 0x00000c23;
        public const int GL_VERTEX_STREAM3_ATI = 0x0000876f;
        public const int GL_SPRITE_AXIAL_SGIX = 0x0000814c;
        public const int GL_TEXTURE_LIGHT_EXT = 0x00008350;
        public const int GL_NORMAL_ARRAY_TYPE = 0x0000807e;
        public const int GL_PROXY_TEXTURE_4D_SGIS = 0x00008135;
        public const int GL_SPRITE_OBJECT_ALIGNED_SGIX = 0x0000814d;
        public const int GL_NOR = 0x00001508;
        public const int GL_TEXTURE17 = 0x000084d1;
        public const int GL_TEXTURE16 = 0x000084d0;
        public const int GL_TEXTURE15 = 0x000084cf;
        public const int GL_TEXTURE14 = 0x000084ce;
        public const int GL_TEXTURE13 = 0x000084cd;
        public const int GL_TEXTURE12 = 0x000084cc;
        public const int GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x00000b23;
        public const int GL_TEXTURE10 = 0x000084ca;
        public const int GL_PACK_SKIP_PIXELS = 0x00000d04;
        public const int GL_TEXTURE19 = 0x000084d3;
        public const int GL_TEXTURE18 = 0x000084d2;
        public const int GL_PROGRAM_STRING_NV = 0x00008628;
        public const int GL_IMAGE_TRANSLATE_Y_HP = 0x00008158;
        public const int GL_POINT_SIZE = 0x00000b11;
        public const int GL_TEXTURE2_ARB = 0x000084c2;
        public const int GL_SGIS_texture4D = 0x00000001;
        public const int GL_TEXTURE_COLOR_WRITEMASK_SGIS = 0x000081ef;
        public const int GL_EVAL_TRIANGULAR_2D_NV = 0x000086c1;
        public const int GL_TEXTURE_WRAP_S = 0x00002802;
        public const int GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x000087cc;
        public const int GL_UNPACK_SWAP_BYTES = 0x00000cf0;
        public const int GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = 0x000080bf;
        public const int GL_DRAW_BUFFER13 = 0x00008832;
        public const int GL_MAX_PROGRAM_LOOP_DEPTH_NV = 0x000088f7;
        public const int GL_VERTEX_ARRAY_SIZE = 0x0000807a;
        public const int GL_REG_6_ATI = 0x00008927;
        public const int GL_ACTIVE_TEXTURE_ARB = 0x000084e0;
        public const int GL_DRAW_BUFFER14_ATI = 0x00008833;
        public const int GL_SPARE0_PLUS_SECONDARY_COLOR_NV = 0x00008532;
        public const int GL_CURRENT_QUERY = 0x00008865;
        public const int GL_TEXTURE_BLUE_SIZE = 0x0000805e;
        public const int GL_RESAMPLE_REPLICATE_OML = 0x00008986;
        public const int GL_SATURATE_BIT_ATI = 0x00000040;
        public const int GL_COMPRESSED_INTENSITY_ARB = 0x000084ec;
        public const int GL_DRAW_BUFFER = 0x00000c01;
        public const int GL_1PASS_SGIS = 0x000080a1;
        public const int GL_REPLACEMENT_CODE_SUN = 0x000081d8;
        public const int GL_POST_TEXTURE_FILTER_SCALE_SGIX = 0x0000817a;
        public const int GL_QUAD_LUMINANCE4_SGIS = 0x00008120;
        public const int GL_INTERPOLATE_ARB = 0x00008575;
        public const int GL_NORMAL_ARRAY = 0x00008075;
        public const int GL_COMBINER4_NV = 0x00008554;
        public const int GL_POST_COLOR_MATRIX_GREEN_BIAS = 0x000080b9;
        public const int GL_COMBINER_SCALE_NV = 0x00008548;
        public const int GL_EVAL_VERTEX_ATTRIB6_NV = 0x000086cc;
        public const int GL_LUMINANCE4 = 0x0000803f;
        public const int GL_UNSIGNED_INT_2_10_10_10_REV = 0x00008368;
        public const int GL_VARIABLE_F_NV = 0x00008528;
        public const int GL_COLOR_SUM = 0x00008458;
        public const int GL_DRAW_BUFFER10 = 0x0000882f;
        public const int GL_ACCUM_RED_BITS = 0x00000d58;
        public const int GL_DRAW_BUFFER12 = 0x00008831;
        public const int GL_LUMINANCE8 = 0x00008040;
        public const int GL_DRAW_BUFFER14 = 0x00008833;
        public const int GL_TEXTURE22_ARB = 0x000084d6;
        public const int GL_LINE_WIDTH_GRANULARITY = 0x00000b23;
        public const int GL_HISTOGRAM_ALPHA_SIZE_EXT = 0x0000802b;
        public const int GL_FRAGMENT_LIGHT7_SGIX = 0x00008413;
        public const int GL_MAX_SHININESS_NV = 0x00008504;
        public const int GL_ACCUM = 0x00000100;
        public const int GL_CONSTANT_COLOR1_NV = 0x0000852b;
        public const int GL_FOG_COORDINATE_ARRAY_EXT = 0x00008457;
        public const int GL_ALPHA_BITS = 0x00000d55;
        public const int GL_TEXTURE_COMPRESSION_HINT = 0x000084ef;
        public const int GL_REG_21_ATI = 0x00008936;
        public const int GL_BUFFER_MAP_POINTER = 0x000088bd;
        public const int GL_INVALID_VALUE = 0x00000501;
        public const int GL_INTENSITY_FLOAT32_ATI = 0x00008817;
        public const int GL_BLUE_MIN_CLAMP_INGR = 0x00008562;
        public const int GL_ONE = 0x00000001;
        public const int GL_TRANSPOSE_TEXTURE_MATRIX_ARB = 0x000084e5;
        public const int GL_DISTANCE_ATTENUATION_EXT = 0x00008129;
        public const int GL_UNSIGNED_INT_24_8_NV = 0x000084fa;
        public const int GL_VERSION_1_4 = 0x00000001;
        public const int GL_VERSION_1_5 = 0x00000001;
        public const int GL_VERSION_1_2 = 0x00000001;
        public const int GL_VERSION_1_3 = 0x00000001;
        public const int GL_VERSION_1_1 = 0x00000001;
        public const int GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 0x00008402;
        public const int GL_COMBINE_RGB_ARB = 0x00008571;
        public const int GL_EXT_shared_texture_palette = 0x00000001;
        public const int GL_POINT_SIZE_MAX = 0x00008127;
        public const int GL_MAP1_GRID_DOMAIN = 0x00000dd0;
        public const int GL_OUTPUT_TEXTURE_COORD0_EXT = 0x0000879d;
        public const int GL_PERSPECTIVE_CORRECTION_HINT = 0x00000c50;
        public const int GL_TEXTURE_COMPARE_FUNC = 0x0000884d;
        public const int GL_SECONDARY_COLOR_ARRAY_POINTER = 0x0000845d;
        public const int GL_VERTEX_STREAM1_ATI = 0x0000876d;
        public const int GL_MAX_DRAW_BUFFERS_ATI = 0x00008824;
        public const int GL_QUERY_RESULT_AVAILABLE = 0x00008867;
        public const int GL_TEXTURE_DEFORMATION_BIT_SGIX = 0x00000001;
        public const int GL_MATRIX17_ARB = 0x000088d1;
        public const int GL_SCISSOR_TEST = 0x00000c11;
        public const int GL_MATRIX25_ARB = 0x000088d9;
        public const int GL_PROGRAM_ERROR_POSITION_NV = 0x0000864b;
        public const int GL_DEPENDENT_RGB_TEXTURE_3D_NV = 0x00008859;
        public const int GL_PACK_IMAGE_HEIGHT = 0x0000806c;
        public const int GL_PROXY_TEXTURE_1D = 0x00008063;
        public const int GL_SGIS_texture_border_clamp = 0x00000001;
        public const int GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = 0x00008541;
        public const int GL_FOG_SCALE_VALUE_SGIX = 0x000081fd;
        public const int GL_SAMPLE_MASK_SGIS = 0x000080a0;
        public const int GL_VERTEX_ATTRIB_ARRAY4_NV = 0x00008654;
        public const int GL_CONVOLUTION_HEIGHT_EXT = 0x00008019;
        public const int GL_IUI_V2F_EXT = 0x000081ad;
        public const int GL_POLYGON_TOKEN = 0x00000703;
        public const int GL_CONSTANT_BORDER = 0x00008151;
        public const int GL_TRUE = 0x00000001;
        public const int GL_VERTEX_ARRAY_RANGE_APPLE = 0x0000851d;
        public const int GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = 0x000083f7;
        public const int GL_CURRENT_RASTER_POSITION_VALID = 0x00000b08;
        public const int GL_COORD_REPLACE_NV = 0x00008862;
        public const int GL_2PASS_1_SGIS = 0x000080a3;
        public const int GL_TEXTURE_PRE_SPECULAR_HP = 0x00008169;
        public const int GL_RGB16_EXT = 0x00008054;
        public const int GL_DRAW_BUFFER7_ATI = 0x0000882c;
        public const int GL_SPRITE_EYE_ALIGNED_SGIX = 0x0000814e;
        public const int GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x00008809;
        public const int GL_4PASS_2_EXT = 0x000080a6;
        public const int GL_RENDERER = 0x00001f01;
        public const int GL_FORCE_BLUE_TO_ONE_NV = 0x00008860;
        public const int GL_VIEWPORT = 0x00000ba2;
        public const int GL_VARIANT_DATATYPE_EXT = 0x000087e5;
        public const int GL_COLOR4_BIT_PGI = 0x00020000;
        public const int GL_FOG_COLOR = 0x00000b66;
        public const int GL_POINT_SIZE_MIN_ARB = 0x00008126;
        public const int GL_RGB8_EXT = 0x00008051;
        public const int GL_POLYGON_OFFSET_FACTOR = 0x00008038;
        public const int GL_LUMINANCE6_ALPHA2_EXT = 0x00008044;
        public const int GL_POST_CONVOLUTION_BLUE_BIAS_EXT = 0x00008022;
        public const int GL_EVAL_VERTEX_ATTRIB12_NV = 0x000086d2;
        public const int GL_MAP2_VERTEX_ATTRIB8_4_NV = 0x00008678;
        public const int GL_UNSIGNED_INT_S8_S8_8_8_NV = 0x000086da;
        public const int GL_OPERAND0_ALPHA = 0x00008598;
        public const int GL_REDUCE = 0x00008016;
        public const int GL_ONE_MINUS_CONSTANT_ALPHA_EXT = 0x00008004;
        public const int GL_DONT_CARE = 0x00001100;
        public const int GL_BLEND_SRC = 0x00000be1;
        public const int GL_TEXTURE_FILTER_CONTROL = 0x00008500;
        public const int GL_VERTEX_STATE_PROGRAM_NV = 0x00008621;
        public const int GL_INTERLACE_OML = 0x00008980;
        public const int GL_TEXTURE4_ARB = 0x000084c4;
        public const int GL_LOCAL_CONSTANT_EXT = 0x000087c3;
        public const int GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = 0x000083f6;
        public const int GL_MAX_RENDERBUFFER_SIZE_EXT = 0x000084e8;
        public const int GL_COLOR_BUFFER_BIT = 0x00004000;
        public const int GL_TEXTURE_HI_SIZE_NV = 0x0000871b;
        public const int GL_2_BYTES = 0x00001407;
        public const int GL_UNPACK_RESAMPLE_SGIX = 0x0000842d;
        public const int GL_R1UI_T2F_C4F_N3F_V3F_SUN = 0x000085cb;
        public const int GL_VERTEX_PROGRAM_ARB = 0x00008620;
        public const int GL_VERTEX_ARRAY_POINTER_EXT = 0x0000808e;
        public const int GL_MAP1_VERTEX_ATTRIB5_4_NV = 0x00008665;
        public const int GL_VARIABLE_B_NV = 0x00008524;
        public const int GL_UNPACK_IMAGE_DEPTH_SGIS = 0x00008133;
        public const int GL_SGIX_impact_pixel_texture = 0x00000001;
        public const int GL_IDENTITY_NV = 0x0000862a;
        public const int GL_PIXEL_SUBSAMPLE_2424_SGIX = 0x000085a3;
        public const int GL_EXPAND_NORMAL_NV = 0x00008538;
        public const int GL_EXT_texture = 0x00000001;
        public const int GL_MATRIX31_ARB = 0x000088df;
        public const int GL_VERTEX_ATTRIB_ARRAY6_NV = 0x00008656;
        public const int GL_LIGHT_ENV_MODE_SGIX = 0x00008407;
        public const int GL_MULTISAMPLE_BIT = 0x20000000;
        public const int GL_NORMAL_ARRAY_POINTER_EXT = 0x0000808f;
        public const int GL_MAX_VARYING_FLOATS = 0x00008b4b;
        public const int GL_DUAL_LUMINANCE4_SGIS = 0x00008114;
        public const int GL_STENCIL_WRITEMASK = 0x00000b98;
        public const int GL_PIXEL_MAP_I_TO_I_SIZE = 0x00000cb0;
        public const int GL_4PASS_0_SGIS = 0x000080a4;
        public const int GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = 0x00008896;
        public const int GL_STENCIL_REF = 0x00000b97;
        public const int GL_INTENSITY8 = 0x0000804b;
        public const int GL_PACK_ALIGNMENT = 0x00000d05;
        public const int GL_INTENSITY4 = 0x0000804a;
        public const int GL_SHADER_CONSISTENT_NV = 0x000086dd;
        public const int GL_VERTEX_BLEND_ARB = 0x000086a7;
        public const int GL_TEXTURE_WIDTH = 0x00001000;
        public const int GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = 0x00008645;
        public const int GL_OP_ADD_EXT = 0x00008787;
        public const int GL_MODELVIEW0_EXT = 0x00001700;
        public const int GL_4PASS_3_SGIS = 0x000080a7;
        public const int GL_NATIVE_GRAPHICS_HANDLE_PGI = 0x0001a202;
        public const int GL_FENCE_APPLE = 0x00008a0b;
        public const int GL_TRANSPOSE_COLOR_MATRIX_ARB = 0x000084e6;
        public const int GL_INSTRUMENT_BUFFER_POINTER_SGIX = 0x00008180;
        public const int GL_FLOAT_RGBA_NV = 0x00008883;
        public const int GL_FLOAT_RGBA16_NV = 0x0000888a;
        public const int GL_COLOR_INDEX1_EXT = 0x000080e2;
        public const int GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x00008808;
        public const int GL_STENCIL_FAIL = 0x00000b94;
        public const int GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = 0x000085c3;
        public const int GL_CURRENT_INDEX = 0x00000b01;
        public const int GL_PRESERVE_ATI = 0x00008762;
        public const int GL_REFLECTION_MAP_NV = 0x00008512;
        public const int GL_SOURCE1_RGB_EXT = 0x00008581;
        public const int GL_EXP2 = 0x00000801;
        public const int GL_TRIANGLE_MESH_SUN = 0x00008615;
        public const int GL_TEXTURE_ENV_MODE = 0x00002200;
        public const int GL_FRAGMENT_LIGHTING_SGIX = 0x00008400;
        public const int GL_UNSIGNED_SHORT_5_5_5_1_EXT = 0x00008034;
        public const int GL_SOURCE0_ALPHA_EXT = 0x00008588;
        public const int GL_SAMPLE_ALPHA_TO_ONE_ARB = 0x0000809f;
        public const int GL_BLEND = 0x00000be2;
        public const int GL_PREVIOUS = 0x00008578;
        public const int GL_MAP2_COLOR_4 = 0x00000db0;
        public const int GL_FALSE = 0x00000000;
        public const int GL_TEXTURE20_ARB = 0x000084d4;
        public const int GL_ARRAY_OBJECT_BUFFER_ATI = 0x00008766;
        public const int GL_CURRENT_RASTER_INDEX = 0x00000b05;
        public const int GL_TRANSPOSE_PROJECTION_MATRIX_ARB = 0x000084e4;
        public const int GL_EVAL_VERTEX_ATTRIB10_NV = 0x000086d0;
        public const int GL_FENCE_STATUS_NV = 0x000084f3;
        public const int GL_EXPAND_NEGATE_NV = 0x00008539;
        public const int GL_REG_14_ATI = 0x0000892f;
        public const int GL_RESCALE_NORMAL = 0x0000803a;
        public const int GL_INDEX_MATERIAL_FACE_EXT = 0x000081ba;
        public const int GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 0x0000887a;
        public const int GL_4PASS_3_EXT = 0x000080a7;
        public const int GL_FRAMEBUFFER_COMPLETE_EXT = 0x00008cd5;
        public const int GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = 0x00008623;
        public const int GL_MODELVIEW0_STACK_DEPTH_EXT = 0x00000ba3;
        public const int GL_SAMPLE_COVERAGE_ARB = 0x000080a0;
        public const int GL_INTENSITY12_EXT = 0x0000804c;
        public const int GL_EYE_PLANE_ABSOLUTE_NV = 0x0000855c;
        public const int GL_DELETE_STATUS = 0x00008b80;
        public const int GL_ALPHA_FLOAT32_ATI = 0x00008816;
        public const int GL_TEXTURE7_ARB = 0x000084c7;
        public const int GL_NEVER = 0x00000200;
        public const int GL_INCR_WRAP = 0x00008507;
        public const int GL_STATIC_ATI = 0x00008760;
        public const int GL_VERTEX_ARRAY_COUNT_EXT = 0x0000807d;
        public const int GL_AND_INVERTED = 0x00001504;
        public const int GL_TEXTURE_RECTANGLE_ARB = 0x000084f5;
        public const int GL_RGB10_EXT = 0x00008052;
        public const int GL_COLOR_ARRAY_BUFFER_BINDING = 0x00008898;
        public const int GL_SOURCE0_ALPHA_ARB = 0x00008588;
        public const int GL_OP_FRAC_EXT = 0x00008789;
        public const int GL_FOG_HINT = 0x00000c54;
        public const int GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 0x00008515;
        public const int GL_TEXTURE_GREEN_SIZE = 0x0000805d;
        public const int GL_FLOAT_VEC3_ARB = 0x00008b51;
        public const int GL_PROGRAM_ATTRIBS_ARB = 0x000088ac;
        public const int GL_TEXTURE_BINDING_1D = 0x00008068;
        public const int GL_EMBOSS_MAP_NV = 0x0000855f;
        public const int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENTS_EXT = 0x00008cd6;
        public const int GL_STACK_UNDERFLOW = 0x00000504;
        public const int GL_FOG_START = 0x00000b63;
        public const int GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x00008852;
        public const int GL_TEXTURE_DS_SIZE_NV = 0x0000871d;
        public const int GL_FOG_COORD_SRC = 0x00008450;
        public const int GL_POINT_SIZE_MAX_SGIS = 0x00008127;
        public const int GL_RENDERBUFFER_HEIGHT_EXT = 0x00008d43;
        public const int GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = 0x00008b89;
        public const int GL_MAX_TEXTURE_UNITS = 0x000084e2;
        public const int GL_DOT3_RGB_EXT = 0x00008740;
        public const int GL_PROXY_TEXTURE_1D_EXT = 0x00008063;
        public const int GL_POST_COLOR_MATRIX_RED_BIAS_SGI = 0x000080b8;
        public const int GL_LINE_WIDTH = 0x00000b21;
        public const int GL_BGR_EXT = 0x000080e0;
        public const int GL_RGBA12_EXT = 0x0000805a;
        public const int GL_IMAGE_ROTATE_ANGLE_HP = 0x00008159;
        public const int GL_EDGEFLAG_BIT_PGI = 0x00040000;
        public const int GL_CON_1_ATI = 0x00008942;
        public const int GL_PROXY_TEXTURE_RECTANGLE_ARB = 0x000084f7;
        public const int GL_OBJECT_PLANE = 0x00002501;
        public const int GL_IUI_N3F_V2F_EXT = 0x000081af;
        public const int GL_ACCUM_BLUE_BITS = 0x00000d5a;
        public const int GL_FOG_DENSITY = 0x00000b62;
        public const int GL_PIXEL_COUNT_AVAILABLE_NV = 0x00008867;
        public const int GL_MIRROR_CLAMP_TO_EDGE_ATI = 0x00008743;
        public const int GL_OPERAND0_RGB_ARB = 0x00008590;
        public const int GL_OUTPUT_TEXTURE_COORD22_EXT = 0x000087b3;
        public const int GL_MAX_CONVOLUTION_HEIGHT_EXT = 0x0000801b;
        public const int GL_VARIANT_ARRAY_EXT = 0x000087e8;
        public const int GL_INDEX_ARRAY_POINTER = 0x00008091;
        public const int GL_INT_VEC4_ARB = 0x00008b55;
        public const int GL_SIGNED_HILO16_NV = 0x000086fa;
        public const int GL_LUMINANCE_ALPHA32F_ARB = 0x00008819;
        public const int GL_RED_MAX_CLAMP_INGR = 0x00008564;
        public const int GL_T2F_C3F_V3F = 0x00002a2a;
        public const int GL_VERTEX_ATTRIB_ARRAY0_NV = 0x00008650;
        public const int GL_CCW = 0x00000901;
        public const int GL_VERTEX_ARRAY_LIST_STRIDE_IBM = 0x000192a8;
        public const int GL_MATRIX26_ARB = 0x000088da;
        public const int GL_COLOR_MATERIAL_PARAMETER = 0x00000b56;
        public const int GL_DYNAMIC_ATI = 0x00008761;
        public const int GL_TEXTURE31_ARB = 0x000084df;
        public const int GL_TEXTURE_STACK_DEPTH = 0x00000ba5;
        public const int GL_INDEX_MATERIAL_PARAMETER_EXT = 0x000081b9;
        public const int GL_REGISTER_COMBINERS_NV = 0x00008522;
        public const int GL_CON_31_ATI = 0x00008960;
        public const int GL_PACK_CMYK_HINT_EXT = 0x0000800e;
        public const int GL_SIGNED_ALPHA8_NV = 0x00008706;
        public const int GL_MODELVIEW14_ARB = 0x0000872e;
        public const int GL_NEGATIVE_X_EXT = 0x000087d9;
        public const int GL_DOT_PRODUCT_PASS_THROUGH_NV = 0x0000885b;
        public const int GL_LO_SCALE_NV = 0x0000870f;
        public const int GL_RGB5_EXT = 0x00008050;
        public const int GL_MAX_4D_TEXTURE_SIZE_SGIS = 0x00008138;
        public const int GL_FLOAT_RGB16_NV = 0x00008888;
        public const int GL_COLOR_SUM_CLAMP_NV = 0x0000854f;
        public const int GL_OUTPUT_TEXTURE_COORD8_EXT = 0x000087a5;
        public const int GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = 0x0000808a;
        public const int GL_MAX_CLIPMAP_DEPTH_SGIX = 0x00008177;
        public const int GL_MULTISAMPLE_BIT_EXT = 0x20000000;
        public const int GL_EXT_blend_logic_op = 0x00000001;
        public const int GL_TYPE_RGBA_FLOAT_ATI = 0x00008820;
        public const int GL_SOURCE2_ALPHA = 0x0000858a;
        public const int GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = 0x00008521;
        public const int GL_DEPTH_COMPONENT16 = 0x000081a5;
        public const int GL_POLYGON_SMOOTH_HINT = 0x00000c53;
        public const int GL_MATRIX11_ARB = 0x000088cb;
        public const int GL_TEXTURE27_ARB = 0x000084db;
        public const int GL_3_BYTES = 0x00001408;
        public const int GL_FOG_COORD_ARRAY_BUFFER_BINDING = 0x0000889d;
        public const int GL_MATRIX1_ARB = 0x000088c1;
        public const int GL_BGRA_EXT = 0x000080e1;
        public const int GL_LIGHT_MODEL_AMBIENT = 0x00000b53;
        public const int GL_INVARIANT_VALUE_EXT = 0x000087ea;
        public const int GL_HISTOGRAM_FORMAT_EXT = 0x00008027;
        public const int GL_VERTEX_ARRAY_BUFFER_BINDING = 0x00008896;
        public const int GL_ORDER = 0x00000a01;
        public const int GL_BOOL_ARB = 0x00008b56;
        public const int GL_SAMPLER_2D = 0x00008b5e;
        public const int GL_MATRIX8_ARB = 0x000088c8;
        public const int GL_SGIX_calligraphic_fragment = 0x00000001;
        public const int GL_REPLACE_OLDEST_SUN = 0x00000003;
        public const int GL_MAP_COLOR = 0x00000d10;
        public const int GL_STENCIL_INDEX16_EXT = 0x00008d49;
        public const int GL_COLOR_ARRAY_TYPE_EXT = 0x00008082;
        public const int GL_HISTOGRAM_BLUE_SIZE_EXT = 0x0000802a;
        public const int GL_CULL_VERTEX_EXT = 0x000081aa;
        public const int GL_CURRENT_SECONDARY_COLOR = 0x00008459;
        public const int GL_SGI_color_table = 0x00000001;
        public const int GL_TEXCOORD4_BIT_PGI = unchecked((int)0x80000000);
        public const int GL_FOG_COORDINATE_SOURCE_EXT = 0x00008450;
        public const int GL_DRAW_BUFFER1_ARB = 0x00008826;
        public const int GL_VERTEX_SHADER_VARIANTS_EXT = 0x000087d0;
        public const int GL_PROXY_TEXTURE_CUBE_MAP = 0x0000851b;
        public const int GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x00008625;
        public const int GL_TEXTURE_PRIORITY = 0x00008066;
        public const int GL_REFERENCE_PLANE_SGIX = 0x0000817d;
        public const int GL_NORMAL_ARRAY_COUNT_EXT = 0x00008080;
        public const int GL_COMPRESSED_LUMINANCE_ALPHA_ARB = 0x000084eb;
        public const int GL_4PASS_1_SGIS = 0x000080a5;
        public const int GL_SAMPLE_ALPHA_TO_ONE_SGIS = 0x0000809f;
        public const int GL_NORMAL_MAP_ARB = 0x00008511;
        public const int GL_MODELVIEW8_ARB = 0x00008728;
        public const int GL_EXT_copy_texture = 0x00000001;
        public const int GL_MINMAX = 0x0000802e;
        public const int GL_NORMAL_ARRAY_TYPE_EXT = 0x0000807e;
        public const int GL_NUM_INSTRUCTIONS_PER_PASS_ATI = 0x00008971;
        public const int GL_BITMAP_TOKEN = 0x00000704;
        public const int GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS = 0x00008354;
        public const int GL_CURRENT_RASTER_NORMAL_SGIX = 0x00008406;
        public const int GL_ASYNC_DRAW_PIXELS_SGIX = 0x0000835d;
        public const int GL_POLYGON_OFFSET_FILL = 0x00008037;
        public const int GL_PRIMARY_COLOR_NV = 0x0000852c;
        public const int GL_POST_CONVOLUTION_GREEN_SCALE = 0x0000801d;
        public const int GL_SUBTRACT_ARB = 0x000084e7;
        public const int GL_STENCIL_BACK_FAIL_ATI = 0x00008801;
        public const int GL_PREVIOUS_EXT = 0x00008578;
        public const int GL_COMPRESSED_RGB_FXT1_3DFX = 0x000086b0;
        public const int GL_REG_3_ATI = 0x00008924;
        public const int GL_PRIMITIVE_RESTART_NV = 0x00008558;
        public const int GL_BLEND_SRC_RGB = 0x000080c9;
        public const int GL_TEXTURE_FILTER_CONTROL_EXT = 0x00008500;
        public const int GL_MAX_TEXTURE_IMAGE_UNITS_ARB = 0x00008872;
        public const int GL_MIRRORED_REPEAT_IBM = 0x00008370;
        public const int GL_LINEAR_CLIPMAP_NEAREST_SGIX = 0x0000844f;
        public const int GL_OFFSET_TEXTURE_MATRIX_NV = 0x000086e1;
        public const int GL_DEPTH_COMPONENT24_SGIX = 0x000081a6;
        public const int GL_INSTRUMENT_MEASUREMENTS_SGIX = 0x00008181;
        public const int GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = 0x00008510;
        public const int GL_ZERO = 0x00000000;
        public const int GL_C4UB_V3F = 0x00002a23;
        public const int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 0x00008cd7;
        public const int GL_UNPACK_SKIP_PIXELS = 0x00000cf4;
        public const int GL_PIXEL_PACK_BUFFER_BINDING_ARB = 0x000088ed;
        public const int GL_BYTE = 0x00001400;
        public const int GL_CW = 0x00000900;
        public const int GL_OFFSET_TEXTURE_2D_NV = 0x000086e8;
        public const int GL_MODELVIEW = 0x00001700;
        public const int GL_MODELVIEW1_STACK_DEPTH_EXT = 0x00008502;
        public const int GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x0000880c;
        public const int GL_POLYGON_MODE = 0x00000b40;
        public const int GL_REG_23_ATI = 0x00008938;
        public const int GL_LUMINANCE12_ALPHA4_EXT = 0x00008046;
        public const int GL_OPERAND0_ALPHA_ARB = 0x00008598;
        public const int GL_SOURCE1_RGB_ARB = 0x00008581;
        public const int GL_PACK_LSB_FIRST = 0x00000d01;
        public const int GL_MOV_ATI = 0x00008961;
        public const int GL_DS_BIAS_NV = 0x00008716;
        public const int GL_INTERLACE_READ_OML = 0x00008981;
        public const int GL_UNSIGNED_INT_8_8_8_8_EXT = 0x00008035;
        public const int GL_OUTPUT_TEXTURE_COORD14_EXT = 0x000087ab;
        public const int GL_HISTOGRAM_SINK_EXT = 0x0000802d;
        public const int GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 0x00008519;
        public const int GL_VERTEX_ARRAY_STRIDE_EXT = 0x0000807c;
        public const int GL_DEPTH_COMPONENT32_SGIX = 0x000081a7;
        public const int GL_MATRIX6_ARB = 0x000088c6;
        public const int GL_COLOR_MATRIX_STACK_DEPTH_SGI = 0x000080b2;
        public const int GL_VERTEX_ARRAY_EXT = 0x00008074;
        public const int GL_CON_30_ATI = 0x0000895f;
        public const int GL_REG_31_ATI = 0x00008940;
        public const int GL_TEXTURE28_ARB = 0x000084dc;
        public const int GL_INDEX_ARRAY_LIST_STRIDE_IBM = 0x000192ab;
        public const int GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 0x00008cdb;
        public const int GL_MAT_AMBIENT_BIT_PGI = 0x00100000;
        public const int GL_REDUCE_EXT = 0x00008016;
        public const int GL_GLOBAL_ALPHA_FACTOR_SUN = 0x000081da;
        public const int GL_VIBRANCE_BIAS_NV = 0x00008719;
        public const int GL_SAMPLE_ALPHA_TO_ONE = 0x0000809f;
        public const int GL_DRAW_BUFFER11_ATI = 0x00008830;
        public const int GL_VERTEX_ARRAY_BINDING_APPLE = 0x000085b5;
        public const int GL_REPLACE_MIDDLE_SUN = 0x00000002;
        public const int GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x00008857;
        public const int GL_INVARIANT_EXT = 0x000087c2;
        public const int GL_SGIX_polynomial_ffd = 0x00000001;
        public const int GL_VARIANT_EXT = 0x000087c1;
        public const int GL_STENCIL_INDEX1_EXT = 0x00008d46;
        public const int GL_TEXTURE_WRAP_Q_SGIS = 0x00008137;
        public const int GL_FOG_COORDINATE_ARRAY = 0x00008457;
        public const int GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 0x000087f7;
        public const int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 0x00008cd0;
        public const int GL_INDEX_ARRAY_STRIDE_EXT = 0x00008086;
        public const int GL_SGIS_multisample = 0x00000001;
        public const int GL_EQUIV = 0x00001509;
        public const int GL_CON_28_ATI = 0x0000895d;
        public const int GL_OPERAND2_RGB_EXT = 0x00008592;
        public const int GL_NORMAL_MAP = 0x00008511;
        public const int GL_TEXTURE0_ARB = 0x000084c0;
        public const int GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = 0x00008519;
        public const int GL_REG_26_ATI = 0x0000893b;
        public const int GL_SGIX_vertex_preclip = 0x00000001;
        public const int GL_OP_MIN_EXT = 0x0000878b;
        public const int GL_PROGRAM_FORMAT_ARB = 0x00008876;
        public const int GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x00008515;
        public const int GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x00008517;
        public const int GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x00008519;
        public const int GL_MAP2_VERTEX_ATTRIB9_4_NV = 0x00008679;
        public const int GL_EIGHTH_BIT_ATI = 0x00000020;
        public const int GL_FLOAT_MAT3_ARB = 0x00008b5b;
        public const int GL_REG_4_ATI = 0x00008925;
        public const int GL_SPOT_DIRECTION = 0x00001204;
        public const int GL_VECTOR_EXT = 0x000087bf;
        public const int GL_TEXTURE11 = 0x000084cb;
        public const int GL_ALLOW_DRAW_FRG_HINT_PGI = 0x0001a210;
        public const int GL_PIXEL_TEX_GEN_Q_ROUND_SGIX = 0x00008185;
        public const int GL_ALPHA_MIN_CLAMP_INGR = 0x00008563;
        public const int GL_KEEP = 0x00001e00;
        public const int GL_TRANSFORM_BIT = 0x00001000;
        public const int GL_OUTPUT_TEXTURE_COORD30_EXT = 0x000087bb;
        public const int GL_BLEND_EQUATION = 0x00008009;
        public const int GL_PACK_SKIP_VOLUMES_SGIS = 0x00008130;
        public const int GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = 0x00008850;
        public const int GL_LUMINANCE16 = 0x00008042;
        public const int GL_LUMINANCE12 = 0x00008041;
        public const int GL_RGBA_FLOAT_MODE_ARB = 0x00008820;
        public const int GL_COLOR_TABLE_GREEN_SIZE_SGI = 0x000080db;
        public const int GL_CON_20_ATI = 0x00008955;
        public const int GL_FOG_COORDINATE_SOURCE = 0x00008450;
        public const int GL_MATRIX15_ARB = 0x000088cf;
        public const int GL_MAX_MAP_TESSELLATION_NV = 0x000086d6;
        public const int GL_LUMINANCE = 0x00001909;
        public const int GL_OCCLUSION_TEST_HP = 0x00008165;
        public const int GL_TEXTURE_INTERNAL_FORMAT = 0x00001003;
        public const int GL_EDGE_FLAG_ARRAY_LIST_IBM = 0x000192a3;
        public const int GL_EYE_LINE_SGIS = 0x000081f6;
        public const int GL_HISTOGRAM_RED_SIZE_EXT = 0x00008028;
        public const int GL_INVALID_FRAMEBUFFER_OPERATION_EXT = 0x00000506;
        public const int GL_STENCIL_TEST_TWO_SIDE_EXT = 0x00008910;
        public const int GL_DRAW_BUFFER13_ARB = 0x00008832;
        public const int GL_MAP_ATTRIB_V_ORDER_NV = 0x000086c4;
        public const int GL_DUAL_INTENSITY4_SGIS = 0x00008118;
        public const int GL_DOMAIN = 0x00000a02;
        public const int GL_EMBOSS_CONSTANT_NV = 0x0000855e;
        public const int GL_UNPACK_SKIP_ROWS = 0x00000cf3;
        public const int GL_MODULATE_SIGNED_ADD_ATI = 0x00008745;
        public const int GL_STATIC_DRAW_ARB = 0x000088e4;
        public const int GL_CONVOLUTION_FILTER_BIAS_EXT = 0x00008015;
        public const int GL_ENABLE_BIT = 0x00002000;
        public const int GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 0x0000889f;
        public const int GL_HISTOGRAM_WIDTH_EXT = 0x00008026;
        public const int GL_INTERLACE_READ_INGR = 0x00008568;
        public const int GL_BLEND_DST_ALPHA = 0x000080ca;
        public const int GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = 0x0000870c;
        public const int GL_LINE_TOKEN = 0x00000702;
        public const int GL_FLOAT_RG32_NV = 0x00008887;
        public const int GL_NEAREST_MIPMAP_LINEAR = 0x00002702;
        public const int GL_AUX2 = 0x0000040b;
        public const int GL_AUX3 = 0x0000040c;
        public const int GL_AUX0 = 0x00000409;
        public const int GL_AUX1 = 0x0000040a;
        public const int GL_DRAW_BUFFER7_ARB = 0x0000882c;
        public const int GL_COLOR_TABLE = 0x000080d0;
        public const int GL_OUTPUT_TEXTURE_COORD25_EXT = 0x000087b6;
        public const int GL_NEGATIVE_W_EXT = 0x000087dc;
        public const int GL_TEXTURE_4D_SGIS = 0x00008134;
        public const int GL_REPEAT = 0x00002901;
        public const int GL_FRAGMENT_NORMAL_EXT = 0x0000834a;
        public const int GL_ALPHA4 = 0x0000803b;
        public const int GL_DSDT_MAG_VIB_NV = 0x000086f7;
        public const int GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x0000889d;
        public const int GL_ALPHA8 = 0x0000803c;
        public const int GL_SGIS_texture_select = 0x00000001;
        public const int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x0000886a;
        public const int GL_PROJECTION_MATRIX = 0x00000ba7;
        public const int GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT = 0x00008365;
        public const int GL_INTENSITY8_EXT = 0x0000804b;
        public const int GL_UNSIGNED_SHORT_5_5_5_1 = 0x00008034;
        public const int GL_FLOAT_VEC4 = 0x00008b52;
        public const int GL_TEXTURE25_ARB = 0x000084d9;
        public const int GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 0x00008cdc;
        public const int GL_CONVOLUTION_BORDER_COLOR = 0x00008154;
        public const int GL_CND_ATI = 0x0000896a;
        public const int GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 0x0000885a;
        public const int GL_EDGE_FLAG_ARRAY_STRIDE = 0x0000808c;
        public const int GL_LUMINANCE6_ALPHA2 = 0x00008044;
        public const int GL_TEXTURE_DEPTH_EXT = 0x00008071;
        public const int GL_REG_0_ATI = 0x00008921;
        public const int GL_DEPTH_STENCIL_TO_BGRA_NV = 0x0000886f;
        public const int GL_DUAL_ALPHA12_SGIS = 0x00008112;
        public const int GL_HI_SCALE_NV = 0x0000870e;
        public const int GL_MAX_MODELVIEW_STACK_DEPTH = 0x00000d36;
        public const int GL_IGNORE_BORDER_HP = 0x00008150;
        public const int GL_VERTEX_ATTRIB_ARRAY7_NV = 0x00008657;
        public const int GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = 0x00008973;
        public const int GL_C4UB_V2F = 0x00002a22;
        public const int GL_INTERPOLATE = 0x00008575;
        public const int GL_BUFFER_SIZE = 0x00008764;
        public const int GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x000084ff;
        public const int GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x000087ca;
        public const int GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x000083f1;
        public const int GL_SGIX_blend_alpha_minmax = 0x00000001;
        public const int GL_DEFORMATIONS_MASK_SGIX = 0x00008196;
        public const int GL_AUX_BUFFERS = 0x00000c00;
        public const int GL_MAP1_VERTEX_ATTRIB3_4_NV = 0x00008663;
        public const int GL_FRAMEZOOM_SGIX = 0x0000818b;
        public const int GL_PROXY_COLOR_TABLE = 0x000080d3;
        public const int GL_TEXTURE_MATERIAL_PARAMETER_EXT = 0x00008352;
        public const int GL_LUMINANCE32F_ARB = 0x00008818;
        public const int GL_MATRIX_MODE = 0x00000ba0;
        public const int GL_FRONT_LEFT = 0x00000400;
        public const int GL_SGIX_scalebias_hint = 0x00000001;
        public const int GL_RECLAIM_MEMORY_HINT_PGI = 0x0001a1fe;
        public const int GL_PASS_THROUGH_TOKEN = 0x00000700;
        public const int GL_RGB_SCALE_ARB = 0x00008573;
        public const int GL_SGIX_clipmap = 0x00000001;
        public const int GL_CURRENT_TANGENT_EXT = 0x0000843b;
        public const int GL_MAX_CLIP_PLANES = 0x00000d32;
        public const int GL_ADD = 0x00000104;
        public const int GL_TEXTURE_MAX_LOD = 0x0000813b;
        public const int GL_VARIANT_ARRAY_STRIDE_EXT = 0x000087e6;
        public const int GL_REG_18_ATI = 0x00008933;
        public const int GL_RGBA32F_ARB = 0x00008814;
        public const int GL_GREATER = 0x00000204;
        public const int GL_EDGE_FLAG_ARRAY_POINTER_EXT = 0x00008093;
        public const int GL_VARIABLE_C_NV = 0x00008525;
        public const int GL_OPERAND2_ALPHA_ARB = 0x0000859a;
        public const int GL_PROJECTION_STACK_DEPTH = 0x00000ba4;
        public const int GL_OUTPUT_COLOR0_EXT = 0x0000879b;
        public const int GL_SGIX_instruments = 0x00000001;
        public const int GL_SAMPLER_CUBE_ARB = 0x00008b60;
        public const int GL_SECONDARY_COLOR_ARRAY_SIZE = 0x0000845a;
        public const int GL_PREFER_DOUBLEBUFFER_HINT_PGI = 0x0001a1f8;
        public const int GL_MATRIX_INDEX_ARRAY_TYPE_ARB = 0x00008847;
        public const int GL_EXT_blend_minmax = 0x00000001;
        public const int GL_COORD_REPLACE_ARB = 0x00008862;
        public const int GL_FLOAT_R32_NV = 0x00008885;
        public const int GL_MATRIX27_ARB = 0x000088db;
        public const int GL_INDEX_ARRAY_LIST_IBM = 0x000192a1;
        public const int GL_SAMPLER_1D_SHADOW_ARB = 0x00008b61;
        public const int GL_MAX_3D_TEXTURE_SIZE_EXT = 0x00008073;
        public const int GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x000088b2;
        public const int GL_TRACK_MATRIX_NV = 0x00008648;
        public const int GL_MIRROR_CLAMP_ATI = 0x00008742;
        public const int GL_MAX_VERTEX_ATTRIBS_ARB = 0x00008869;
        public const int GL_TEXTURE_MAX_LEVEL = 0x0000813d;
        public const int GL_VERTEX_PROGRAM_NV = 0x00008620;
        public const int GL_NEGATIVE_Y_EXT = 0x000087da;
        public const int GL_SPRITE_SGIX = 0x00008148;
        public const int GL_BLEND_EQUATION_ALPHA = 0x0000883d;
        public const int GL_RGB4_S3TC = 0x000083a1;
        public const int GL_DOT_PRODUCT_TEXTURE_1D_NV = 0x0000885c;
        public const int GL_TEXTURE_LEQUAL_R_SGIX = 0x0000819c;
        public const int GL_SAMPLER_3D_ARB = 0x00008b5f;
        public const int GL_RGBA16F_ARB = 0x0000881a;
        public const int GL_VERTEX_STREAM7_ATI = 0x00008773;
        public const int GL_TRIANGLE_STRIP = 0x00000005;
        public const int GL_PIXEL_TEX_GEN_MODE_SGIX = 0x0000832b;
        public const int GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = 0x00008338;
        public const int GL_DU8DV8_ATI = 0x0000877a;
        public const int GL_EXT_polygon_offset = 0x00000001;
        public const int GL_TEXCOORD2_BIT_PGI = 0x20000000;
        public const int GL_COLOR_ATTACHMENT1_EXT = 0x00008ce1;
        public const int GL_MAX_PROGRAM_INSTRUCTIONS_ARB = 0x000088a1;
        public const int GL_EDGE_FLAG_ARRAY_POINTER = 0x00008093;
        public const int GL_C4F_N3F_V3F = 0x00002a26;
        public const int GL_TEXTURE14_ARB = 0x000084ce;
        public const int GL_SGI_texture_color_table = 0x00000001;
        public const int GL_MAP2_VERTEX_3 = 0x00000db7;
        public const int GL_CON_10_ATI = 0x0000894b;
        public const int GL_MAX_PROGRAM_PARAMETERS_ARB = 0x000088a9;
        public const int GL_MAP2_VERTEX_4 = 0x00000db8;
        public const int GL_DEPENDENT_AR_TEXTURE_2D_NV = 0x000086e9;
        public const int GL_DST_COLOR = 0x00000306;
        public const int GL_TEXTURE24_ARB = 0x000084d8;
        public const int GL_MINMAX_SINK = 0x00008030;
        public const int GL_NATIVE_GRAPHICS_END_HINT_PGI = 0x0001a204;
        public const int GL_MAP2_VERTEX_ATTRIB14_4_NV = 0x0000867e;
        public const int GL_MAX_LIGHTS = 0x00000d31;
        public const int GL_UNPACK_CLIENT_STORAGE_APPLE = 0x000085b2;
        public const int GL_PROXY_TEXTURE_CUBE_MAP_EXT = 0x0000851b;
        public const int GL_OP_LOG_BASE_2_EXT = 0x00008792;
        public const int GL_DEPTH_COMPONENT16_ARB = 0x000081a5;
        public const int GL_STENCIL_BACK_WRITEMASK = 0x00008ca5;
        public const int GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = 0x00008516;
        public const int GL_FLOAT_R16_NV = 0x00008884;
        public const int GL_ALLOW_DRAW_WIN_HINT_PGI = 0x0001a20f;
        public const int GL_CON_21_ATI = 0x00008956;
        public const int GL_OPERAND1_RGB_EXT = 0x00008591;
        public const int GL_ONE_MINUS_DST_COLOR = 0x00000307;
        public const int GL_POST_COLOR_MATRIX_ALPHA_SCALE = 0x000080b7;
        public const int GL_PROXY_TEXTURE_COLOR_TABLE_SGI = 0x000080bd;
        public const int GL_COMBINER_MUX_SUM_NV = 0x00008547;
        public const int GL_PROGRAM_NATIVE_ATTRIBS_ARB = 0x000088ae;
        public const int GL_TEXTURE_DEPTH = 0x00008071;
        public const int GL_OPERAND2_ALPHA_EXT = 0x0000859a;
        public const int GL_CON_14_ATI = 0x0000894f;
        public const int GL_VERTEX_ATTRIB_ARRAY14_NV = 0x0000865e;
        public const int GL_ACCUM_GREEN_BITS = 0x00000d59;
        public const int GL_DEPTH_COMPONENT24_ARB = 0x000081a6;
        public const int GL_LEQUAL = 0x00000203;
        public const int GL_VERSION = 0x00001f02;
        public const int GL_REG_24_ATI = 0x00008939;
        public const int GL_CLIENT_ALL_ATTRIB_BITS = unchecked((int)0xffffffff);
        public const int GL_MIN_EXT = 0x00008007;
        public const int GL_LIST_BIT = 0x00020000;
        public const int GL_COMBINER_AB_DOT_PRODUCT_NV = 0x00008545;
        public const int GL_PACK_SWAP_BYTES = 0x00000d00;
        public const int GL_PIXEL_TEX_GEN_Q_CEILING_SGIX = 0x00008184;
        public const int GL_INDEX_TEST_FUNC_EXT = 0x000081b6;
        public const int GL_MAX_RATIONAL_EVAL_ORDER_NV = 0x000086d7;
        public const int GL_STACK_OVERFLOW = 0x00000503;
        public const int GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 0x000086f2;
        public const int GL_TEXTURE18_ARB = 0x000084d2;
        public const int GL_TANGENT_ARRAY_EXT = 0x00008439;
        public const int GL_MAX_ASYNC_READ_PIXELS_SGIX = 0x00008361;
        public const int GL_VERTEX_ARRAY_STRIDE = 0x0000807c;
        public const int GL_SECONDARY_COLOR_ARRAY_LIST_IBM = 0x000192a5;
        public const int GL_TEXTURE_INDEX_SIZE_EXT = 0x000080ed;
        public const int GL_LUMINANCE_ALPHA = 0x0000190a;
        public const int GL_MAP1_TANGENT_EXT = 0x00008444;
        public const int GL_ACCUM_CLEAR_VALUE = 0x00000b80;
        public const int GL_DRAW_PIXEL_TOKEN = 0x00000705;
        public const int GL_AMBIENT_AND_DIFFUSE = 0x00001602;
        public const int GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 0x0000862e;
        public const int GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT = 0x0000851c;
        public const int GL_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x00008806;
        public const int GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 0x00008802;
        public const int GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 0x0000817b;
        public const int GL_FULL_RANGE_EXT = 0x000087e1;
        public const int GL_1PASS_EXT = 0x000080a1;
        public const int GL_BUFFER_MAPPED = 0x000088bc;
        public const int GL_COMPRESSED_TEXTURE_FORMATS = 0x000086a3;
        public const int GL_MAP2_VERTEX_ATTRIB7_4_NV = 0x00008677;
        public const int GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX = 0x00008311;
        public const int GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x000086a2;
        public const int GL_BLEND_EQUATION_RGB = 0x00008009;
        public const int GL_CURRENT_ATTRIB_NV = 0x00008626;
        public const int GL_PIXEL_MAP_S_TO_S_SIZE = 0x00000cb1;
        public const int GL_FRAMEZOOM_FACTOR_SGIX = 0x0000818c;
        public const int GL_INVERSE_NV = 0x0000862b;
        public const int GL_NO_ERROR = 0x00000000;
        public const int GL_FLAT = 0x00001d00;
        public const int GL_AVERAGE_EXT = 0x00008335;
        public const int GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x000083f0;
        public const int GL_OBJECT_INFO_LOG_LENGTH_ARB = 0x00008b84;
        public const int GL_COEFF = 0x00000a00;
        public const int GL_SGIX_texture_scale_bias = 0x00000001;
        public const int GL_POINT_SPRITE_COORD_ORIGIN = 0x00008ca0;
        public const int GL_ACTIVE_UNIFORMS = 0x00008b86;
        public const int GL_SAMPLES = 0x000080a9;
        public const int GL_STENCIL_BACK_VALUE_MASK = 0x00008ca4;
        public const int GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x0000851c;
        public const int GL_QUAD_MESH_SUN = 0x00008614;
        public const int GL_CURRENT_MATRIX_INDEX_ARB = 0x00008845;
        public const int GL_DRAW_BUFFER8_ARB = 0x0000882d;
        public const int GL_VERTEX_ATTRIB_ARRAY10_NV = 0x0000865a;
        public const int GL_ACTIVE_TEXTURE = 0x000084e0;
        public const int GL_INT = 0x00001404;
        public const int GL_FLOAT_VEC3 = 0x00008b51;
        public const int GL_EXT_blend_subtract = 0x00000001;
        public const int GL_DEPTH_COMPONENT = 0x00001902;
        public const int GL_ZOOM_X = 0x00000d16;
        public const int GL_POINT_TOKEN = 0x00000701;
        public const int GL_IMAGE_MAG_FILTER_HP = 0x0000815c;
        public const int GL_PRIMITIVE_RESTART_INDEX_NV = 0x00008559;
        public const int GL_PACK_SKIP_IMAGES = 0x0000806b;
        public const int GL_BUMP_NUM_TEX_UNITS_ATI = 0x00008777;
        public const int GL_EXT_packed_pixels = 0x00000001;
        public const int GL_DEPTH_COMPONENT32 = 0x000081a7;
        public const int GL_ABGR_EXT = 0x00008000;
        public const int GL_MAX_COLOR_MATRIX_STACK_DEPTH = 0x000080b3;
        public const int GL_NEAREST_MIPMAP_NEAREST = 0x00002700;
        public const int GL_SOURCE0_ALPHA = 0x00008588;
        public const int GL_YCBCR_MESA = 0x00008757;
        public const int GL_EXT_blend_color = 0x00000001;
        public const int GL_T2F_IUI_N3F_V2F_EXT = 0x000081b3;
        public const int GL_SAMPLE_BUFFERS_ARB = 0x000080a8;
        public const int GL_INDEX_LOGIC_OP = 0x00000bf1;
        public const int GL_IUI_V3F_EXT = 0x000081ae;
        public const int GL_DRAW_BUFFER11 = 0x00008830;
        public const int GL_SAMPLES_SGIS = 0x000080a9;
        public const int GL_LIGHT_MODEL_LOCAL_VIEWER = 0x00000b51;
        public const int GL_INTENSITY12 = 0x0000804c;
        public const int GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX = 0x00008186;
        public const int GL_TEXTURE_LUMINANCE_TYPE_ARB = 0x00008c14;
        public const int GL_INTENSITY16 = 0x0000804d;
        public const int GL_BLEND_DST_RGB_EXT = 0x000080c8;
        public const int GL_DRAW_BUFFER15 = 0x00008834;
        public const int GL_DUAL_LUMINANCE_ALPHA4_SGIS = 0x0000811c;
        public const int GL_BUFFER_MAP_POINTER_ARB = 0x000088bd;
        public const int GL_LUMINANCE12_ALPHA4 = 0x00008046;
        public const int GL_MULTISAMPLE_SGIS = 0x0000809d;
        public const int GL_GEQUAL = 0x00000206;
        public const int GL_CONVOLUTION_BORDER_MODE = 0x00008013;
        public const int GL_OBJECT_POINT_SGIS = 0x000081f5;
        public const int GL_TEXTURE_LOD_BIAS = 0x00008501;
        public const int GL_COLOR_ATTACHMENT2_EXT = 0x00008ce2;
        public const int GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 0x00008533;
        public const int GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 0x00008622;
        public const int GL_MAX_NAME_STACK_DEPTH = 0x00000d37;
        public const int GL_UNSIGNED_SHORT_4_4_4_4_EXT = 0x00008033;
        public const int GL_DRAW_BUFFER1_ATI = 0x00008826;
        public const int GL_COLOR_ARRAY_EXT = 0x00008076;
        public const int GL_MODELVIEW7_ARB = 0x00008727;
        public const int GL_HISTOGRAM_SINK = 0x0000802d;
        public const int GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x000080d5;
        public const int GL_REG_12_ATI = 0x0000892d;
        public const int GL_POST_COLOR_MATRIX_RED_SCALE_SGI = 0x000080b4;
        public const int GL_CURRENT_TEXTURE_COORDS = 0x00000b03;
        public const int GL_VERTEX_SHADER_ARB = 0x00008b31;
        public const int GL_LUMINANCE8_ALPHA8 = 0x00008045;
        public const int GL_STENCIL_ATTACHMENT_EXT = 0x00008d20;
        public const int GL_INTENSITY_EXT = 0x00008049;
        public const int GL_FOG_FUNC_SGIS = 0x0000812a;
        public const int GL_PROGRAM_LENGTH_ARB = 0x00008627;
        public const int GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = 0x000084e3;
        public const int GL_TEXTURE = 0x00001702;
        public const int GL_LUMINANCE12_ALPHA12_EXT = 0x00008047;
        public const int GL_ALPHA16F_ARB = 0x0000881c;
        public const int GL_WEIGHT_ARRAY_TYPE_ARB = 0x000086a9;
        public const int GL_PROJECTION = 0x00001701;
        public const int GL_SAMPLE_BUFFERS = 0x000080a8;
        public const int GL_MODELVIEW1_MATRIX_EXT = 0x00008506;
        public const int GL_TEXTURE_LO_SIZE_NV = 0x0000871c;
        public const int GL_TEXTURE_BORDER_COLOR = 0x00001004;
        public const int GL_NORMAL_ARRAY_LIST_IBM = 0x0001929f;
        public const int GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = 0x000087c7;
        public const int GL_MAD_ATI = 0x00008968;
        public const int GL_OR_REVERSE = 0x0000150b;
        public const int GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = 0x00008897;
        public const int GL_FRAGMENT_LIGHT2_SGIX = 0x0000840e;
        public const int GL_PROGRAM_STRING_ARB = 0x00008628;
        public const int GL_CURRENT_SECONDARY_COLOR_EXT = 0x00008459;
        public const int GL_LINEAR = 0x00002601;
        public const int GL_HALF_BIT_ATI = 0x00000008;
        public const int GL_QUAD_INTENSITY8_SGIS = 0x00008123;
        public const int GL_PROXY_TEXTURE_3D_EXT = 0x00008070;
        public const int GL_FRONT_RIGHT = 0x00000401;
        public const int GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = 0x00008855;
        public const int GL_MAX_EVAL_ORDER = 0x00000d30;
        public const int GL_STENCIL_PASS_DEPTH_PASS = 0x00000b96;
        public const int GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = 0x0000862e;
        public const int GL_INVERT = 0x0000150a;
        public const int GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 0x000080b0;
        public const int GL_INTERPOLATE_EXT = 0x00008575;
        public const int GL_EVAL_VERTEX_ATTRIB11_NV = 0x000086d1;
        public const int GL_INTENSITY16_EXT = 0x0000804d;
        public const int GL_MULTISAMPLE = 0x0000809d;
        public const int GL_MAX_PROGRAM_IF_DEPTH_NV = 0x000088f6;
        public const int GL_CURRENT_VERTEX_ATTRIB = 0x00008626;
        public const int GL_TEXTURE_LUMINANCE_SIZE_EXT = 0x00008060;
        public const int GL_TEXTURE_COORD_ARRAY_LIST_IBM = 0x000192a2;
        public const int GL_BLEND_SRC_ALPHA = 0x000080cb;
        public const int GL_FIXED_ONLY_ARB = 0x0000891d;
        public const int GL_LESS = 0x00000201;
        public const int GL_MIRROR_CLAMP_EXT = 0x00008742;
        public const int GL_MULTISAMPLE_BIT_3DFX = 0x20000000;
        public const int GL_LINE_STIPPLE = 0x00000b24;
        public const int GL_VERTEX_PROGRAM_POINT_SIZE = 0x00008642;
        public const int GL_FOG_COORD_ARRAY_STRIDE = 0x00008455;
        public const int GL_CONVOLUTION_BORDER_COLOR_HP = 0x00008154;
        public const int GL_VERTEX_ARRAY_RANGE_NV = 0x0000851d;
        public const int GL_IMAGE_CUBIC_WEIGHT_HP = 0x0000815e;
        public const int GL_TEXTURE_POST_SPECULAR_HP = 0x00008168;
        public const int GL_MAP2_INDEX = 0x00000db1;
        public const int GL_TEXTURE_3D_EXT = 0x0000806f;
        public const int GL_EYE_DISTANCE_TO_LINE_SGIS = 0x000081f2;
        public const int GL_GENERATE_MIPMAP_HINT_SGIS = 0x00008192;
        public const int GL_PROXY_TEXTURE_3D = 0x00008070;
        public const int GL_ACTIVE_STENCIL_FACE_EXT = 0x00008911;
        public const int GL_SRC2_ALPHA = 0x0000858a;
        public const int GL_CURRENT_RASTER_COLOR = 0x00000b04;
        public const int GL_VERTEX_STREAM2_ATI = 0x0000876e;
        public const int GL_TEXTURE26_ARB = 0x000084da;
        public const int GL_LINE_STIPPLE_PATTERN = 0x00000b25;
        public const int GL_MAT_COLOR_INDEXES_BIT_PGI = 0x01000000;
        public const int GL_MATRIX_INDEX_ARRAY_POINTER_ARB = 0x00008849;
        public const int GL_MODELVIEW1_EXT = 0x0000850a;
        public const int GL_EVAL_VERTEX_ATTRIB13_NV = 0x000086d3;
        public const int GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 0x000086a0;
        public const int GL_MAX_FOG_FUNC_POINTS_SGIS = 0x0000812c;
        public const int GL_CON_25_ATI = 0x0000895a;
        public const int GL_INDEX_CLEAR_VALUE = 0x00000c20;
        public const int GL_MAX_TEXTURE_IMAGE_UNITS = 0x00008872;
        public const int GL_NORMAL_MAP_EXT = 0x00008511;
        public const int GL_CALLIGRAPHIC_FRAGMENT_SGIX = 0x00008183;
        public const int GL_REPLICATE_BORDER = 0x00008153;
        public const int GL_INDEX_WRITEMASK = 0x00000c21;
        public const int GL_TEXTURE29_ARB = 0x000084dd;
        public const int GL_TEXTURE_LUMINANCE_SIZE = 0x00008060;
        public const int GL_POINT_FADE_THRESHOLD_SIZE_ARB = 0x00008128;
        public const int GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = 0x00008d44;
        public const int GL_ARRAY_BUFFER_BINDING_ARB = 0x00008894;
        public const int GL_COLOR_ARRAY_LIST_IBM = 0x000192a0;
        public const int GL_SAMPLE_MASK_INVERT_EXT = 0x000080ab;
        public const int GL_SWIZZLE_STR_ATI = 0x00008976;
        public const int GL_SCISSOR_BIT = 0x00080000;
        public const int GL_INDEX_ARRAY_POINTER_EXT = 0x00008091;
        public const int GL_BLEND_EQUATION_EXT = 0x00008009;
        public const int GL_MAP2_VERTEX_ATTRIB15_4_NV = 0x0000867f;
        public const int GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x0000880f;
        public const int GL_REG_16_ATI = 0x00008931;
        public const int GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 0x00008cd9;
        public const int GL_RED_MIN_CLAMP_INGR = 0x00008560;
        public const int GL_EVAL_VERTEX_ATTRIB9_NV = 0x000086cf;
        public const int GL_CON_19_ATI = 0x00008954;
        public const int GL_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x00008898;
        public const int GL_UNSIGNED_BYTE_3_3_2_EXT = 0x00008032;
        public const int GL_REG_15_ATI = 0x00008930;
        public const int GL_OPERAND2_RGB_ARB = 0x00008592;
        public const int GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = 0x00008b9a;
        public const int GL_READ_PIXEL_DATA_RANGE_POINTER_NV = 0x0000887d;
        public const int GL_EMBOSS_LIGHT_NV = 0x0000855d;
        public const int GL_MODELVIEW15_ARB = 0x0000872f;
        public const int GL_COLOR_TABLE_WIDTH = 0x000080d9;
        public const int GL_LINEAR_MIPMAP_LINEAR = 0x00002703;
        public const int GL_VARIANT_VALUE_EXT = 0x000087e4;
        public const int GL_SGIS_point_parameters = 0x00000001;
        public const int GL_POLYGON_STIPPLE_BIT = 0x00000010;
        public const int GL_MODELVIEW2_ARB = 0x00008722;
        public const int GL_DRAW_BUFFER0_ARB = 0x00008825;
        public const int GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 0x00008520;
        public const int GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 0x00008851;
        public const int GL_RGBA4_S3TC = 0x000083a3;
        public const int GL_OBJECT_SUBTYPE_ARB = 0x00008b4f;
        public const int GL_DSDT_NV = 0x000086f5;
        public const int GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 0x000086f0;
        public const int GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x000088a7;
        public const int GL_HI_BIAS_NV = 0x00008714;
        public const int GL_BLUE_BIT_ATI = 0x00000004;
        public const int GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 0x00008b4c;
        public const int GL_MINMAX_FORMAT = 0x0000802f;
        public const int GL_CONVOLUTION_FILTER_BIAS = 0x00008015;
        public const int GL_MODELVIEW0_ARB = 0x00001700;
        public const int GL_LUMINANCE16_ALPHA16_EXT = 0x00008048;
        public const int GL_DT_SCALE_NV = 0x00008711;
        public const int GL_TANGENT_ARRAY_POINTER_EXT = 0x00008442;
        public const int GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x00008336;
        public const int GL_POINT_FADE_THRESHOLD_SIZE = 0x00008128;
        public const int GL_NORMALIZE = 0x00000ba1;
        public const int GL_CON_5_ATI = 0x00008946;
        public const int GL_VERTEX_PROGRAM_POINT_SIZE_NV = 0x00008642;
        public const int GL_VARIANT_ARRAY_TYPE_EXT = 0x000087e7;
        public const int GL_OFFSET_TEXTURE_2D_BIAS_NV = 0x000086e3;
        public const int GL_SWIZZLE_STRQ_DQ_ATI = 0x0000897b;
        public const int GL_LUMINANCE_ALPHA_FLOAT32_ATI = 0x00008819;
        public const int GL_NEGATIVE_Z_EXT = 0x000087db;
        public const int GL_TEXTURE_RESIDENT = 0x00008067;
        public const int GL_EXT_subtexture = 0x00000001;
        public const int GL_DUDV_ATI = 0x00008779;
        public const int GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 0x00008408;
        public const int GL_SET = 0x0000150f;
        public const int GL_BUFFER_MAPPED_ARB = 0x000088bc;
        public const int GL_PIXEL_TILE_HEIGHT_SGIX = 0x00008141;
        public const int GL_EYE_RADIAL_NV = 0x0000855b;
        public const int GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = 0x0000850e;
        public const int GL_TEXTURE_ENV_COLOR = 0x00002201;
        public const int GL_DEPTH_RANGE = 0x00000b70;
        public const int GL_MAX_GENERAL_COMBINERS_NV = 0x0000854d;
        public const int GL_IUI_N3F_V3F_EXT = 0x000081b0;
        public const int GL_CURRENT_FOG_COORDINATE = 0x00008453;
        public const int GL_MAX_CONVOLUTION_HEIGHT = 0x0000801b;
        public const int GL_OP_RECIP_EXT = 0x00008794;
        public const int GL_DEPTH_COMPONENT24 = 0x000081a6;
        public const int GL_MATRIX18_ARB = 0x000088d2;
        public const int GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 0x000080b3;
        public const int GL_TEXTURE6_ARB = 0x000084c6;
        public const int GL_REFERENCE_PLANE_EQUATION_SGIX = 0x0000817e;
        public const int GL_OPERAND1_ALPHA_EXT = 0x00008599;
        public const int GL_COLOR_TABLE_BLUE_SIZE_SGI = 0x000080dc;
        public const int GL_MODELVIEW5_ARB = 0x00008725;
        public const int GL_CLAMP = 0x00002900;
        public const int GL_SGIS_texture_filter4 = 0x00000001;
        public const int GL_PARALLEL_ARRAYS_INTEL = 0x000083f4;
        public const int GL_YCRCB_SGIX = 0x00008318;
        public const int GL_SAMPLE_ALPHA_TO_MASK_EXT = 0x0000809e;
        public const int GL_PACK_ROW_LENGTH = 0x00000d02;
        public const int GL_DRAW_BUFFER3_ATI = 0x00008828;
        public const int GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 0x000088af;
        public const int GL_READ_PIXEL_DATA_RANGE_NV = 0x00008879;
        public const int GL_FOG_COORDINATE_ARRAY_STRIDE = 0x00008455;
        public const int GL_TRANSPOSE_NV = 0x0000862c;
        public const int GL_UNPACK_RESAMPLE_OML = 0x00008985;
        public const int GL_UNSIGNED_BYTE_3_3_2 = 0x00008032;
        public const int GL_VERTEX_PRECLIP_SGIX = 0x000083ee;
        public const int GL_ALL_ATTRIB_BITS = unchecked((int)0xffffffff);
        public const int GL_DEPTH = 0x00001801;
        public const int GL_CONST_EYE_NV = 0x000086e5;
        public const int GL_COMPRESSED_RGBA = 0x000084ee;
        public const int GL_MAX_DEFORMATION_ORDER_SGIX = 0x00008197;
        public const int GL_EXT_vertex_array = 0x00000001;
        public const int GL_MULT = 0x00000103;
        public const int GL_VERTEX_SHADER_BINDING_EXT = 0x00008781;
        public const int GL_NAND = 0x0000150e;
        public const int GL_ALPHA4_EXT = 0x0000803b;
        public const int GL_INT_VEC3_ARB = 0x00008b54;
        public const int GL_TEXTURE_MAX_CLAMP_S_SGIX = 0x00008369;
        public const int GL_RGBA = 0x00001908;
        public const int GL_MATRIX14_ARB = 0x000088ce;
        public const int GL_DRAW_BUFFER2_ATI = 0x00008827;
        public const int GL_CURRENT_VERTEX_ATTRIB_ARB = 0x00008626;
        public const int GL_DUAL_LUMINANCE16_SGIS = 0x00008117;
        public const int GL_TEXTURE_COLOR_TABLE_SGI = 0x000080bc;
        public const int GL_RGB5 = 0x00008050;
        public const int GL_RGB4 = 0x0000804f;
        public const int GL_T4F_C4F_N3F_V4F = 0x00002a2d;
        public const int GL_FRAGMENT_MATERIAL_EXT = 0x00008349;
        public const int GL_TEXTURE12_ARB = 0x000084cc;
        public const int GL_CULL_VERTEX_EYE_POSITION_EXT = 0x000081ab;
        public const int GL_TRANSFORM_HINT_APPLE = 0x000085b1;
        public const int GL_RGB8 = 0x00008051;
        public const int GL_FRAGMENT_LIGHT5_SGIX = 0x00008411;
        public const int GL_RGB5_A1_EXT = 0x00008057;
        public const int GL_POINT_SPRITE_ARB = 0x00008861;
        public const int GL_WEIGHT_ARRAY_SIZE_ARB = 0x000086ab;
        public const int GL_PIXEL_TILE_GRID_HEIGHT_SGIX = 0x00008143;
        public const int GL_COPY = 0x00001503;
        public const int GL_RGB2_EXT = 0x0000804e;
        public const int GL_COLOR_ARRAY_COUNT_EXT = 0x00008084;
        public const int GL_POINT_DISTANCE_ATTENUATION_ARB = 0x00008129;
        public const int GL_VERTEX_WEIGHTING_EXT = 0x00008509;
        public const int GL_LUMINANCE12_EXT = 0x00008041;
        public const int GL_REG_11_ATI = 0x0000892c;
        public const int GL_SHARED_TEXTURE_PALETTE_EXT = 0x000081fb;
        public const int GL_BLEND_SRC_ALPHA_EXT = 0x000080cb;
        public const int GL_ADD_SIGNED_ARB = 0x00008574;
        public const int GL_T2F_V3F = 0x00002a27;
        public const int GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 0x000087ce;
        public const int GL_OBJECT_DISTANCE_TO_LINE_SGIS = 0x000081f3;
        public const int GL_MATRIX21_ARB = 0x000088d5;
        public const int GL_PROGRAM_OBJECT_ARB = 0x00008b40;
        public const int GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x00008b8b;
        public const int GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x00008803;
        public const int GL_VARIABLE_E_NV = 0x00008527;
        public const int GL_DUAL_LUMINANCE12_SGIS = 0x00008116;
        public const int GL_EMISSION = 0x00001600;
        public const int GL_ATTRIB_ARRAY_SIZE_NV = 0x00008623;
        public const int GL_ALPHA8_EXT = 0x0000803c;
        public const int GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = 0x0000801f;
        public const int GL_FLOAT_CLEAR_COLOR_VALUE_NV = 0x0000888d;
        public const int GL_LIST_MODE = 0x00000b30;
        public const int GL_LINK_STATUS = 0x00008b82;
        public const int GL_FRAMEBUFFER_EXT = 0x00008d40;
        public const int GL_SGIS_pixel_texture = 0x00000001;
        public const int GL_STREAM_COPY_ARB = 0x000088e2;
        public const int GL_PIXEL_CUBIC_WEIGHT_EXT = 0x00008333;
        public const int GL_SAMPLE_COVERAGE_INVERT_ARB = 0x000080ab;
        public const int GL_ATTRIB_STACK_DEPTH = 0x00000bb0;
        public const int GL_TEXTURE_FLOAT_COMPONENTS_NV = 0x0000888c;
        public const int GL_DEPENDENT_HILO_TEXTURE_2D_NV = 0x00008858;
        public const int GL_SMOOTH_POINT_SIZE_RANGE = 0x00000b12;
        public const int GL_ATTRIB_ARRAY_TYPE_NV = 0x00008625;
        public const int GL_SINGLE_COLOR_EXT = 0x000081f9;
        public const int GL_R1UI_T2F_V3F_SUN = 0x000085c9;
        public const int GL_IMAGE_MIN_FILTER_HP = 0x0000815d;
        public const int GL_MAX_LIST_NESTING = 0x00000b31;
        public const int GL_RGB4_EXT = 0x0000804f;
        public const int GL_FLOAT_MAT2_ARB = 0x00008b5a;
        public const int GL_INDEX_ARRAY_COUNT_EXT = 0x00008087;
        public const int GL_SOURCE1_ALPHA_ARB = 0x00008589;
        public const int GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x00008b8a;
        public const int GL_4PASS_0_EXT = 0x000080a4;
        public const int GL_POST_CONVOLUTION_RED_BIAS = 0x00008020;
        public const int GL_PROGRAM_INSTRUCTIONS_ARB = 0x000088a0;
        public const int GL_DECR_WRAP = 0x00008508;
        public const int GL_IMAGE_SCALE_X_HP = 0x00008155;
        public const int GL_PIXEL_UNPACK_BUFFER_EXT = 0x000088ec;
        public const int GL_SIGNED_RGB_NV = 0x000086fe;
        public const int GL_TEXTURE_BASE_LEVEL = 0x0000813c;
        public const int GL_SLICE_ACCUM_SUN = 0x000085cc;
        public const int GL_STATIC_DRAW = 0x000088e4;
        public const int GL_PROGRAM_LENGTH_NV = 0x00008627;
        public const int GL_DITHER = 0x00000bd0;
        public const int GL_CLAMP_TO_BORDER_SGIS = 0x0000812d;
        public const int GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 0x000087f8;
        public const int GL_DT_BIAS_NV = 0x00008717;
        public const int GL_NORMAL_ARRAY_EXT = 0x00008075;
        public const int GL_TEXTURE_BORDER_VALUES_NV = 0x0000871a;
        public const int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 0x00008cd3;
        public const int GL_RGB = 0x00001907;
        public const int GL_PROXY_TEXTURE_2D = 0x00008064;
        public const int GL_ZERO_EXT = 0x000087dd;
        public const int GL_MATRIX13_ARB = 0x000088cd;
        public const int GL_EDGE_FLAG = 0x00000b43;
        public const int GL_QUAD_TEXTURE_SELECT_SGIS = 0x00008125;
        public const int GL_MAX_TRACK_MATRICES_NV = 0x0000862f;
        public const int GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX = 0x00008189;
        public const int GL_TEXTURE_CLIPMAP_OFFSET_SGIX = 0x00008173;
        public const int GL_COMBINE_EXT = 0x00008570;
        public const int GL_POINT_DISTANCE_ATTENUATION = 0x00008129;
        public const int GL_FOG_MODE = 0x00000b65;
        public const int GL_PIXEL_TILE_WIDTH_SGIX = 0x00008140;
        public const int GL_MATRIX7_NV = 0x00008637;
        public const int GL_FLOAT_MAT3 = 0x00008b5b;
        public const int GL_STREAM_DRAW = 0x000088e0;
        public const int GL_CLIP_FAR_HINT_PGI = 0x0001a221;
        public const int GL_SAMPLE_COVERAGE_INVERT = 0x000080ab;
        public const int GL_FOG = 0x00000b60;
        public const int GL_CONSTANT_EXT = 0x00008576;
        public const int GL_MAX_CONVOLUTION_WIDTH_EXT = 0x0000801a;
        public const int GL_DOT3_RGBA_ARB = 0x000086af;
        public const int GL_MATRIX_EXT = 0x000087c0;
        public const int GL_CURRENT_OCCLUSION_QUERY_ID_NV = 0x00008865;
        public const int GL_GEOMETRY_DEFORMATION_SGIX = 0x00008194;
        public const int GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = 0x000080b9;
        public const int GL_PROXY_TEXTURE_CUBE_MAP_ARB = 0x0000851b;
        public const int GL_READ_ONLY_ARB = 0x000088b8;
        public const int GL_OUTPUT_TEXTURE_COORD15_EXT = 0x000087ac;
        public const int GL_STRICT_DEPTHFUNC_HINT_PGI = 0x0001a216;
        public const int GL_VARIABLE_G_NV = 0x00008529;
        public const int GL_PN_TRIANGLES_POINT_MODE_ATI = 0x000087f2;
        public const int GL_TEXTURE_BLUE_SIZE_EXT = 0x0000805e;
        public const int GL_QUADRATIC_ATTENUATION = 0x00001209;
        public const int GL_STENCIL_BUFFER_BIT = 0x00000400;
        public const int GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x000088b3;
        public const int GL_MODELVIEW16_ARB = 0x00008730;
        public const int GL_PROXY_HISTOGRAM_EXT = 0x00008025;
        public const int GL_MIRROR_CLAMP_TO_EDGE_EXT = 0x00008743;
        public const int GL_POST_CONVOLUTION_ALPHA_SCALE = 0x0000801f;
        public const int GL_TEXTURE_MIN_FILTER = 0x00002801;
        public const int GL_INT_VEC2 = 0x00008b53;
        public const int GL_INT_VEC3 = 0x00008b54;
        public const int GL_INT_VEC4 = 0x00008b55;
        public const int GL_SGIX_async = 0x00000001;
        public const int GL_EDGE_FLAG_ARRAY = 0x00008079;
        public const int GL_DRAW_BUFFER5_ARB = 0x0000882a;
        public const int GL_COLOR_TABLE_RED_SIZE_SGI = 0x000080da;
        public const int GL_BLEND_DST = 0x00000be0;
        public const int GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = 0x000080b5;
        public const int GL_OUTPUT_COLOR1_EXT = 0x0000879c;
        public const int GL_MODELVIEW19_ARB = 0x00008733;
        public const int GL_FRAGMENT_SHADER_ARB = 0x00008b30;
        public const int GL_OUTPUT_TEXTURE_COORD12_EXT = 0x000087a9;
        public const int GL_UNSIGNED_SHORT = 0x00001403;
        public const int GL_TEXTURE_MAX_CLAMP_T_SGIX = 0x0000836a;
        public const int GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 0x000086f3;
        public const int GL_CONSTANT_ARB = 0x00008576;
        public const int GL_SIGNED_HILO_NV = 0x000086f9;
        public const int GL_MAP2_VERTEX_ATTRIB1_4_NV = 0x00008671;
        public const int GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 0x00008516;
        public const int GL_SRC1_RGB = 0x00008581;
        public const int GL_OFFSET_HILO_TEXTURE_2D_NV = 0x00008854;
        public const int GL_CLIP_PLANE0 = 0x00003000;
        public const int GL_CLIP_PLANE1 = 0x00003001;
        public const int GL_CLIP_PLANE2 = 0x00003002;
        public const int GL_CLIP_PLANE3 = 0x00003003;
        public const int GL_CLIP_PLANE4 = 0x00003004;
        public const int GL_CLIP_PLANE5 = 0x00003005;
        public const int GL_POINT_SIZE_RANGE = 0x00000b12;
        public const int GL_NEAREST = 0x00002600;
        public const int GL_MIRRORED_REPEAT_ARB = 0x00008370;
        public const int GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x00008162;
        public const int GL_SGIS_fog_function = 0x00000001;
        public const int GL_FORMAT_SUBSAMPLE_244_244_OML = 0x00008983;
        public const int GL_OUTPUT_TEXTURE_COORD23_EXT = 0x000087b4;
        public const int GL_MAP2_GRID_SEGMENTS = 0x00000dd3;
        public const int GL_MAP2_VERTEX_ATTRIB0_4_NV = 0x00008670;
        public const int GL_DUAL_ALPHA8_SGIS = 0x00008111;
        public const int GL_TEXTURE_HEIGHT = 0x00001001;
        public const int GL_STENCIL_INDEX8_EXT = 0x00008d48;
        public const int GL_FOG_COORD_ARRAY_TYPE = 0x00008454;
        public const int GL_VERTEX_WEIGHT_ARRAY_EXT = 0x0000850c;
        public const int GL_MAGNITUDE_BIAS_NV = 0x00008718;
        public const int GL_UPPER_LEFT = 0x00008ca2;
        public const int GL_LINEAR_SHARPEN_SGIS = 0x000080ad;
        public const int GL_SGIX_convolution_accuracy = 0x00000001;
        public const int GL_ALPHA_FLOAT16_ATI = 0x0000881c;
        public const int GL_PREVIOUS_ARB = 0x00008578;
        public const int GL_FRAGMENT_LIGHT1_SGIX = 0x0000840d;
        public const int GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 0x000080bb;
        public const int GL_SOURCE0_RGB = 0x00008580;
        public const int GL_R1UI_C3F_V3F_SUN = 0x000085c6;
        public const int GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x000080d2;
        public const int GL_FORMAT_SUBSAMPLE_24_24_OML = 0x00008982;
        public const int GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 0x000088b4;
        public const int GL_FOG_BIT = 0x00000080;
        public const int GL_REG_27_ATI = 0x0000893c;
        public const int GL_MATRIX23_ARB = 0x000088d7;
        public const int GL_DRAW_BUFFER6_ARB = 0x0000882b;
        public const int GL_TEXTURE_BASE_LEVEL_SGIS = 0x0000813c;
        public const int GL_TEXTURE_LOD_BIAS_T_SGIX = 0x0000818f;
        public const int GL_FLOAT_RG_NV = 0x00008881;
        public const int GL_LINE_SMOOTH = 0x00000b20;
        public const int GL_MATRIX_PALETTE_ARB = 0x00008840;
        public const int GL_SAMPLE_MASK_VALUE_SGIS = 0x000080aa;
        public const int GL_SAMPLE_COVERAGE_VALUE = 0x000080aa;
        public const int GL_OUTPUT_TEXTURE_COORD5_EXT = 0x000087a2;
        public const int GL_MAP2_VERTEX_ATTRIB4_4_NV = 0x00008674;
        public const int GL_OUTPUT_TEXTURE_COORD7_EXT = 0x000087a4;
        public const int GL_SGIX_ir_instrument1 = 0x00000001;
        public const int GL_STENCIL_VALUE_MASK = 0x00000b93;
        public const int GL_VERTEX_ATTRIB_ARRAY9_NV = 0x00008659;
        public const int GL_OUTPUT_TEXTURE_COORD13_EXT = 0x000087aa;
        public const int GL_MAP1_VERTEX_ATTRIB0_4_NV = 0x00008660;
        public const int GL_TEXTURE_BIT = 0x00040000;
        public const int GL_CON_27_ATI = 0x0000895c;
        public const int GL_EVAL_BIT = 0x00010000;
        public const int GL_TRIANGLES = 0x00000004;
        public const int GL_NOTEQUAL = 0x00000205;
        public const int GL_MODELVIEW31_ARB = 0x0000873f;
        public const int GL_LIGHT_MODEL_COLOR_CONTROL = 0x000081f8;
        public const int GL_HISTOGRAM_WIDTH = 0x00008026;
        public const int GL_HISTOGRAM_ALPHA_SIZE = 0x0000802b;
        public const int GL_MVP_MATRIX_EXT = 0x000087e3;
        public const int GL_ACTIVE_ATTRIBUTES = 0x00008b89;
        public const int GL_TEXTURE_MAX_LEVEL_SGIS = 0x0000813d;
        public const int GL_DRAW_BUFFER4_ARB = 0x00008829;
        public const int GL_DUAL_ALPHA16_SGIS = 0x00008113;
        public const int GL_4PASS_2_SGIS = 0x000080a6;
        public const int GL_COMBINE4_NV = 0x00008503;
        public const int GL_QUERY_RESULT_ARB = 0x00008866;
        public const int GL_LINE_SMOOTH_HINT = 0x00000c52;
        public const int GL_COLOR_ATTACHMENT6_EXT = 0x00008ce6;
        public const int GL_INDEX_OFFSET = 0x00000d13;
        public const int GL_EXT_point_parameters = 0x00000001;
        public const int GL_AVERAGE_HP = 0x00008160;
        public const int GL_PROGRAM_ADDRESS_REGISTERS_ARB = 0x000088b0;
        public const int GL_SGIS_texture_edge_clamp = 0x00000001;
        public const int GL_FLOAT_RG16_NV = 0x00008886;
        public const int GL_SAMPLE_PATTERN_EXT = 0x000080ac;
        public const int GL_CLAMP_TO_EDGE_SGIS = 0x0000812f;
        public const int GL_MATRIX_INDEX_ARRAY_ARB = 0x00008844;
        public const int GL_REPLACE_EXT = 0x00008062;
        public const int GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 0x000192ad;
        public const int GL_SOURCE3_ALPHA_NV = 0x0000858b;
        public const int GL_MAP1_GRID_SEGMENTS = 0x00000dd1;
        public const int GL_OCCLUSION_TEST_RESULT_HP = 0x00008166;
        public const int GL_RGB10_A2_EXT = 0x00008059;
        public const int GL_COMPRESSED_RGBA_FXT1_3DFX = 0x000086b1;
        public const int GL_COLOR_ATTACHMENT15_EXT = 0x00008cef;
        public const int GL_COLOR_TABLE_SGI = 0x000080d0;
        public const int GL_MAX_PROGRAM_LOOP_COUNT_NV = 0x000088f8;
        public const int GL_FRAGMENT_SHADER = 0x00008b30;
        public const int GL_UNSIGNED_NORMALIZED_ARB = 0x00008c17;
        public const int GL_SGIX_pixel_texture = 0x00000001;
        public const int GL_MAP2_TEXTURE_COORD_4 = 0x00000db6;
        public const int GL_MAP2_TEXTURE_COORD_3 = 0x00000db5;
        public const int GL_MAP2_TEXTURE_COORD_2 = 0x00000db4;
        public const int GL_MAP2_TEXTURE_COORD_1 = 0x00000db3;
        public const int GL_NORMAL_MAP_NV = 0x00008511;
        public const int GL_LUMINANCE12_ALPHA12 = 0x00008047;
        public const int GL_POINT_SIZE_MIN_EXT = 0x00008126;
        public const int GL_OUT_OF_MEMORY = 0x00000505;
        public const int GL_FUNC_REVERSE_SUBTRACT_EXT = 0x0000800b;
        public const int GL_T2F_IUI_V3F_EXT = 0x000081b2;
        public const int GL_UNPACK_SKIP_IMAGES_EXT = 0x0000806d;
        public const int GL_CONSTANT_ATTENUATION = 0x00001207;
        public const int GL_TEXTURE_MAX_LOD_SGIS = 0x0000813b;
        public const int GL_SGIX_resample = 0x00000001;
        public const int GL_HALF_FLOAT_NV = 0x0000140b;
        public const int GL_INDEX_ARRAY = 0x00008077;
        public const int GL_ALPHA32F_ARB = 0x00008816;
        public const int GL_POINT_FADE_THRESHOLD_SIZE_EXT = 0x00008128;
        public const int GL_TEXTURE_APPLICATION_MODE_EXT = 0x0000834f;
        public const int GL_INDEX_ARRAY_BUFFER_BINDING_ARB = 0x00008899;
        public const int GL_MAX_SPOT_EXPONENT_NV = 0x00008505;
        public const int GL_FOG_FUNC_POINTS_SGIS = 0x0000812b;
        public const int GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = 0x000084f8;
        public const int GL_COLOR = 0x00001800;
        public const int GL_OUTPUT_VERTEX_EXT = 0x0000879a;
        public const int GL_LIST_BASE = 0x00000b32;
        public const int GL_HALF_BIAS_NORMAL_NV = 0x0000853a;
        public const int GL_OP_INDEX_EXT = 0x00008782;
        public const int GL_NUM_FRAGMENT_REGISTERS_ATI = 0x0000896e;
        public const int GL_POST_TEXTURE_FILTER_BIAS_SGIX = 0x00008179;
        public const int GL_DRAW_BUFFER14_ARB = 0x00008833;
        public const int GL_MAP2_VERTEX_ATTRIB11_4_NV = 0x0000867b;
        public const int GL_STENCIL_INDEX = 0x00001901;
        public const int GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x000087c5;
        public const int GL_BOOL_VEC3_ARB = 0x00008b58;
        public const int GL_UNSIGNED_BYTE_2_3_3_REV = 0x00008362;
        public const int GL_T2F_IUI_N3F_V3F_EXT = 0x000081b4;
        public const int GL_NEGATIVE_ONE_EXT = 0x000087df;
        public const int GL_SGIX_icc_texture = 0x00000001;
        public const int GL_COLOR_ATTACHMENT11_EXT = 0x00008ceb;
        public const int GL_UNSIGNED_IDENTITY_NV = 0x00008536;
        public const int GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = 0x0000888f;
        public const int GL_TEXTURE_LOD_BIAS_S_SGIX = 0x0000818e;
        public const int GL_BOOL_VEC4 = 0x00008b59;
        public const int GL_SAMPLE_MASK_INVERT_SGIS = 0x000080ab;
        public const int GL_BOOL_VEC2 = 0x00008b57;
        public const int GL_BOOL_VEC3 = 0x00008b58;
        public const int GL_SGIX_framezoom = 0x00000001;
        public const int GL_SGIS_texture_lod = 0x00000001;
        public const int GL_PROGRAM_RESIDENT_NV = 0x00008647;
        public const int GL_RGBA_FLOAT32_ATI = 0x00008814;
        public const int GL_MAX_VERTEX_SHADER_VARIANTS_EXT = 0x000087c6;
        public const int GL_STENCIL_CLEAR_VALUE = 0x00000b91;
        public const int GL_AMBIENT = 0x00001200;
        public const int GL_VIEWPORT_BIT = 0x00000800;
        public const int GL_MAX_TEXTURE_COORDS_NV = 0x00008871;
        public const int GL_SOURCE2_ALPHA_ARB = 0x0000858a;
        public const int GL_BLEND_COLOR_EXT = 0x00008005;
        public const int GL_TEXTURE_INTENSITY_SIZE = 0x00008061;
        public const int GL_DEPTH_COMPONENT32_ARB = 0x000081a7;
        public const int GL_REFLECTION_MAP = 0x00008512;
        public const int GL_C3F_V3F = 0x00002a24;
        public const int GL_MAT_SPECULAR_BIT_PGI = 0x04000000;
        public const int GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS = 0x0000809c;
        public const int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 0x0000851a;
        public const int GL_MAX_DRAW_BUFFERS_ARB = 0x00008824;
        public const int GL_STORAGE_CACHED_APPLE = 0x000085be;
        public const int GL_SGIX_texture_lod_bias = 0x00000001;
        public const int GL_PIXEL_MAP_R_TO_R = 0x00000c76;
        public const int GL_SAMPLE_COVERAGE = 0x000080a0;
        public const int GL_BLUE_SCALE = 0x00000d1a;
        public const int GL_SIGNED_RGBA8_NV = 0x000086fc;
        public const int GL_R1UI_C4F_N3F_V3F_SUN = 0x000085c8;
        public const int GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = 0x000088ef;
        public const int GL_VERTEX_ARRAY = 0x00008074;
        public const int GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x000083f3;
        public const int GL_OUTPUT_TEXTURE_COORD11_EXT = 0x000087a8;
        public const int GL_SCALAR_EXT = 0x000087be;
        public const int GL_IMAGE_TRANSFORM_2D_HP = 0x00008161;
        public const int GL_VERTEX_PRECLIP_HINT_SGIX = 0x000083ef;
        public const int GL_MAX_FRAGMENT_LIGHTS_SGIX = 0x00008404;
        public const int GL_OP_MAX_EXT = 0x0000878a;
        public const int GL_COMPILE_STATUS = 0x00008b81;
        public const int GL_POST_CONVOLUTION_GREEN_BIAS = 0x00008021;
        public const int GL_SHADER_OBJECT_ARB = 0x00008b48;
        public const int GL_SPOT_CUTOFF = 0x00001206;
        public const int GL_MAX_TEXTURE_COORDS = 0x00008871;
        public const int GL_CONVOLUTION_WIDTH_EXT = 0x00008018;
        public const int GL_SGIX_flush_raster = 0x00000001;
        public const int GL_OUTPUT_TEXTURE_COORD3_EXT = 0x000087a0;
        public const int GL_VARIABLE_A_NV = 0x00008523;
        public const int GL_DEPTH_STENCIL_NV = 0x000084f9;
        public const int GL_COMPILE_AND_EXECUTE = 0x00001301;
        public const int GL_INTENSITY = 0x00008049;
        public const int GL_TEXTURE_DEPTH_SIZE_ARB = 0x0000884a;
        public const int GL_NUM_LOOPBACK_COMPONENTS_ATI = 0x00008974;
        public const int GL_WRAP_BORDER_SUN = 0x000081d4;
        public const int GL_MATRIX_INDEX_ARRAY_SIZE_ARB = 0x00008846;
        public const int GL_MATRIX22_ARB = 0x000088d6;
        public const int GL_VERTEX_ARRAY_TYPE_EXT = 0x0000807b;
        public const int GL_COLOR_TABLE_WIDTH_SGI = 0x000080d9;
        public const int GL_LINE_LOOP = 0x00000002;
        public const int GL_STREAM_DRAW_ARB = 0x000088e0;
        public const int GL_VERTEX_ARRAY_SIZE_EXT = 0x0000807a;
        public const int GL_RGB10_A2 = 0x00008059;
        public const int GL_CURRENT_RASTER_TEXTURE_COORDS = 0x00000b06;
        public const int GL_MAX_VERTEX_UNITS_ARB = 0x000086a4;
        public const int GL_MODELVIEW21_ARB = 0x00008735;
        public const int GL_MATERIAL_SIDE_HINT_PGI = 0x0001a22c;
        public const int GL_FULL_STIPPLE_HINT_PGI = 0x0001a219;
        public const int GL_FENCE_CONDITION_NV = 0x000084f4;
        public const int GL_DOT_PRODUCT_TEXTURE_3D_NV = 0x000086ef;
        public const int GL_SHADER_SOURCE_LENGTH = 0x00008b88;
        public const int GL_MATRIX20_ARB = 0x000088d4;
        public const int GL_LINEAR_CLIPMAP_LINEAR_SGIX = 0x00008170;
        public const int GL_SAMPLE_COVERAGE_VALUE_ARB = 0x000080aa;
        public const int GL_MAP1_VERTEX_ATTRIB6_4_NV = 0x00008666;
        public const int GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = 0x000088b6;
        public const int GL_DOT3_RGBA_EXT = 0x00008741;
        public const int GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x00008365;
        public const int GL_UNPACK_ROW_LENGTH = 0x00000cf2;
        public const int GL_EVAL_VERTEX_ATTRIB0_NV = 0x000086c6;
        public const int GL_RGBA_S3TC = 0x000083a2;
        public const int GL_SGIX_fragment_lighting = 0x00000001;
        public const int GL_ALPHA12 = 0x0000803d;
        public const int GL_ALPHA16 = 0x0000803e;
        public const int GL_CURRENT_MATRIX_ARB = 0x00008641;
        public const int GL_LOWER_LEFT = 0x00008ca1;
        public const int GL_TEXTURE30_ARB = 0x000084de;
        public const int GL_COPY_INVERTED = 0x0000150c;
        public const int GL_MAX_PROGRAM_ATTRIBS_ARB = 0x000088ad;
        public const int GL_BUMP_ROT_MATRIX_ATI = 0x00008775;
        public const int GL_CONSTANT_COLOR = 0x00008001;
        public const int GL_DETAIL_TEXTURE_LEVEL_SGIS = 0x0000809a;
        public const int GL_DUAL_ALPHA4_SGIS = 0x00008110;
        public const int GL_MAX_TEXTURE_UNITS_ARB = 0x000084e2;
        public const int GL_CURRENT_BIT = 0x00000001;
        public const int GL_COMBINER_CD_OUTPUT_NV = 0x0000854b;
        public const int GL_EVAL_VERTEX_ATTRIB15_NV = 0x000086d5;
        public const int GL_HALF_BIAS_NEGATE_NV = 0x0000853b;
        public const int GL_SPOT_EXPONENT = 0x00001205;
        public const int GL_MODULATE_ADD_ATI = 0x00008744;
        public const int GL_BLEND_DST_ALPHA_EXT = 0x000080ca;
        public const int GL_INDEX_BITS = 0x00000d51;
        public const int GL_HISTOGRAM_LUMINANCE_SIZE = 0x0000802c;
        public const int GL_UNSIGNED_BYTE_2_3_3_REV_EXT = 0x00008362;
        public const int GL_MATRIX28_ARB = 0x000088dc;
        public const int GL_ATTRIB_ARRAY_STRIDE_NV = 0x00008624;
        public const int GL_REFLECTION_MAP_EXT = 0x00008512;
        public const int GL_MAP1_VERTEX_3 = 0x00000d97;
        public const int GL_ALPHA = 0x00001906;
        public const int GL_HALF_FLOAT_ARB = 0x0000140b;
        public const int GL_POINT_FADE_THRESHOLD_SIZE_SGIS = 0x00008128;
        public const int GL_UNSIGNED_INT_8_8_8_8_REV_EXT = 0x00008367;
        public const int GL_FOG_INDEX = 0x00000b61;
        public const int GL_COMBINE_ALPHA = 0x00008572;
        public const int GL_QUAD_INTENSITY4_SGIS = 0x00008122;
        public const int GL_TEXTURE10_ARB = 0x000084ca;
        public const int GL_UNSIGNED_INT_8_8_8_8_REV = 0x00008367;
        public const int GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 0x000087f5;
        public const int GL_MINMAX_FORMAT_EXT = 0x0000802f;
        public const int GL_POLYGON_OFFSET_POINT = 0x00002a01;
        public const int GL_PN_TRIANGLES_ATI = 0x000087f0;
        public const int GL_MAT_DIFFUSE_BIT_PGI = 0x00400000;
        public const int GL_2PASS_0_SGIS = 0x000080a2;
        public const int GL_PIXEL_COUNTER_BITS_NV = 0x00008864;
        public const int GL_NORMAL_ARRAY_LIST_STRIDE_IBM = 0x000192a9;
        public const int GL_PIXEL_MAG_FILTER_EXT = 0x00008331;
        public const int GL_MAP2_VERTEX_ATTRIB10_4_NV = 0x0000867a;
        public const int GL_DETAIL_TEXTURE_2D_BINDING_SGIS = 0x00008096;
        public const int GL_SIGNED_LUMINANCE_NV = 0x00008701;
        public const int GL_STATIC_READ = 0x000088e5;
        public const int GL_WIDE_LINE_HINT_PGI = 0x0001a222;
        public const int GL_FEEDBACK = 0x00001c01;
        public const int GL_MAX_ELEMENTS_VERTICES_EXT = 0x000080e8;
        public const int GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX = 0x00008188;
        public const int GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = 0x00008868;
        public const int GL_ELEMENT_ARRAY_BUFFER_ARB = 0x00008893;
        public const int GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = 0x0000845c;
        public const int GL_FLOAT_RGB_NV = 0x00008882;
        public const int GL_MAP2_VERTEX_ATTRIB6_4_NV = 0x00008676;
        public const int GL_SAMPLE_MASK_EXT = 0x000080a0;
        public const int GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 0x0000889a;
        public const int GL_COLOR_ATTACHMENT5_EXT = 0x00008ce5;
        public const int GL_DYNAMIC_COPY_ARB = 0x000088ea;
        public const int GL_SECONDARY_COLOR_NV = 0x0000852d;
        public const int GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 0x0000851f;
        public const int GL_MAX_TEXTURE_IMAGE_UNITS_NV = 0x00008872;
        public const int GL_IMAGE_SCALE_Y_HP = 0x00008156;
        public const int GL_4X_BIT_ATI = 0x00000002;
        public const int GL_ARB_imaging = 0x00000001;
        public const int GL_SGIS_detail_texture = 0x00000001;
        public const int GL_FRAGMENT_COLOR_EXT = 0x0000834c;
        public const int GL_POST_COLOR_MATRIX_GREEN_SCALE = 0x000080b5;
        public const int GL_PACK_SKIP_ROWS = 0x00000d03;
        public const int GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = 0x000086db;
        public const int GL_LIGHT2 = 0x00004002;
        public const int GL_LIGHT3 = 0x00004003;
        public const int GL_LIGHT0 = 0x00004000;
        public const int GL_LIGHT1 = 0x00004001;
        public const int GL_LIGHT6 = 0x00004006;
        public const int GL_LIGHT7 = 0x00004007;
        public const int GL_LIGHT4 = 0x00004004;
        public const int GL_LIGHT5 = 0x00004005;
        public const int GL_MIRROR_CLAMP_TO_BORDER_EXT = 0x00008912;
        public const int GL_MAP1_TEXTURE_COORD_4 = 0x00000d96;
        public const int GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = 0x00008517;
        public const int GL_COLOR_ARRAY_POINTER = 0x00008090;
        public const int GL_UNSIGNED_SHORT_4_4_4_4 = 0x00008033;
        public const int GL_RESAMPLE_REPLICATE_SGIX = 0x0000842e;
        public const int GL_MAP1_BINORMAL_EXT = 0x00008446;
        public const int GL_SRC_COLOR = 0x00000300;
        public const int GL_POST_COLOR_MATRIX_BLUE_SCALE = 0x000080b6;
        public const int GL_SIGNED_LUMINANCE_ALPHA_NV = 0x00008703;
        public const int GL_PRIMARY_COLOR_EXT = 0x00008577;
        public const int GL_PACK_RESAMPLE_SGIX = 0x0000842c;
        public const int GL_PIXEL_MAP_I_TO_R_SIZE = 0x00000cb2;
        public const int GL_CURRENT_PROGRAM = 0x00008b8d;
        public const int GL_FRAGMENT_COLOR_MATERIAL_SGIX = 0x00008401;
        public const int GL_POSITION = 0x00001203;
        public const int GL_POST_COLOR_MATRIX_BLUE_BIAS = 0x000080ba;
        public const int GL_LOAD = 0x00000101;
        public const int GL_FOG_END = 0x00000b64;
        public const int GL_FOG_SPECULAR_TEXTURE_WIN = 0x000080ec;
        public const int GL_TEXTURE_BORDER = 0x00001005;
        public const int GL_TEXTURE17_ARB = 0x000084d1;
        public const int GL_X_EXT = 0x000087d5;
        public const int GL_TEXTURE3 = 0x000084c3;
        public const int GL_TEXTURE2 = 0x000084c2;
        public const int GL_TEXTURE1 = 0x000084c1;
        public const int GL_TEXTURE0 = 0x000084c0;
        public const int GL_TEXTURE7 = 0x000084c7;
        public const int GL_TEXTURE6 = 0x000084c6;
        public const int GL_TEXTURE5 = 0x000084c5;
        public const int GL_TEXTURE4 = 0x000084c4;
        public const int GL_MAP1_VERTEX_ATTRIB14_4_NV = 0x0000866e;
        public const int GL_TEXTURE9 = 0x000084c9;
        public const int GL_TEXTURE8 = 0x000084c8;
        public const int GL_MAP2_BINORMAL_EXT = 0x00008447;
        public const int GL_DRAW_BUFFER12_ARB = 0x00008831;
        public const int GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = 0x000088b5;
        public const int GL_OP_CLAMP_EXT = 0x0000878e;
        public const int GL_SAMPLES_PASSED_ARB = 0x00008914;
        public const int GL_DECR_WRAP_EXT = 0x00008508;
        public const int GL_MATRIX19_ARB = 0x000088d3;
        public const int GL_ATTACHED_SHADERS = 0x00008b85;
        public const int GL_R1UI_N3F_V3F_SUN = 0x000085c7;
        public const int GL_MAP1_VERTEX_ATTRIB12_4_NV = 0x0000866c;
        public const int GL_CLIENT_ACTIVE_TEXTURE_ARB = 0x000084e1;
        public const int GL_FRAMEBUFFER_BINDING_EXT = 0x00008ca6;
        public const int GL_BINORMAL_ARRAY_EXT = 0x0000843a;
        public const int GL_FOG_DISTANCE_MODE_NV = 0x0000855a;
        public const int GL_SPRITE_AXIS_SGIX = 0x0000814a;
        public const int GL_2PASS_1_EXT = 0x000080a3;
        public const int GL_RED = 0x00001903;
        public const int GL_COLOR_ATTACHMENT4_EXT = 0x00008ce4;
        public const int GL_NORMAL_ARRAY_BUFFER_BINDING = 0x00008897;
        public const int GL_MODELVIEW17_ARB = 0x00008731;
        public const int GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x000087c8;
        public const int GL_QUERY_RESULT_AVAILABLE_ARB = 0x00008867;
        public const int GL_OP_SUB_EXT = 0x00008796;
        public const int GL_RENDERBUFFER_BINDING_EXT = 0x00008ca7;
        public const int GL_WEIGHT_ARRAY_STRIDE_ARB = 0x000086aa;
        public const int GL_FUNC_ADD = 0x00008006;
        public const int GL_MODELVIEW6_ARB = 0x00008726;
        public const int GL_LEFT = 0x00000406;
        public const int GL_ATTENUATION_EXT = 0x0000834d;
        public const int GL_RGB5_A1 = 0x00008057;
        public const int GL_ALLOW_DRAW_OBJ_HINT_PGI = 0x0001a20e;
        public const int GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 0x00008b8b;
        public const int GL_BLEND_DST_RGB = 0x000080c8;
        public const int GL_FLOAT_R_NV = 0x00008880;
        public const int GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x00008810;
        public const int GL_OPERAND1_RGB_ARB = 0x00008591;
        public const int GL_MAX_PALETTE_MATRICES_ARB = 0x00008842;
        public const int GL_CULL_FRAGMENT_NV = 0x000086e7;
        public const int GL_COLOR_TABLE_BLUE_SIZE = 0x000080dc;
        public const int GL_INTENSITY32F_ARB = 0x00008817;
        public const int GL_CURRENT_BINORMAL_EXT = 0x0000843c;
        public const int GL_VERTEX_STREAM0_ATI = 0x0000876c;
        public const int GL_STREAM_READ_ARB = 0x000088e1;
        public const int GL_TEXTURE_BLUE_TYPE_ARB = 0x00008c12;
        public const int GL_LOCAL_CONSTANT_DATATYPE_EXT = 0x000087ed;
        public const int GL_MAGNITUDE_SCALE_NV = 0x00008712;
        public const int GL_INVERTED_SCREEN_W_REND = 0x00008491;
        public const int GL_CMYK_EXT = 0x0000800c;
        public const int GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x00008b4c;
        public const int GL_OP_MUL_EXT = 0x00008786;
        public const int GL_SAMPLE_BUFFERS_3DFX = 0x000086b3;
        public const int GL_SIGNED_RGB8_NV = 0x000086ff;
        public const int GL_MAX_ELEMENTS_VERTICES = 0x000080e8;
        public const int GL_SIGNED_INTENSITY8_NV = 0x00008708;
        public const int GL_DYNAMIC_DRAW = 0x000088e8;
        public const int GL_GREEN_BIT_ATI = 0x00000002;
        public const int GL_UNPACK_CMYK_HINT_EXT = 0x0000800f;
        public const int GL_REG_19_ATI = 0x00008934;
        public const int GL_SHADER_TYPE = 0x00008b4f;
        public const int GL_OPERAND2_RGB = 0x00008592;
        public const int GL_TEXTURE_DEFORMATION_SGIX = 0x00008195;
        public const int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 0x00008cd2;
        public const int GL_SHADING_LANGUAGE_VERSION = 0x00008b8c;
        public const int GL_INCR = 0x00001e02;
        public const int GL_UNPACK_IMAGE_HEIGHT = 0x0000806e;
        public const int GL_TEXCOORD1_BIT_PGI = 0x10000000;
        public const int GL_TEXTURE_COMPRESSED = 0x000086a1;
        public const int GL_SOURCE2_RGB = 0x00008582;
        public const int GL_NORMALIZED_RANGE_EXT = 0x000087e0;
        public const int GL_ACCUM_BUFFER_BIT = 0x00000200;
        public const int GL_SRC_ALPHA_SATURATE = 0x00000308;
        public const int GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = 0x0000850d;
        public const int GL_COMBINER_MAPPING_NV = 0x00008543;
        public const int GL_HISTOGRAM_LUMINANCE_SIZE_EXT = 0x0000802c;
        public const int GL_POLYGON = 0x00000009;
        public const int GL_TEXTURE_COORD_ARRAY_SIZE_EXT = 0x00008088;
        public const int GL_4D_COLOR_TEXTURE = 0x00000604;
        public const int GL_CON_0_ATI = 0x00008941;
        public const int GL_VERTEX_ARRAY_RANGE_VALID_NV = 0x0000851f;
        public const int GL_COLOR_INDEX4_EXT = 0x000080e4;
        public const int GL_EVAL_VERTEX_ATTRIB14_NV = 0x000086d4;
        public const int GL_TABLE_TOO_LARGE_EXT = 0x00008031;
        public const int GL_ARRAY_OBJECT_OFFSET_ATI = 0x00008767;
        public const int GL_SWIZZLE_STQ_ATI = 0x00008977;
        public const int GL_TEXTURE_DEPTH_TYPE_ARB = 0x00008c16;
        public const int GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT = 0x00008366;
        public const int GL_T2F_N3F_V3F = 0x00002a2b;
        public const int GL_QUAD_ALPHA4_SGIS = 0x0000811e;
        public const int GL_OUTPUT_TEXTURE_COORD27_EXT = 0x000087b8;
        public const int GL_OUTPUT_TEXTURE_COORD16_EXT = 0x000087ad;
        public const int GL_TEXTURE_ALPHA_TYPE_ARB = 0x00008c13;
        public const int GL_TEXTURE_COMPONENTS = 0x00001003;
        public const int GL_LINE_STRIP = 0x00000003;
        public const int GL_EXT_texture3D = 0x00000001;
        public const int GL_LUMINANCE16F_ARB = 0x0000881e;
        public const int GL_WEIGHT_ARRAY_POINTER_ARB = 0x000086ac;
        public const int GL_CLIENT_ATTRIB_STACK_DEPTH = 0x00000bb1;
        public const int GL_MATRIX10_ARB = 0x000088ca;
        public const int GL_SGIX_pixel_tiles = 0x00000001;
        public const int GL_SEPARATE_SPECULAR_COLOR_EXT = 0x000081fa;
        public const int GL_DISCARD_NV = 0x00008530;
        public const int GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x00000d3b;
        public const int GL_ACCUM_ALPHA_BITS = 0x00000d5b;
        public const int GL_MATRIX16_ARB = 0x000088d0;
        public const int GL_MIN = 0x00008007;
        public const int GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x00008802;
        public const int GL_COLOR_MATRIX_STACK_DEPTH = 0x000080b2;
        public const int GL_EXT_rescale_normal = 0x00000001;
        public const int GL_SIGNED_IDENTITY_NV = 0x0000853c;
        public const int GL_COMBINE = 0x00008570;
        public const int GL_LINE = 0x00001b01;
        public const int GL_POLYGON_OFFSET_BIAS_EXT = 0x00008039;
        public const int GL_FRAGMENT_LIGHT4_SGIX = 0x00008410;
        public const int GL_DEPTH_PASS_INSTRUMENT_SGIX = 0x00008310;
        public const int GL_QUAD_LUMINANCE8_SGIS = 0x00008121;
        public const int GL_SOURCE1_RGB = 0x00008581;
        public const int GL_ALWAYS_SOFT_HINT_PGI = 0x0001a20d;
        public const int GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x00008622;
        public const int GL_MAP2_TANGENT_EXT = 0x00008445;
        public const int GL_T4F_V4F = 0x00002a28;
        public const int GL_OFFSET_TEXTURE_BIAS_NV = 0x000086e3;
        public const int GL_ONE_MINUS_CONSTANT_COLOR_EXT = 0x00008002;
        public const int GL_OP_DOT3_EXT = 0x00008784;
        public const int GL_DRAW_BUFFER6_ATI = 0x0000882b;
        public const int GL_PROGRAM_ERROR_STRING_ARB = 0x00008874;
        public const int GL_POST_CONVOLUTION_RED_SCALE = 0x0000801c;
        public const int GL_EXT_histogram = 0x00000001;
        public const int GL_TANGENT_ARRAY_STRIDE_EXT = 0x0000843f;
        public const int GL_COMBINER_AB_OUTPUT_NV = 0x0000854a;
        public const int GL_PROXY_COLOR_TABLE_SGI = 0x000080d3;
        public const int GL_2D = 0x00000600;
        public const int GL_RGB16F_ARB = 0x0000881b;
        public const int GL_REG_22_ATI = 0x00008937;
        public const int GL_N3F_V3F = 0x00002a25;
        public const int GL_HISTOGRAM_FORMAT = 0x00008027;
        public const int GL_MODELVIEW18_ARB = 0x00008732;
        public const int GL_YCBCR_422_APPLE = 0x000085b9;
        public const int GL_SELECTION_BUFFER_SIZE = 0x00000df4;
        public const int GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 0x0000850f;
        public const int GL_COLOR_ATTACHMENT0_EXT = 0x00008ce0;
        public const int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 0x0000886a;
        public const int GL_MAX_ELEMENTS_INDICES = 0x000080e9;
        public const int GL_DSDT8_MAG8_NV = 0x0000870a;
        public const int GL_OBJECT_ACTIVE_UNIFORMS_ARB = 0x00008b86;
        public const int GL_RGBA12 = 0x0000805a;
        public const int GL_RGBA16 = 0x0000805b;
        public const int GL_CONVOLUTION_HINT_SGIX = 0x00008316;
        public const int GL_INDEX_SHIFT = 0x00000d12;
        public const int GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = 0x00008b9b;
        public const int GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = 0x00008803;
        public const int GL_SAMPLE_PATTERN_SGIS = 0x000080ac;
        public const int GL_SGIX_list_priority = 0x00000001;
        public const int GL_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x000088a6;
        public const int GL_RGBA_MODE = 0x00000c31;
        public const int GL_GREEN_BIAS = 0x00000d19;
        public const int GL_RGBA4_EXT = 0x00008056;
        public const int GL_CON_22_ATI = 0x00008957;
        public const int GL_COLOR_TABLE_ALPHA_SIZE = 0x000080dd;
        public const int GL_SPECULAR = 0x00001202;
        public const int GL_COMPRESSED_LUMINANCE_ALPHA = 0x000084eb;
        public const int GL_BUFFER_SIZE_ARB = 0x00008764;
        public const int GL_UNSIGNED_SHORT_8_8_MESA = 0x000085ba;
        public const int GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = 0x00008b4a;
        public const int GL_CON_29_ATI = 0x0000895e;
        public const int GL_OP_MOV_EXT = 0x00008799;
        public const int GL_OBJECT_VALIDATE_STATUS_ARB = 0x00008b83;
        public const int GL_TEXTURE19_ARB = 0x000084d3;
        public const int GL_RESAMPLE_DECIMATE_OML = 0x00008989;
        public const int GL_DRAW_BUFFER3 = 0x00008828;
        public const int GL_LINE_BIT = 0x00000004;
        public const int GL_MODELVIEW26_ARB = 0x0000873a;
        public const int GL_INTENSITY_FLOAT16_ATI = 0x0000881d;
        public const int GL_PIXEL_MAP_I_TO_A_SIZE = 0x00000cb5;
        public const int GL_FRAGMENT_DEPTH = 0x00008452;
        public const int GL_UNPACK_SKIP_IMAGES = 0x0000806d;
        public const int GL_SOURCE3_RGB_NV = 0x00008583;
        public const int GL_COLOR_TABLE_FORMAT_SGI = 0x000080d8;
        public const int GL_MAX_PROGRAM_CALL_DEPTH_NV = 0x000088f5;
        public const int GL_MAT_EMISSION_BIT_PGI = 0x00800000;
        public const int GL_VERTEX_ARRAY_TYPE = 0x0000807b;
        public const int GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 0x000086d9;
        public const int GL_SGIX_ycrcb = 0x00000001;
        public const int GL_TEXTURE_CONSTANT_DATA_SUNX = 0x000081d6;
        public const int GL_POST_CONVOLUTION_BLUE_SCALE = 0x0000801e;
        public const int GL_LINEAR_SHARPEN_COLOR_SGIS = 0x000080af;
        public const int GL_DOUBLE_EXT = 0x0000140a;
        public const int GL_STENCIL_TEST = 0x00000b90;
        public const int GL_SIGNED_ALPHA_NV = 0x00008705;
        public const int GL_SAMPLE_BUFFERS_EXT = 0x000080a8;
        public const int GL_DUAL_LUMINANCE8_SGIS = 0x00008115;
        public const int GL_FASTEST = 0x00001101;
        public const int GL_DISCARD_ATI = 0x00008763;
        public const int GL_RGBA16_EXT = 0x0000805b;
        public const int GL_VERTEX_DATA_HINT_PGI = 0x0001a22a;
        public const int GL_RASTER_POSITION_UNCLIPPED_IBM = 0x00019262;
        public const int GL_EXT_texture_object = 0x00000001;
        public const int GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 0x00008b4d;
        public const int GL_TEXTURE_GEN_MODE = 0x00002500;
        public const int GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x00008623;
        public const int GL_MODULATE_SUBTRACT_ATI = 0x00008746;
        public const int GL_TEXT_FRAGMENT_SHADER_ATI = 0x00008200;
        public const int GL_CON_12_ATI = 0x0000894d;
        public const int GL_FOG_OFFSET_SGIX = 0x00008198;
        public const int GL_SIGNED_HILO8_NV = 0x0000885f;
        public const int GL_FLOAT_RGBA_MODE_NV = 0x0000888e;
        public const int GL_COLOR_TABLE_ALPHA_SIZE_SGI = 0x000080dd;
        public const int GL_CON_2_ATI = 0x00008943;
        public const int GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = 0x00008355;
        public const int GL_GREEN_MIN_CLAMP_INGR = 0x00008561;
        public const int GL_MAX_DRAW_BUFFERS = 0x00008824;
        public const int GL_FOG_COORDINATE_ARRAY_TYPE_EXT = 0x00008454;
        public const int GL_OP_MULTIPLY_MATRIX_EXT = 0x00008798;
        public const int GL_OUTPUT_FOG_EXT = 0x000087bd;
        public const int GL_SGIX_reference_plane = 0x00000001;
        public const int GL_SGIX_async_pixel = 0x00000001;
        public const int GL_PROGRAM_TEX_INDIRECTIONS_ARB = 0x00008807;
        public const int GL_DEPTH_BUFFER_BIT = 0x00000100;
        public const int GL_R1UI_V3F_SUN = 0x000085c4;
        public const int GL_VERTEX_PROGRAM_POINT_SIZE_ARB = 0x00008642;
        public const int GL_CONSTANT_ALPHA_EXT = 0x00008003;
        public const int GL_MAX_PROGRAM_TEMPORARIES_ARB = 0x000088a5;
        public const int GL_RGBA2 = 0x00008055;
        public const int GL_RGBA4 = 0x00008056;
        public const int GL_NAME_STACK_DEPTH = 0x00000d70;
        public const int GL_RGBA8 = 0x00008058;
        public const int GL_OBJECT_DISTANCE_TO_POINT_SGIS = 0x000081f1;
        public const int GL_POLYGON_SMOOTH = 0x00000b41;
        public const int GL_PN_TRIANGLES_NORMAL_MODE_ATI = 0x000087f3;
        public const int GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 0x000192af;
        public const int GL_EDGE_FLAG_ARRAY_COUNT_EXT = 0x0000808d;
        public const int GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = 0x000085c2;
        public const int GL_DRAW_BUFFER5_ATI = 0x0000882a;
        public const int GL_LOGIC_OP = 0x00000bf1;
        public const int GL_INDEX_ARRAY_TYPE_EXT = 0x00008085;
        public const int GL_4_BYTES = 0x00001409;
        public const int GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 0x000192ac;
        public const int GL_TEXTURE15_ARB = 0x000084cf;
        public const int GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x000087f4;
        public const int GL_MAP2_VERTEX_ATTRIB2_4_NV = 0x00008672;
        public const int GL_POINT_SIZE_MIN = 0x00008126;
        public const int GL_T2F_IUI_V2F_EXT = 0x000081b1;
        public const int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 0x00008cd1;
        public const int GL_HILO_NV = 0x000086f4;
        public const int GL_COLOR_INDEX8_EXT = 0x000080e5;
        public const int GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 0x0000889b;
        public const int GL_SAMPLER_CUBE = 0x00008b60;
        public const int GL_DEPTH_STENCIL_TO_RGBA_NV = 0x0000886e;
        public const int GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = 0x000085c1;
        public const int GL_EXT_abgr = 0x00000001;
        public const int GL_UNPACK_LSB_FIRST = 0x00000cf1;
        public const int GL_SGIX_tag_sample_buffer = 0x00000001;
        public const int GL_DOUBLEBUFFER = 0x00000c32;
        public const int GL_YCRCB_422_SGIX = 0x000081bb;
        public const int GL_CON_9_ATI = 0x0000894a;
        public const int GL_FEEDBACK_BUFFER_POINTER = 0x00000df0;
        public const int GL_COMBINER_BIAS_NV = 0x00008549;
        public const int GL_LINE_RESET_TOKEN = 0x00000707;
        public const int GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = 0x000081a9;
        public const int GL_HISTOGRAM = 0x00008024;
        public const int GL_COLOR_ARRAY_POINTER_EXT = 0x00008090;
        public const int GL_SGIX_fog_offset = 0x00000001;
        public const int GL_EVAL_VERTEX_ATTRIB5_NV = 0x000086cb;
        public const int GL_DS_SCALE_NV = 0x00008710;
        public const int GL_TEXTURE_BINDING_CUBE_MAP_ARB = 0x00008514;
        public const int GL_MAX_ASYNC_HISTOGRAM_SGIX = 0x0000832d;
        public const int GL_GENERATE_MIPMAP_HINT = 0x00008192;
        public const int GL_FUNC_REVERSE_SUBTRACT = 0x0000800b;
        public const int GL_MULTISAMPLE_3DFX = 0x000086b2;
        public const int GL_EXTENSIONS = 0x00001f03;
        public const int GL_OPERAND0_RGB = 0x00008590;
        public const int GL_INDEX_MODE = 0x00000c30;
        public const int GL_DST_ALPHA = 0x00000304;
        public const int GL_SGIS_sharpen_texture = 0x00000001;
        public const int GL_TEXTURE_DT_SIZE_NV = 0x0000871e;
        public const int GL_SAMPLE_BUFFERS_SGIS = 0x000080a8;
        public const int GL_REFLECTION_MAP_ARB = 0x00008512;
        public const int GL_OPERAND3_ALPHA_NV = 0x0000859b;
        public const int GL_DYNAMIC_DRAW_ARB = 0x000088e8;
        public const int GL_TEXTURE11_ARB = 0x000084cb;
        public const int GL_DRAW_BUFFER9_ARB = 0x0000882e;
        public const int GL_OP_MADD_EXT = 0x00008788;
        public const int GL_BACK = 0x00000405;
        public const int GL_FUNC_SUBTRACT_EXT = 0x0000800a;
        public const int GL_RGB_SCALE = 0x00008573;
        public const int GL_COLOR_CLEAR_VALUE = 0x00000c22;
        public const int GL_BACK_NORMALS_HINT_PGI = 0x0001a223;
        public const int GL_TEXTURE_RED_SIZE = 0x0000805c;
        public const int GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 0x0000864e;
        public const int GL_SAMPLES_ARB = 0x000080a9;
        public const int GL_PIXEL_PACK_BUFFER_ARB = 0x000088eb;
        public const int GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = 0x000080de;
        public const int GL_PACK_INVERT_MESA = 0x00008758;
        public const int GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 0x000085b0;
        public const int GL_ALPHA_TEST = 0x00000bc0;
        public const int GL_TRANSPOSE_PROJECTION_MATRIX = 0x000084e4;
        public const int GL_CUBIC_EXT = 0x00008334;
        public const int GL_INCR_WRAP_EXT = 0x00008507;
        public const int GL_OPERAND0_RGB_EXT = 0x00008590;
        public const int GL_ACTIVE_VERTEX_UNITS_ARB = 0x000086a5;
        public const int GL_PROGRAM_TARGET_NV = 0x00008646;
        public const int GL_IMAGE_TRANSLATE_X_HP = 0x00008157;
        public const int GL_DRAW_BUFFER10_ARB = 0x0000882f;
        public const int GL_FRAMEBUFFER_UNSUPPORTED_EXT = 0x00008cdd;
        public const int GL_COLOR_TABLE_RED_SIZE = 0x000080da;
        public const int GL_SHORT = 0x00001402;
        public const int GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = 0x0000845a;
        public const int GL_MUL_ATI = 0x00008964;
        public const int GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x00008366;
        public const int GL_VERTEX_SHADER_OPTIMIZED_EXT = 0x000087d4;
        public const int GL_SRC1_ALPHA = 0x00008589;
        public const int GL_SOURCE2_RGB_EXT = 0x00008582;
        public const int GL_REG_1_ATI = 0x00008922;
        public const int GL_MAX_ACTIVE_LIGHTS_SGIX = 0x00008405;
        public const int GL_MODELVIEW13_ARB = 0x0000872d;
        public const int GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 0x0000885d;
        public const int GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 0x000086f1;
        public const int GL_STENCIL_BACK_FUNC_ATI = 0x00008800;
        public const int GL_OP_CROSS_PRODUCT_EXT = 0x00008797;
        public const int GL_MAX_EXT = 0x00008008;
        public const int GL_TEXTURE_COORD_ARRAY_TYPE = 0x00008089;
        public const int GL_INTERLACE_SGIX = 0x00008094;
        public const int GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 0x000080d4;
        public const int GL_SGI_color_matrix = 0x00000001;
        public const int GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = 0x0000889e;
        public const int GL_CLIENT_ACTIVE_TEXTURE = 0x000084e1;
        public const int GL_LUMINANCE4_EXT = 0x0000803f;
        public const int GL_LIGHT_MODEL_COLOR_CONTROL_EXT = 0x000081f8;
        public const int GL_PIXEL_PACK_BUFFER_BINDING_EXT = 0x000088ed;
        public const int GL_CURRENT_FOG_COORDINATE_EXT = 0x00008453;
        public const int GL_SAMPLES_EXT = 0x000080a9;
        public const int GL_FOG_COORD_ARRAY = 0x00008457;
        public const int GL_SOURCE1_ALPHA_EXT = 0x00008589;
        public const int GL_COMPRESSED_RGB_ARB = 0x000084ed;
        public const int GL_POST_CONVOLUTION_RED_BIAS_EXT = 0x00008020;
        public const int GL_INVALID_OPERATION = 0x00000502;
        public const int GL_SRC0_ALPHA = 0x00008588;
        public const int GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x0000889c;
        public const int GL_FLOAT_RGB32_NV = 0x00008889;
        public const int GL_LUMINANCE_ALPHA16F_ARB = 0x0000881f;
        public const int GL_AND = 0x00001501;
        public const int GL_VERTEX_STREAM5_ATI = 0x00008771;
        public const int GL_MODELVIEW20_ARB = 0x00008734;
        public const int GL_POST_CONVOLUTION_COLOR_TABLE = 0x000080d1;
        public const int GL_DETAIL_TEXTURE_MODE_SGIS = 0x0000809b;
        public const int GL_NUM_FRAGMENT_CONSTANTS_ATI = 0x0000896f;
        public const int GL_VERTEX_SHADER = 0x00008b31;
        public const int GL_MAX_FRAMEZOOM_FACTOR_SGIX = 0x0000818d;
        public const int GL_WRITE_PIXEL_DATA_RANGE_NV = 0x00008878;
        public const int GL_PRIMARY_COLOR = 0x00008577;
        public const int GL_STATIC_COPY = 0x000088e6;
        public const int GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 0x0000870d;
        public const int GL_COORD_REPLACE = 0x00008862;
        public const int GL_TEXTURE23_ARB = 0x000084d7;
        public const int GL_BUFFER_ACCESS_ARB = 0x000088bb;
        public const int GL_TEXTURE9_ARB = 0x000084c9;
        public const int GL_SWIZZLE_STQ_DQ_ATI = 0x00008979;
        public const int GL_LINE_WIDTH_RANGE = 0x00000b22;
        public const int GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI = 0x00008835;
        public const int GL_LO_BIAS_NV = 0x00008715;
        public const int GL_COLOR_INDEX = 0x00001900;
        public const int GL_VERTEX_ARRAY_RANGE_LENGTH_NV = 0x0000851e;
        public const int GL_VERTEX23_BIT_PGI = 0x00000004;
        public const int GL_MAP1_VERTEX_ATTRIB8_4_NV = 0x00008668;
        public const int GL_STREAM_COPY = 0x000088e2;
        public const int GL_TEXTURE_COMPRESSION_HINT_ARB = 0x000084ef;
        public const int GL_BOOL_VEC4_ARB = 0x00008b59;
        public const int GL_MAX_VERTEX_STREAMS_ATI = 0x0000876b;
        public const int GL_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x000087cf;
        public const int GL_PACK_RESAMPLE_OML = 0x00008984;
        public const int GL_RGB12_EXT = 0x00008053;
        public const int GL_COLOR_ARRAY_TYPE = 0x00008082;
        public const int GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 0x00008cda;
        public const int GL_CONVOLUTION_2D = 0x00008011;
        public const int GL_POST_CONVOLUTION_ALPHA_BIAS = 0x00008023;
        public const int GL_422_EXT = 0x000080cc;
        public const int GL_LIST_PRIORITY_SGIX = 0x00008182;
        public const int GL_OP_FLOOR_EXT = 0x0000878f;
        public const int GL_REG_30_ATI = 0x0000893f;
        public const int GL_LUMINANCE16_ALPHA16 = 0x00008048;
        public const int GL_HILO8_NV = 0x0000885e;
        public const int GL_MAX_VERTEX_SHADER_LOCALS_EXT = 0x000087c9;
        public const int GL_INDEX_ARRAY_STRIDE = 0x00008086;
        public const int GL_BUFFER_USAGE = 0x00008765;
        public const int GL_BUMP_ENVMAP_ATI = 0x0000877b;
        public const int GL_FRAGMENT_LIGHT3_SGIX = 0x0000840f;
        public const int GL_POINT_SIZE_MAX_ARB = 0x00008127;
        public const int GL_SHADER_OPERATION_NV = 0x000086df;
        public const int GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x0000880b;
        public const int GL_MAP1_COLOR_4 = 0x00000d90;
        public const int GL_TEXTURE_INTENSITY_SIZE_EXT = 0x00008061;
        public const int GL_FILTER4_SGIS = 0x00008146;
        public const int GL_EVAL_VERTEX_ATTRIB2_NV = 0x000086c8;
        public const int GL_STENCIL_BITS = 0x00000d57;
        public const int GL_DRAW_BUFFER9_ATI = 0x0000882e;
        public const int GL_EXT_convolution = 0x00000001;
        public const int GL_OUTPUT_TEXTURE_COORD10_EXT = 0x000087a7;
        public const int GL_CON_18_ATI = 0x00008953;
        public const int GL_PROXY_HISTOGRAM = 0x00008025;
        public const int GL_RENDERBUFFER_WIDTH_EXT = 0x00008d42;
        public const int GL_CULL_FACE_MODE = 0x00000b45;
        public const int GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x00008178;
        public const int GL_NORMAL_ARRAY_STRIDE_EXT = 0x0000807f;
        public const int GL_COLOR_MATRIX = 0x000080b1;
        public const int GL_SOURCE1_ALPHA = 0x00008589;
        public const int GL_TEXTURE_WRAP_R = 0x00008072;
        public const int GL_CLIENT_PIXEL_STORE_BIT = 0x00000001;
        public const int GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = 0x0000851c;
        public const int GL_TEXTURE_WRAP_T = 0x00002803;
        public const int GL_CURRENT_MATRIX_NV = 0x00008641;
        public const int GL_SGIX_subsample = 0x00000001;
        public const int GL_MAP_TESSELLATION_NV = 0x000086c2;
        public const int GL_PACK_IMAGE_HEIGHT_EXT = 0x0000806c;
        public const int GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX = 0x00008187;
        public const int GL_UNPACK_CONSTANT_DATA_SUNX = 0x000081d5;
        public const int GL_SGIX_interlace = 0x00000001;
        public const int GL_HISTOGRAM_BLUE_SIZE = 0x0000802a;
        public const int GL_TEXTURE_TOO_LARGE_EXT = 0x00008065;
        public const int GL_MATRIX2_NV = 0x00008632;
        public const int GL_CUBIC_HP = 0x0000815f;
        public const int GL_ZOOM_Y = 0x00000d17;
        public const int GL_TEXTURE_GREEN_TYPE_ARB = 0x00008c11;
        public const int GL_SOURCE0_RGB_ARB = 0x00008580;
        public const int GL_MAX_CONVOLUTION_WIDTH = 0x0000801a;
        public const int GL_UNSIGNED_INT_8_8_8_8 = 0x00008035;
        public const int GL_POINT_SPRITE_NV = 0x00008861;
        public const int GL_OUTPUT_TEXTURE_COORD31_EXT = 0x000087bc;
        public const int GL_POST_COLOR_MATRIX_ALPHA_BIAS = 0x000080bb;
        public const int GL_CULL_MODES_NV = 0x000086e0;
        public const int GL_MATRIX0_NV = 0x00008630;
        public const int GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 0x0000808b;
        public const int GL_FRAMEBUFFER_INCOMPLETE_DUPLICATE_ATTACHMENT_EXT = 0x00008cd8;
        public const int GL_RESAMPLE_DECIMATE_SGIX = 0x00008430;
        public const int GL_COLOR_ATTACHMENT12_EXT = 0x00008cec;
        public const int GL_UNSIGNED_INT = 0x00001405;
        public const int GL_DEPTH_CLEAR_VALUE = 0x00000b73;
        public const int GL_PIXEL_MAP_R_TO_R_SIZE = 0x00000cb6;
        public const int GL_MAP1_VERTEX_ATTRIB7_4_NV = 0x00008667;
        public const int GL_FLOAT_MAT4_ARB = 0x00008b5c;
        public const int GL_UNPACK_SUBSAMPLE_RATE_SGIX = 0x000085a1;
        public const int GL_DSDT_MAG_INTENSITY_NV = 0x000086dc;
        public const int GL_YCRCBA_SGIX = 0x00008319;
        public const int GL_RESTART_SUN = 0x00000001;
        public const int GL_TEXTURE_COORD_ARRAY_STRIDE = 0x0000808a;
        public const int GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 0x00008409;
        public const int GL_TEXTURE_BINDING_RECTANGLE_ARB = 0x000084f6;
        public const int GL_OUTPUT_TEXTURE_COORD6_EXT = 0x000087a3;
        public const int GL_CONVOLUTION_FORMAT_EXT = 0x00008017;
        public const int GL_INDEX_TEST_EXT = 0x000081b5;
        public const int GL_MODELVIEW_PROJECTION_NV = 0x00008629;
        public const int GL_OUTPUT_TEXTURE_COORD19_EXT = 0x000087b0;
        public const int GL_RENDER = 0x00001c00;
        public const int GL_MODELVIEW_STACK_DEPTH = 0x00000ba3;
        public const int GL_POINT_BIT = 0x00000002;
        public const int GL_ADD_SIGNED_EXT = 0x00008574;
        public const int GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 0x0000840b;
        public const int GL_COMBINER_SUM_OUTPUT_NV = 0x0000854c;
        public const int GL_COLOR_TABLE_SCALE_SGI = 0x000080d6;
        public const int GL_VERTEX_ARRAY_LIST_IBM = 0x0001929e;
        public const int GL_SPARE0_NV = 0x0000852e;
        public const int GL_DRAW_BUFFER8_ATI = 0x0000882d;
        public const int GL_FOG_COORDINATE_ARRAY_POINTER = 0x00008456;
        public const int GL_FEEDBACK_BUFFER_SIZE = 0x00000df1;
        public const int GL_INDEX_ARRAY_EXT = 0x00008077;
        public const int GL_PIXEL_TEX_GEN_SGIX = 0x00008139;
        public const int GL_PIXEL_COUNT_NV = 0x00008866;
        public const int GL_SOURCE0_RGB_EXT = 0x00008580;
        public const int GL_BLUE_MAX_CLAMP_INGR = 0x00008566;
        public const int GL_SECONDARY_COLOR_ARRAY_TYPE = 0x0000845b;
        public const int GL_CONSERVE_MEMORY_HINT_PGI = 0x0001a1fd;
        public const int GL_MODELVIEW4_ARB = 0x00008724;
        public const int GL_FOG_COORDINATE_ARRAY_POINTER_EXT = 0x00008456;
        public const int GL_CURRENT_RASTER_DISTANCE = 0x00000b09;
        public const int GL_CLIP_NEAR_HINT_PGI = 0x0001a220;
        public const int GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 0x00008175;
        public const int GL_COPY_PIXEL_TOKEN = 0x00000706;
        public const int GL_DEPTH_TEXTURE_MODE = 0x0000884b;
        public const int GL_ARRAY_BUFFER_BINDING = 0x00008894;
        public const int GL_MATRIX12_ARB = 0x000088cc;
        public const int GL_POINT_SMOOTH = 0x00000b10;
        public const int GL_OUTPUT_TEXTURE_COORD24_EXT = 0x000087b5;
        public const int GL_LOCAL_CONSTANT_VALUE_EXT = 0x000087ec;
        public const int GL_GEOMETRY_DEFORMATION_BIT_SGIX = 0x00000002;
        public const int GL_OP_POWER_EXT = 0x00008793;
        public const int GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x0000880e;
        public const int GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x000088a3;
        public const int GL_PERTURB_EXT = 0x000085ae;
        public const int GL_ADD_ATI = 0x00008963;
        public const int GL_STENCIL_INDEX_EXT = 0x00008d45;
        public const int GL_STEREO = 0x00000c33;
        public const int GL_PIXEL_MAP_G_TO_G_SIZE = 0x00000cb7;
        public const int GL_MULTISAMPLE_ARB = 0x0000809d;
        public const int GL_TEXTURE_CUBE_MAP = 0x00008513;
        public const int GL_REG_2_ATI = 0x00008923;
        public const int GL_TEXTURE13_ARB = 0x000084cd;
        public const int GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = 0x00008895;
        public const int GL_EDGE_FLAG_ARRAY_EXT = 0x00008079;
        public const int GL_OR = 0x00001507;
        public const int GL_UNSIGNED_BYTE = 0x00001401;
        public const int GL_DSDT8_NV = 0x00008709;
        public const int GL_ELEMENT_ARRAY_POINTER_ATI = 0x0000876a;
        public const int GL_COLOR_ALPHA_PAIRING_ATI = 0x00008975;
        public const int GL_QUAD_STRIP = 0x00000008;
        public const int GL_SEPARATE_SPECULAR_COLOR = 0x000081fa;
        public const int GL_COLOR_TABLE_INTENSITY_SIZE_SGI = 0x000080df;
        public const int GL_ASYNC_HISTOGRAM_SGIX = 0x0000832c;
        public const int GL_MAX_VARYING_FLOATS_ARB = 0x00008b4b;
        public const int GL_VERTEX_ARRAY_POINTER = 0x0000808e;
        public const int GL_MODELVIEW1_ARB = 0x0000850a;
        public const int GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = 0x00008848;
        public const int GL_INDEX_ARRAY_BUFFER_BINDING = 0x00008899;
        public const int GL_STORAGE_SHARED_APPLE = 0x000085bf;
        public const int GL_IMAGE_ROTATE_ORIGIN_X_HP = 0x0000815a;
        public const int GL_COLOR_TABLE_BIAS_SGI = 0x000080d7;
        public const int GL_POINT_SPRITE_R_MODE_NV = 0x00008863;
        public const int GL_ALPHA_TEST_REF = 0x00000bc2;
        public const int GL_COMPRESSED_LUMINANCE = 0x000084ea;
        public const int GL_PIXEL_MAP_B_TO_B_SIZE = 0x00000cb8;
        public const int GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 0x00008841;
        public const int GL_MATRIX6_NV = 0x00008636;
        public const int GL_UNSIGNED_INT_10_10_10_2_EXT = 0x00008036;
        public const int GL_TEXTURE_LOD_BIAS_R_SGIX = 0x00008190;
        public const int GL_OBJECT_COMPILE_STATUS_ARB = 0x00008b81;
        public const int GL_TEXTURE_NORMAL_EXT = 0x000085af;
        public const int GL_VERTEX_SOURCE_ATI = 0x00008774;
        public const int GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 0x000080f0;
        public const int GL_POLYGON_OFFSET_FACTOR_EXT = 0x00008038;
        public const int GL_MODELVIEW11_ARB = 0x0000872b;
        public const int GL_MAP1_VERTEX_ATTRIB15_4_NV = 0x0000866f;
        public const int GL_DRAW_BUFFER2_ARB = 0x00008827;
        public const int GL_DUAL_INTENSITY8_SGIS = 0x00008119;
        public const int GL_DEPTH_WRITEMASK = 0x00000b72;
        public const int GL_COLOR_TABLE_GREEN_SIZE = 0x000080db;
        public const int GL_FLOAT_VEC2 = 0x00008b50;
        public const int GL_QUADS = 0x00000007;
        public const int GL_TEXTURE_CLIPMAP_FRAME_SGIX = 0x00008172;
        public const int GL_COMBINE_ALPHA_ARB = 0x00008572;
        public const int GL_DOT3_RGB_ARB = 0x000086ae;
        public const int GL_OFFSET_TEXTURE_2D_SCALE_NV = 0x000086e2;
        public const int GL_CURRENT_MATRIX_STACK_DEPTH_NV = 0x00008640;
        public const int GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 0x0000880d;
        public const int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 0x00008cd4;
        public const int GL_BLEND_COLOR = 0x00008005;
        public const int GL_FRAGMENT_DEPTH_EXT = 0x00008452;
        public const int GL_TEXTURE_WRAP_R_EXT = 0x00008072;
        public const int GL_ELEMENT_ARRAY_ATI = 0x00008768;
        public const int GL_CON_16_ATI = 0x00008951;
        public const int GL_MODELVIEW24_ARB = 0x00008738;
        public const int GL_OPERAND1_ALPHA_ARB = 0x00008599;
        public const int GL_TEXTURE_PRIORITY_EXT = 0x00008066;
        public const int GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = 0x00008b88;
        public const int GL_4PASS_1_EXT = 0x000080a5;
        public const int GL_CONVOLUTION_2D_EXT = 0x00008011;
        public const int GL_CON_11_ATI = 0x0000894c;
        public const int GL_SGIX_texture_coordinate_clamp = 0x00000001;
        public const int GL_422_REV_AVERAGE_EXT = 0x000080cf;
        public const int GL_TRANSPOSE_COLOR_MATRIX = 0x000084e6;
        public const int GL_VERTEX_PROGRAM_TWO_SIDE = 0x00008643;
        public const int GL_IR_INSTRUMENT1_SGIX = 0x0000817f;
        public const int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 0x00008518;
        public const int GL_PIXEL_UNPACK_BUFFER_ARB = 0x000088ec;
        public const int GL_ALPHA_BIAS = 0x00000d1d;
        public const int GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 0x000087cd;
        public const int GL_VERTEX_ATTRIB_ARRAY3_NV = 0x00008653;
        public const int GL_PIXEL_TRANSFORM_2D_EXT = 0x00008330;
        public const int GL_DUAL_INTENSITY12_SGIS = 0x0000811a;
        public const int GL_BOOL = 0x00008b56;
        public const int GL_LUMINANCE_FLOAT32_ATI = 0x00008818;
        public const int GL_ALIASED_POINT_SIZE_RANGE = 0x0000846d;
        public const int GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 0x000088f4;
        public const int GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = 0x0000887c;
        public const int GL_EQUAL = 0x00000202;
        public const int GL_SHADOW_AMBIENT_SGIX = 0x000080bf;
        public const int GL_CON_3_ATI = 0x00008944;
        public const int GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x00008516;
        public const int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x00008518;
        public const int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x0000851a;
        public const int GL_COMPRESSED_ALPHA = 0x000084e9;
        public const int GL_TRANSPOSE_TEXTURE_MATRIX = 0x000084e5;
        public const int GL_DEPTH_BITS = 0x00000d56;
        public const int GL_COLOR_ARRAY_STRIDE_EXT = 0x00008083;
        public const int GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 0x000087cb;
        public const int GL_SAMPLER_2D_SHADOW = 0x00008b62;
        public const int GL_COLOR_TABLE_LUMINANCE_SIZE = 0x000080de;
        public const int GL_RGB_S3TC = 0x000083a0;
        public const int GL_POINTS = 0x00000000;
        public const int GL_BLEND_EQUATION_RGB_EXT = 0x00008009;
        public const int GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 0x000192ae;
        public const int GL_OBJECT_TYPE_ARB = 0x00008b4e;
        public const int GL_CONVOLUTION_FILTER_SCALE_EXT = 0x00008014;
        public const int GL_SGIX_texture_multi_buffer = 0x00000001;
        public const int GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x0000880a;
        public const int GL_SECONDARY_COLOR_ARRAY = 0x0000845e;
        public const int GL_NORMAL_BIT_PGI = 0x08000000;
        public const int GL_MAP_ATTRIB_U_ORDER_NV = 0x000086c3;
        public const int GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = 0x000083f8;
        public const int GL_CON_17_ATI = 0x00008952;
        public const int GL_COLOR_LOGIC_OP = 0x00000bf2;
        public const int GL_FOG_COORD = 0x00008451;
        public const int GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x00008337;
        public const int GL_SHADE_MODEL = 0x00000b54;
        public const int GL_CONVOLUTION_1D = 0x00008010;
        public const int GL_REPLICATE_BORDER_HP = 0x00008153;
        public const int GL_OUTPUT_TEXTURE_COORD29_EXT = 0x000087ba;
        public const int GL_SIGNED_INTENSITY_NV = 0x00008707;
        public const int GL_TEXTURE_BINDING_RECTANGLE_NV = 0x000084f6;
        public const int GL_WRITE_ONLY_ARB = 0x000088b9;
        public const int GL_TEXTURE1_ARB = 0x000084c1;
        public const int GL_TEXTURE_LOD_BIAS_EXT = 0x00008501;
        public const int GL_RGB12 = 0x00008053;
        public const int GL_RGB10 = 0x00008052;
        public const int GL_RGB16 = 0x00008054;
        public const int GL_PIXEL_TILE_CACHE_SIZE_SGIX = 0x00008145;
        public const int GL_PIXEL_MAP_G_TO_G = 0x00000c77;
        public const int GL_TRANSPOSE_CURRENT_MATRIX_ARB = 0x000088b7;
        public const int GL_CONSTANT_ALPHA = 0x00008003;
        public const int GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = 0x0000845b;
        public const int GL_EYE_PLANE = 0x00002502;
        public const int GL_MINMAX_EXT = 0x0000802e;
        public const int GL_TEXTURE_2D_BINDING_EXT = 0x00008069;
        public const int GL_UNSIGNED_SHORT_8_8_REV_MESA = 0x000085bb;
        public const int GL_BUFFER_ACCESS = 0x000088bb;
        public const int GL_COLOR_ARRAY_SIZE_EXT = 0x00008081;
        public const int GL_CND0_ATI = 0x0000896b;
        public const int GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 0x000080b7;
        public const int GL_MODELVIEW10_ARB = 0x0000872a;
        public const int GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 0x0000840a;
        public const int GL_DRAW_BUFFER0_ATI = 0x00008825;
        public const int GL_FRAGMENT_PROGRAM_ARB = 0x00008804;
        public const int GL_EVAL_VERTEX_ATTRIB4_NV = 0x000086ca;
        public const int GL_SIGNED_NEGATE_NV = 0x0000853d;
        public const int GL_POST_COLOR_MATRIX_COLOR_TABLE = 0x000080d2;
        public const int GL_TEXTURE_MATRIX = 0x00000ba8;
        public const int GL_LOCAL_EXT = 0x000087c4;
        public const int GL_INDEX_MATERIAL_EXT = 0x000081b8;
        public const int GL_COLOR3_BIT_PGI = 0x00010000;
        public const int GL_RESAMPLE_ZERO_FILL_SGIX = 0x0000842f;
        public const int GL_DRAW_BUFFER11_ARB = 0x00008830;
        public const int GL_UNSIGNED_SHORT_5_6_5_REV_EXT = 0x00008364;
        public const int GL_VERTEX_ATTRIB_ARRAY1_NV = 0x00008651;
        public const int GL_BUFFER_USAGE_ARB = 0x00008765;
        public const int GL_FOG_COORD_ARRAY_POINTER = 0x00008456;
        public const int GL_MODELVIEW22_ARB = 0x00008736;
        public const int GL_DRAW_BUFFER12_ATI = 0x00008831;
        public const int GL_MAP2_VERTEX_ATTRIB12_4_NV = 0x0000867c;
        public const int GL_SHININESS = 0x00001601;
        public const int GL_PROGRAM_ERROR_STRING_NV = 0x00008874;
        public const int GL_OPERAND3_RGB_NV = 0x00008593;
        public const int GL_2PASS_0_EXT = 0x000080a2;
        public const int GL_MAP1_INDEX = 0x00000d91;
        public const int GL_WEIGHT_ARRAY_BUFFER_BINDING = 0x0000889e;
        public const int GL_RGBA8_EXT = 0x00008058;
        public const int GL_LINEAR_SHARPEN_ALPHA_SGIS = 0x000080ae;
        public const int GL_PRIMARY_COLOR_ARB = 0x00008577;
        public const int GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 0x00008403;
        public const int GL_CLAMP_TO_BORDER_ARB = 0x0000812d;
        public const int GL_STENCIL_PASS_DEPTH_FAIL = 0x00000b95;
        public const int GL_ELEMENT_ARRAY_TYPE_ATI = 0x00008769;
        public const int GL_TEXTURE_LIGHTING_MODE_HP = 0x00008167;
        public const int GL_ALPHA12_EXT = 0x0000803d;
        public const int GL_TEXTURE_COMPARE_OPERATOR_SGIX = 0x0000819b;
        public const int GL_SEPARABLE_2D_EXT = 0x00008012;
        public const int GL_INVERSE_TRANSPOSE_NV = 0x0000862d;
        public const int GL_STATIC_COPY_ARB = 0x000088e6;
        public const int GL_SELECT = 0x00001c02;
        public const int GL_3D = 0x00000601;
        public const int GL_VERTEX_ATTRIB_ARRAY12_NV = 0x0000865c;
        public const int GL_DOT2_ADD_ATI = 0x0000896c;
        public const int GL_SCREEN_COORDINATES_REND = 0x00008490;
        public const int GL_MAP1_VERTEX_ATTRIB11_4_NV = 0x0000866b;
        public const int GL_TEXTURE_GEQUAL_R_SGIX = 0x0000819d;
        public const int GL_MAX_PROJECTION_STACK_DEPTH = 0x00000d38;
        public const int GL_MAX_ATTRIB_STACK_DEPTH = 0x00000d35;
        public const int GL_SAMPLER_3D = 0x00008b5f;
        public const int GL_INT_VEC2_ARB = 0x00008b53;
        public const int GL_TEXTURE8_ARB = 0x000084c8;
        public const int GL_OP_DOT4_EXT = 0x00008785;
        public const int GL_HISTOGRAM_EXT = 0x00008024;
        public const int GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = 0x0001a203;
        public const int GL_OBJECT_LINEAR = 0x00002401;
        public const int GL_DETAIL_TEXTURE_2D_SGIS = 0x00008095;
        public const int GL_ALPHA_SCALE = 0x00000d1c;
        public const int GL_OFFSET_TEXTURE_RECTANGLE_NV = 0x0000864c;
        public const int GL_TEXTURE_COMPARE_SGIX = 0x0000819a;
        public const int GL_BUMP_ROT_MATRIX_SIZE_ATI = 0x00008776;
        public const int GL_ONE_MINUS_CONSTANT_COLOR = 0x00008002;
        public const int GL_BIAS_BIT_ATI = 0x00000008;
        public const int GL_NORMAL_ARRAY_POINTER = 0x0000808f;
        public const int GL_DUAL_INTENSITY16_SGIS = 0x0000811b;
        public const int GL_MINMAX_SINK_EXT = 0x00008030;
        public const int GL_DRAW_BUFFER10_ATI = 0x0000882f;
        public const int GL_BLEND_EQUATION_ALPHA_EXT = 0x0000883d;
        public const int GL_SCALE_BY_ONE_HALF_NV = 0x00008540;
        public const int GL_SPRITE_TRANSLATION_SGIX = 0x0000814b;
        public const int GL_3D_COLOR = 0x00000602;
        public const int GL_STENCIL = 0x00001802;
        public const int GL_COLOR_SUM_ARB = 0x00008458;
        public const int GL_QUERY_COUNTER_BITS = 0x00008864;
        public const int GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 0x00008624;
        public const int GL_PROGRAM_NATIVE_PARAMETERS_ARB = 0x000088aa;
        public const int GL_DRAW_BUFFER15_ARB = 0x00008834;
        public const int GL_STENCIL_INDEX4_EXT = 0x00008d47;
        public const int GL_CONSTANT_COLOR_EXT = 0x00008001;
        public const int GL_CURRENT_PALETTE_MATRIX_ARB = 0x00008843;
        public const int GL_CURRENT_VERTEX_WEIGHT_EXT = 0x0000850b;
        public const int GL_LUMINANCE8_EXT = 0x00008040;
        public const int GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT = 0x00008515;
        public const int GL_POINT = 0x00001b00;
        public const int GL_SINGLE_COLOR = 0x000081f9;
        public const int GL_SELECTION_BUFFER_POINTER = 0x00000df3;
        public const int GL_POINT_SIZE_MAX_EXT = 0x00008127;
        public const int GL_MAP1_VERTEX_ATTRIB13_4_NV = 0x0000866d;
        public const int GL_TEXTURE_COORD_ARRAY_SIZE = 0x00008088;
        public const int GL_COMP_BIT_ATI = 0x00000002;
        public const int GL_LIGHTING_BIT = 0x00000040;
        public const int GL_TEXTURE_1D = 0x00000de0;
        public const int GL_COLOR_ATTACHMENT8_EXT = 0x00008ce8;
        public const int GL_DOT_PRODUCT_NV = 0x000086ec;
        public const int GL_EVAL_VERTEX_ATTRIB3_NV = 0x000086c9;
        public const int GL_COMPRESSED_RGBA_ARB = 0x000084ee;
        public const int GL_MAX_3D_TEXTURE_SIZE = 0x00008073;
        public const int GL_TEXTURE_RECTANGLE_NV = 0x000084f5;
        public const int GL_TEXTURE_COMPRESSED_ARB = 0x000086a1;
        public const int GL_TEXTURE_BINDING_CUBE_MAP = 0x00008514;
        public const int GL_SECONDARY_COLOR_ARRAY_EXT = 0x0000845e;
        public const int GL_COMBINE_RGB_EXT = 0x00008571;
        public const int GL_GREEN_SCALE = 0x00000d18;
        public const int GL_SOURCE2_RGB_ARB = 0x00008582;
        public const int GL_BLUE_BITS = 0x00000d54;
        public const int GL_EVAL_VERTEX_ATTRIB8_NV = 0x000086ce;
        public const int GL_DOT3_RGBA = 0x000086af;
        public const int GL_SAMPLER_1D = 0x00008b5d;
        public const int GL_LINEAR_DETAIL_COLOR_SGIS = 0x00008099;
        public const int GL_MATRIX5_ARB = 0x000088c5;
        public const int GL_DRAW_BUFFER4_ATI = 0x00008829;
        public const int GL_ELEMENT_ARRAY_POINTER_APPLE = 0x0000876a;
        public const int GL_EYE_LINEAR = 0x00002400;
        public const int GL_REG_7_ATI = 0x00008928;
        public const int GL_LUMINANCE_FLOAT16_ATI = 0x0000881e;
        public const int GL_EVAL_VERTEX_ATTRIB1_NV = 0x000086c7;
        public const int GL_NEGATE_BIT_ATI = 0x00000004;
        public const int GL_RGBA_FLOAT16_ATI = 0x0000881a;
        public const int GL_READ_WRITE = 0x000088ba;
        public const int GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x00008645;
        public const int GL_YCRCB_444_SGIX = 0x000081bc;
        public const int GL_ALLOW_DRAW_MEM_HINT_PGI = 0x0001a211;
        public const int GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x00008624;
        public const int GL_LINES = 0x00000001;
        public const int GL_PIXEL_MAP_S_TO_S = 0x00000c71;
        public const int GL_SAMPLER_1D_ARB = 0x00008b5d;
        public const int GL_OP_EXP_BASE_2_EXT = 0x00008791;
        public const int GL_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x00008805;
        public const int GL_GREEN = 0x00001904;
        public const int GL_COLOR_SUM_EXT = 0x00008458;
        public const int GL_TRACK_MATRIX_TRANSFORM_NV = 0x00008649;
        public const int GL_POST_CONVOLUTION_BLUE_BIAS = 0x00008022;
        public const int GL_DECR = 0x00001e03;
        public const int GL_TEXTURE_3D_BINDING_EXT = 0x0000806a;
        public const int GL_MATRIX3_NV = 0x00008633;
        public const int GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = 0x0000809e;
        public const int GL_DEPTH_TEXTURE_MODE_ARB = 0x0000884b;
        public const int GL_DOT3_RGB = 0x000086ae;
        public const int GL_XOR = 0x00001506;
        public const int GL_MULTISAMPLE_BIT_ARB = 0x20000000;
        public const int GL_VERTEX_PROGRAM_TWO_SIDE_NV = 0x00008643;
        public const int GL_REG_17_ATI = 0x00008932;
        public const int GL_Q = 0x00002003;
        public const int GL_MAX_ASYNC_DRAW_PIXELS_SGIX = 0x00008360;
        public const int GL_TEXTURE_ALPHA_SIZE = 0x0000805f;
        public const int GL_COMPILE = 0x00001300;
        public const int GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 0x00008856;
        public const int GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 0x000088ab;
        public const int GL_POINT_SMOOTH_HINT = 0x00000c51;
        public const int GL_SGIS_generate_mipmap = 0x00000001;
        public const int GL_PIXEL_MODE_BIT = 0x00000020;
        public const int GL_OUTPUT_TEXTURE_COORD4_EXT = 0x000087a1;
        public const int GL_COLOR_TABLE_INTENSITY_SIZE = 0x000080df;
        public const int GL_VERTEX_SHADER_INVARIANTS_EXT = 0x000087d1;
        public const int GL_COMBINER_COMPONENT_USAGE_NV = 0x00008544;
        public const int GL_SWIZZLE_STRQ_ATI = 0x0000897a;
        public const int GL_CON_8_ATI = 0x00008949;
        public const int GL_RGBA2_EXT = 0x00008055;
        public const int GL_POST_COLOR_MATRIX_RED_BIAS = 0x000080b8;
        public const int GL_MATRIX5_NV = 0x00008635;
        public const int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = 0x00008518;
        public const int GL_POLYGON_OFFSET_EXT = 0x00008037;
        public const int GL_PIXEL_GROUP_COLOR_SGIS = 0x00008356;
        public const int GL_DOT_PRODUCT_TEXTURE_2D_NV = 0x000086ee;
        public const int GL_SMOOTH = 0x00001d01;
        public const int GL_POLYGON_OFFSET_LINE = 0x00002a02;
        public const int GL_TEXTURE_MIN_LOD = 0x0000813a;
        public const int GL_BGRA = 0x000080e1;
        public const int GL_PHONG_HINT_WIN = 0x000080eb;
        public const int GL_FRONT = 0x00000404;
        public const int GL_MATRIX4_NV = 0x00008634;
        public const int GL_8X_BIT_ATI = 0x00000004;
        public const int GL_PROGRAM_ERROR_POSITION_ARB = 0x0000864b;
        public const int GL_SAMPLER_2D_ARB = 0x00008b5e;
        public const int GL_ALPHA_MAX_CLAMP_INGR = 0x00008567;
        public const int GL_R3_G3_B2 = 0x00002a10;
        public const int GL_EDGE_FLAG_ARRAY_STRIDE_EXT = 0x0000808c;
        public const int GL_COLOR_ATTACHMENT14_EXT = 0x00008cee;
        public const int GL_MAP2_VERTEX_ATTRIB5_4_NV = 0x00008675;
        public const int GL_INTENSITY4_EXT = 0x0000804a;
        public const int GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = 0x0000812e;
        public const int GL_DUAL_TEXTURE_SELECT_SGIS = 0x00008124;
        public const int GL_TEXTURE_ALPHA_SIZE_EXT = 0x0000805f;
        public const int GL_GREEN_BITS = 0x00000d53;
        public const int GL_TEXTURE_1D_BINDING_EXT = 0x00008068;
        public const int GL_RENDER_MODE = 0x00000c40;
        public const int GL_OUTPUT_TEXTURE_COORD17_EXT = 0x000087ae;
        public const int GL_QUAD_ALPHA8_SGIS = 0x0000811f;
        public const int GL_DRAW_BUFFER15_ATI = 0x00008834;
        public const int GL_UNPACK_IMAGE_HEIGHT_EXT = 0x0000806e;
        public const int GL_EVAL_VERTEX_ATTRIB7_NV = 0x000086cd;
        public const int GL_VERTEX_ATTRIB_ARRAY11_NV = 0x0000865b;
        public const int GL_LIGHT_MODEL_TWO_SIDE = 0x00000b52;
        public const int GL_2X_BIT_ATI = 0x00000001;
        public const int GL_FEEDBACK_BUFFER_TYPE = 0x00000df2;
        public const int GL_OP_NEGATE_EXT = 0x00008783;
        public const int GL_BACK_LEFT = 0x00000402;
        public const int GL_DEPTH_TEST = 0x00000b71;
        public const int GL_REPLACEMENT_CODE_ARRAY_SUN = 0x000085c0;
        public const int GL_TEXTURE_MIN_LOD_SGIS = 0x0000813a;
        public const int GL_POLYGON_OFFSET_UNITS = 0x00002a00;
        public const int GL_MODELVIEW30_ARB = 0x0000873e;
        public const int GL_CLAMP_TO_BORDER = 0x0000812d;
        public const int GL_UNSIGNED_SHORT_5_6_5 = 0x00008363;
        public const int GL_SWIZZLE_STR_DR_ATI = 0x00008978;
        public const int GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = 0x000084f8;
        public const int GL_IMAGE_ROTATE_ORIGIN_Y_HP = 0x0000815b;
        public const int GL_STREAM_READ = 0x000088e1;
        public const int GL_NORMAL_ARRAY_STRIDE = 0x0000807f;
        public const int GL_GENERATE_MIPMAP = 0x00008191;
        public const int GL_VARIABLE_D_NV = 0x00008526;
        public const int GL_SPARE1_NV = 0x0000852f;
        public const int GL_CURRENT_FOG_COORD = 0x00008453;
        public const int GL_TABLE_TOO_LARGE = 0x00008031;
        public const int GL_VERTEX_ATTRIB_ARRAY15_NV = 0x0000865f;
        public const int GL_SIGNED_RGBA_NV = 0x000086fb;
        public const int GL_POST_COLOR_MATRIX_RED_SCALE = 0x000080b4;
        public const int GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x00008895;
        public const int GL_EVAL_2D_NV = 0x000086c0;
        public const int GL_TEXTURE5_ARB = 0x000084c5;
        public const int GL_BACK_RIGHT = 0x00000403;
        public const int GL_MODELVIEW12_ARB = 0x0000872c;
        public const int GL_DEPTH_BIAS = 0x00000d1f;
        public const int GL_LIST_INDEX = 0x00000b33;
        public const int GL_COMBINER_CD_DOT_PRODUCT_NV = 0x00008546;
        public const int GL_MULTISAMPLE_EXT = 0x0000809d;
        public const int GL_MAP_STENCIL = 0x00000d11;
        public const int GL_3D_COLOR_TEXTURE = 0x00000603;
        public const int GL_SCALEBIAS_HINT_SGIX = 0x00008322;
        public const int GL_PIXEL_TEXTURE_SGIS = 0x00008353;
        public const int GL_SGIS_point_line_texgen = 0x00000001;
        public const int GL_RGB_FLOAT16_ATI = 0x0000881b;
        public const int GL_422_AVERAGE_EXT = 0x000080ce;
        public const int GL_CULL_FACE = 0x00000b44;
        public const int GL_COLOR_ATTACHMENT9_EXT = 0x00008ce9;
        public const int GL_SRC0_RGB = 0x00008580;
        public const int GL_NOOP = 0x00001505;
        public const int GL_SUBPIXEL_BITS = 0x00000d50;
        public const int GL_HILO16_NV = 0x000086f8;
        public const int GL_STATIC_READ_ARB = 0x000088e5;
        public const int GL_ONE_EXT = 0x000087de;
        public const int GL_DYNAMIC_COPY = 0x000088ea;
        public const int GL_POLYGON_STIPPLE = 0x00000b42;
        public const int GL_SGIX_shadow = 0x00000001;
        public const int GL_MATRIX24_ARB = 0x000088d8;
        public const int GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX = 0x0000813e;
        public const int GL_REG_25_ATI = 0x0000893a;
        public const int GL_PACK_SKIP_IMAGES_EXT = 0x0000806b;
        public const int GL_MATRIX2_ARB = 0x000088c2;
        public const int GL_CLAMP_VERTEX_COLOR_ARB = 0x0000891a;
        public const int GL_SGIX_texture_add_env = 0x00000001;
        public const int GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002;
        public const int GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x000087f1;
        public const int GL_COMBINER6_NV = 0x00008556;
        public const int GL_MAP1_VERTEX_ATTRIB4_4_NV = 0x00008664;
        public const int GL_CONVOLUTION_FILTER_SCALE = 0x00008014;
        public const int GL_SPHERE_MAP = 0x00002402;
        public const int GL_COMPRESSED_TEXTURE_FORMATS_ARB = 0x000086a3;
        public const int GL_LUMINANCE_ALPHA_FLOAT16_ATI = 0x0000881f;
        public const int GL_LINEAR_MIPMAP_NEAREST = 0x00002701;
        public const int GL_R = 0x00002002;
        public const int GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x000086a0;
        public const int GL_LOGIC_OP_MODE = 0x00000bf0;
        public const int GL_MODELVIEW25_ARB = 0x00008739;
        public const int GL_MODULATE = 0x00002100;
        public const int GL_CULL_VERTEX_OBJECT_POSITION_EXT = 0x000081ac;
        public const int GL_BLUE = 0x00001905;
        public const int GL_SGIX_shadow_ambient = 0x00000001;
        public const int GL_CURRENT_WEIGHT_ARB = 0x000086a8;
        public const int GL_UNSIGNED_INT_10_10_10_2 = 0x00008036;
        public const int GL_MAP1_VERTEX_ATTRIB2_4_NV = 0x00008662;
        public const int GL_BUMP_TARGET_ATI = 0x0000877c;
        public const int GL_CONVOLUTION_BORDER_MODE_EXT = 0x00008013;
        public const int GL_TEXTURE_DEPTH_SIZE = 0x0000884a;
        public const int GL_PROGRAM_FORMAT_ASCII_ARB = 0x00008875;
        public const int GL_MATRIX1_NV = 0x00008631;
        public const int GL_MAX_ASYNC_TEX_IMAGE_SGIX = 0x0000835f;
        public const int GL_PIXEL_MAP_I_TO_B_SIZE = 0x00000cb4;
        public const int GL_WEIGHT_SUM_UNITY_ARB = 0x000086a6;
        public const int GL_RESAMPLE_AVERAGE_OML = 0x00008988;
        public const int GL_DOT3_ATI = 0x00008966;
        public const int GL_CON_15_ATI = 0x00008950;
        public const int GL_OBJECT_DELETE_STATUS_ARB = 0x00008b80;
        public const int GL_OUTPUT_TEXTURE_COORD2_EXT = 0x0000879f;
        public const int GL_PROGRAM_BINDING_ARB = 0x00008677;
        public const int GL_GLOBAL_ALPHA_SUN = 0x000081d9;
        public const int GL_MAX_VERTEX_HINT_PGI = 0x0001a22d;
        public const int GL_MAX_TEXTURE_LOD_BIAS = 0x000084fd;
        public const int GL_CURRENT_RASTER_POSITION = 0x00000b07;
        public const int GL_FRAMEBUFFER_STATUS_ERROR_EXT = 0x00008cde;
        public const int GL_CONVOLUTION_HEIGHT = 0x00008019;
        public const int GL_OUTPUT_TEXTURE_COORD26_EXT = 0x000087b7;
        public const int GL_OFFSET_TEXTURE_SCALE_NV = 0x000086e2;
        public const int GL_OP_SET_GE_EXT = 0x0000878c;
        public const int GL_COMBINER_INPUT_NV = 0x00008542;
        public const int GL_OPERAND1_ALPHA = 0x00008599;
        public const int GL_DRAW_PIXELS_APPLE = 0x00008a0a;
        public const int GL_REG_8_ATI = 0x00008929;
        public const int GL_ELEMENT_ARRAY_BUFFER = 0x00008893;
        public const int GL_TEXTURE_COORD_ARRAY_TYPE_EXT = 0x00008089;
        public const int GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x0000889a;
        public const int GL_PROXY_TEXTURE_2D_EXT = 0x00008064;
        public const int GL_ALIASED_LINE_WIDTH_RANGE = 0x0000846e;
        public const int GL_ALPHA_MAX_SGIX = 0x00008321;
        public const int GL_INFO_LOG_LENGTH = 0x00008b84;
        public const int GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 0x0000864d;
        public const int GL_RIGHT = 0x00000407;
        public const int GL_COLOR_TABLE_BIAS = 0x000080d7;
        public const int GL_FLOAT = 0x00001406;
        public const int GL_TRIANGLE_FAN = 0x00000006;
        public const int GL_TEXTURE_COMPARE_MODE = 0x0000884c;
        public const int GL_DYNAMIC_READ_ARB = 0x000088e9;
        public const int GL_SCALE_BY_TWO_NV = 0x0000853e;
        public const int GL_TEXTURE_2D = 0x00000de1;
        public const int GL_SUB_ATI = 0x00008965;
        public const int GL_TEXTURE_RED_TYPE_ARB = 0x00008c10;
        public const int GL_GREEN_MAX_CLAMP_INGR = 0x00008565;
        public const int GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x00008163;
        public const int GL_DSDT8_MAG8_INTENSITY8_NV = 0x0000870b;
        public const int GL_BGR = 0x000080e0;
        public const int GL_RED_BIT_ATI = 0x00000001;
        public const int GL_EXP = 0x00000800;
        public const int GL_COMPRESSED_INTENSITY = 0x000084ec;
        public const int GL_NUM_PASSES_ATI = 0x00008970;
        public const int GL_ALPHA_TEST_FUNC = 0x00000bc1;
        public const int GL_COMBINER3_NV = 0x00008553;
        public const int GL_ALPHA16_EXT = 0x0000803e;
        public const int GL_INVARIANT_DATATYPE_EXT = 0x000087eb;
        public const int GL_TEXTURE_INTENSITY_TYPE_ARB = 0x00008c15;
        public const int GL_VERTEX_ATTRIB_ARRAY2_NV = 0x00008652;
        public const int GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x000087d2;
        public const int GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 0x00008b8a;
        public const int GL_NEAREST_CLIPMAP_LINEAR_SGIX = 0x0000844e;
        public const int GL_POST_CONVOLUTION_RED_SCALE_EXT = 0x0000801c;
        public const int GL_PIXEL_MAP_B_TO_B = 0x00000c78;
        public const int GL_UNPACK_SKIP_VOLUMES_SGIS = 0x00008132;
        public const int GL_VERTEX_STREAM6_ATI = 0x00008772;
        public const int GL_COMBINE_ALPHA_EXT = 0x00008572;
        public const int GL_ARRAY_BUFFER = 0x00008892;
        public const int GL_MODELVIEW23_ARB = 0x00008737;
        public const int GL_FOG_COORDINATE_ARRAY_TYPE = 0x00008454;
        public const int GL_CURRENT_QUERY_ARB = 0x00008865;
        public const int GL_EYE_DISTANCE_TO_POINT_SGIS = 0x000081f0;
        public const int GL_PIXEL_SUBSAMPLE_4242_SGIX = 0x000085a4;
        public const int GL_TEXTURE_GREEN_SIZE_EXT = 0x0000805d;
        public const int GL_FRAGMENT_PROGRAM_NV = 0x00008870;
        public const int GL_ONE_MINUS_DST_ALPHA = 0x00000305;
        public const int GL_SAMPLE_ALPHA_TO_MASK_SGIS = 0x0000809e;
        public const int GL_COMBINER1_NV = 0x00008551;
        public const int GL_RGB_SCALE_EXT = 0x00008573;
        public const int GL_MODELVIEW_MATRIX = 0x00000ba6;
        public const int GL_TEXTURE31 = 0x000084df;
        public const int GL_TEXTURE30 = 0x000084de;
        public const int GL_RETURN = 0x00000102;
        public const int GL_MATRIX3_ARB = 0x000088c3;
        public const int GL_VARIANT_ARRAY_POINTER_EXT = 0x000087e9;
        public const int GL_DYNAMIC_READ = 0x000088e9;
        public const int GL_VERTEX_SHADER_EXT = 0x00008780;
        public const int GL_DSDT_MAG_NV = 0x000086f6;
        public const int GL_COMBINER5_NV = 0x00008555;
        public const int GL_E_TIMES_F_NV = 0x00008531;
        public const int GL_TEXTURE_BINDING_2D = 0x00008069;
        public const int GL_MODELVIEW28_ARB = 0x0000873c;
        public const int GL_TEXTURE_COORD_ARRAY_EXT = 0x00008078;
        public const int GL_MAX_ELEMENTS_INDICES_EXT = 0x000080e9;
        public const int GL_NONE = 0x00000000;
        public const int GL_UNSIGNED_INT_2_10_10_10_REV_EXT = 0x00008368;
        public const int GL_LINEAR_DETAIL_SGIS = 0x00008097;
        public const int GL_TEXTURE_GEN_T = 0x00000c61;
        public const int GL_PROXY_TEXTURE_RECTANGLE_NV = 0x000084f7;
        public const int GL_TEXTURE_FILTER4_SIZE_SGIS = 0x00008147;
        public const int GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x0000889f;
        public const int GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX = 0x0000818a;
        public const int GL_TEXTURE_GEN_R = 0x00000c62;
        public const int GL_W_EXT = 0x000087d8;
        public const int GL_FILL = 0x00001b02;
        public const int GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x000084fe;
        public const int GL_SCISSOR_BOX = 0x00000c10;
        public const int GL_READ_WRITE_ARB = 0x000088ba;
        public const int GL_MAX_PIXEL_MAP_TABLE = 0x00000d34;
        public const int GL_FLOAT_MAT2 = 0x00008b5a;
        public const int GL_FLOAT_MAT4 = 0x00008b5c;
        public const int GL_DUAL_LUMINANCE_ALPHA8_SGIS = 0x0000811d;
        public const int GL_S = 0x00002000;
        public const int GL_FLOAT_VEC2_ARB = 0x00008b50;
        public const int GL_MAP2_VERTEX_ATTRIB13_4_NV = 0x0000867d;
        public const int GL_TEXTURE_RED_SIZE_EXT = 0x0000805c;
        public const int GL_PACK_IMAGE_DEPTH_SGIS = 0x00008131;
        public const int GL_WEIGHT_ARRAY_ARB = 0x000086ad;
        public const int GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x0000889c;
        public const int GL_TEXTURE_COORD_ARRAY_POINTER_EXT = 0x00008092;
        public const int GL_INDEX_ARRAY_TYPE = 0x00008085;
        public const int GL_FRAGMENT_LIGHT0_SGIX = 0x0000840c;
        public const int GL_ONE_MINUS_SRC_COLOR = 0x00000301;
        public const int GL_TEXTURE_CUBE_MAP_EXT = 0x00008513;
        public const int GL_PREVIOUS_TEXTURE_INPUT_NV = 0x000086e4;
        public const int GL_DISTANCE_ATTENUATION_SGIS = 0x00008129;
        public const int GL_REG_13_ATI = 0x0000892e;
        public const int GL_FUNC_SUBTRACT = 0x0000800a;
        public const int GL_MODELVIEW27_ARB = 0x0000873b;
        public const int GL_EYE_POINT_SGIS = 0x000081f4;
        public const int GL_OBJECT_ATTACHED_OBJECTS_ARB = 0x00008b85;
        public const int GL_SPRITE_MODE_SGIX = 0x00008149;
        public const int GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x00008b49;
        public const int GL_FRONT_FACE = 0x00000b46;
        public const int GL_MIRRORED_REPEAT = 0x00008370;
        public const int GL_VERTEX_SHADER_LOCALS_EXT = 0x000087d3;
        public const int GL_PROGRAM_PARAMETERS_ARB = 0x000088a8;
        public const int GL_SAMPLER_2D_RECT_SHADOW_ARB = 0x00008b64;
        public const int GL_SRC_ALPHA = 0x00000302;
        public const int GL_OBJECT_BUFFER_SIZE_ATI = 0x00008764;
        public const int GL_CONVOLUTION_FORMAT = 0x00008017;
        public const int GL_STENCIL_FUNC = 0x00000b92;
        public const int GL_SIGNED_LUMINANCE8_NV = 0x00008702;
        public const int GL_DEPTH_ATTACHMENT_EXT = 0x00008d00;
        public const int GL_STENCIL_BACK_FAIL = 0x00008801;
        public const int GL_DIFFUSE = 0x00001201;
        public const int GL_COLOR_ATTACHMENT3_EXT = 0x00008ce3;
        public const int GL_T2F_C4UB_V3F = 0x00002a29;
        public const int GL_POST_CONVOLUTION_BLUE_SCALE_EXT = 0x0000801e;
        public const int GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = 0x00008625;
        public const int GL_COMBINER0_NV = 0x00008550;
        public const int GL_VERTEX_ATTRIB_ARRAY13_NV = 0x0000865d;
        public const int GL_RESCALE_NORMAL_EXT = 0x0000803a;
        public const int GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = 0x00008023;
        public const int GL_LIGHTING = 0x00000b50;
        public const int GL_V2F = 0x00002a20;
        public const int GL_PIXEL_MAP_A_TO_A = 0x00000c79;
        public const int GL_SAMPLER_1D_SHADOW = 0x00008b61;
        public const int GL_CURRENT_COLOR = 0x00000b00;
        public const int GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = 0x000080b6;
        public const int GL_UNSIGNED_INVERT_NV = 0x00008537;
        public const int GL_COMPRESSED_ALPHA_ARB = 0x000084e9;
        public const int GL_TEXTURE_CUBE_MAP_ARB = 0x00008513;
        public const int GL_CURRENT_VERTEX_EXT = 0x000087e2;
        public const int GL_CON_23_ATI = 0x00008958;
        public const int GL_ELEMENT_ARRAY_TYPE_APPLE = 0x00008769;
        public const int GL_MULTISAMPLE_FILTER_HINT_NV = 0x00008534;
        public const int GL_SGIX_depth_texture = 0x00000001;
        public const int GL_ARRAY_BUFFER_ARB = 0x00008892;
        public const int GL_FRAGMENT_PROGRAM_BINDING_NV = 0x00008873;
        public const int GL_RENDERBUFFER_EXT = 0x00008d41;
        public const int GL_CON_24_ATI = 0x00008959;
        public const int GL_OUTPUT_TEXTURE_COORD9_EXT = 0x000087a6;
        public const int GL_INDEX_BIT_PGI = 0x00080000;
        public const int GL_SEPARABLE_2D = 0x00008012;
        public const int GL_CON_13_ATI = 0x0000894e;
        public const int GL_FOG_COORDINATE_EXT = 0x00008451;
        public const int GL_R1UI_C4UB_V3F_SUN = 0x000085c5;
        public const int GL_FOG_COORDINATE = 0x00008451;
        public const int GL_READ_ONLY = 0x000088b8;
        public const int GL_MATRIX7_ARB = 0x000088c7;
        public const int GL_COLOR_MATERIAL_FACE = 0x00000b55;
        public const int GL_HISTOGRAM_RED_SIZE = 0x00008028;
        public const int GL_TEXTURE_MAX_CLAMP_R_SGIX = 0x0000836b;
        public const int GL_COLOR_INDEX12_EXT = 0x000080e6;
        public const int GL_PROGRAM_TEMPORARIES_ARB = 0x000088a4;
        public const int GL_MAP1_VERTEX_ATTRIB9_4_NV = 0x00008669;
        public const int GL_MODELVIEW3_ARB = 0x00008723;
        public const int GL_OUTPUT_TEXTURE_COORD18_EXT = 0x000087af;
        public const int GL_SRC2_RGB = 0x00008582;
        public const int GL_TEXTURE_3D = 0x0000806f;
        public const int GL_REG_10_ATI = 0x0000892b;
        public const int GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 0x000088b1;
        public const int GL_EVAL_FRACTIONAL_TESSELLATION_NV = 0x000086c5;
        public const int GL_COMPRESSED_RGB = 0x000084ed;
        public const int GL_CONSTANT_COLOR0_NV = 0x0000852a;
        public const int GL_TEXTURE_4DSIZE_SGIS = 0x00008136;
        public const int GL_ASYNC_TEX_IMAGE_SGIX = 0x0000835c;
        public const int GL_STENCIL_BACK_REF = 0x00008ca3;
        public const int GL_COLOR_ARRAY_SIZE = 0x00008081;
        public const int GL_NUM_INSTRUCTIONS_TOTAL_ATI = 0x00008972;
        public const int GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = 0x0000845d;
        public const int GL_WRITE_ONLY = 0x000088b9;
        public const int GL_TEXTURE_ENV = 0x00002300;
        public const int GL_POST_CONVOLUTION_GREEN_BIAS_EXT = 0x00008021;
        public const int GL_NUM_GENERAL_COMBINERS_NV = 0x0000854e;
        public const int GL_MATRIX0_ARB = 0x000088c0;
        public const int GL_ALWAYS = 0x00000207;
        public const int GL_MAX_TEXTURE_SIZE = 0x00000d33;
        public const int GL_COLOR_MATRIX_SGI = 0x000080b1;
        public const int GL_ASYNC_READ_PIXELS_SGIX = 0x0000835e;
        public const int GL_TEXTURE_MATERIAL_FACE_EXT = 0x00008351;
        public const int GL_TEXCOORD3_BIT_PGI = 0x40000000;
        public const int GL_LUMINANCE4_ALPHA4_EXT = 0x00008043;
        public const int GL_CON_7_ATI = 0x00008948;
        public const int GL_DRAW_BUFFER13_ATI = 0x00008832;
        public const int GL_TEXTURE_COORD_ARRAY = 0x00008078;
        public const int GL_MAP2_GRID_DOMAIN = 0x00000dd2;
        public const int GL_MAX_TEXTURE_LOD_BIAS_EXT = 0x000084fd;
        public const int GL_FOG_FACTOR_TO_ALPHA_SGIX = 0x0000836f;
        public const int GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = 0x0000887b;
        public const int GL_LUMINANCE4_ALPHA4 = 0x00008043;
        public const int GL_UNSIGNED_SHORT_5_6_5_EXT = 0x00008363;
        public const int GL_LERP_ATI = 0x00008969;
        public const int GL_SHADING_LANGUAGE_VERSION_ARB = 0x00008b8c;
        public const int GL_SUBTRACT = 0x000084e7;
        public const int GL_OUTPUT_TEXTURE_COORD28_EXT = 0x000087b9;
        public const int GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX = 0x00008312;
        public const int GL_TANGENT_ARRAY_TYPE_EXT = 0x0000843e;
        public const int GL_SAMPLE_ALPHA_TO_ONE_EXT = 0x0000809f;
        public const int GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 0x0000817c;
        public const int GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x0000845c;
        public const int GL_HISTOGRAM_GREEN_SIZE = 0x00008029;
        public const int GL_OR_INVERTED = 0x0000150d;
        public const int GL_TEXTURE_SHADER_NV = 0x000086de;
        public const int GL_DRAW_BUFFER1 = 0x00008826;
        public const int GL_DRAW_BUFFER0 = 0x00008825;
        public const int GL_AUTO_NORMAL = 0x00000d80;
        public const int GL_DRAW_BUFFER2 = 0x00008827;
        public const int GL_DRAW_BUFFER5 = 0x0000882a;
        public const int GL_DRAW_BUFFER4 = 0x00008829;
        public const int GL_DRAW_BUFFER7 = 0x0000882c;
        public const int GL_DRAW_BUFFER6 = 0x0000882b;
        public const int GL_DRAW_BUFFER9 = 0x0000882e;
        public const int GL_DRAW_BUFFER8 = 0x0000882d;
        public const int GL_FLOAT_VEC4_ARB = 0x00008b52;
        public const int GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x000080d4;
        public const int GL_VERTEX_CONSISTENT_HINT_PGI = 0x0001a22b;
        public const int GL_VENDOR = 0x00001f00;
        public const int GL_VERTEX_ARRAY_RANGE_POINTER_NV = 0x00008521;
        public const int GL_Y_EXT = 0x000087d6;
        public const int GL_CLEAR = 0x00001500;
        public const int GL_RESAMPLE_ZERO_FILL_OML = 0x00008987;
        public const int GL_TEXTURE_COORD_ARRAY_POINTER = 0x00008092;
        public const int GL_CLAMP_TO_EDGE = 0x0000812f;
        public const int GL_T = 0x00002001;
        public const int GL_OP_ROUND_EXT = 0x00008790;
        public const int GL_SHADOW_ATTENUATION_EXT = 0x0000834e;
        public const int GL_VERTEX4_BIT_PGI = 0x00000008;
        public const int GL_OUTPUT_TEXTURE_COORD20_EXT = 0x000087b1;
        public const int GL_PIXEL_TILE_GRID_DEPTH_SGIX = 0x00008144;
        public const int GL_QUARTER_BIT_ATI = 0x00000010;
        public const int GL_MODELVIEW9_ARB = 0x00008729;
        public const int GL_COLOR_MATERIAL = 0x00000b57;
        public const int GL_HINT_BIT = 0x00008000;
        public const int GL_DOUBLE = 0x0000140a;
        public const int GL_RGB32F_ARB = 0x00008815;
        public const int GL_RED_BIAS = 0x00000d15;
        public const int GL_TEXTURE_MAG_SIZE_NV = 0x0000871f;
        public const int GL_TEXTURE_CLIPMAP_DEPTH_SGIX = 0x00008176;
        public const int GL_SECONDARY_INTERPOLATOR_ATI = 0x0000896d;
        public const int GL_MAP2_NORMAL = 0x00000db2;
        public const int GL_OP_SET_LT_EXT = 0x0000878d;
        public const int GL_REG_28_ATI = 0x0000893d;
        public const int GL_PIXEL_PACK_BUFFER_EXT = 0x000088eb;
        public const int GL_BLUE_BIAS = 0x00000d1b;
        public const int GL_MATRIX9_ARB = 0x000088c9;
        public const int GL_MATRIX30_ARB = 0x000088de;
        public const int GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = 0x0000851e;
        public const int GL_PIXEL_MAP_I_TO_R = 0x00000c72;
        public const int GL_T2F_C4F_N3F_V3F = 0x00002a2c;
        public const int GL_BITMAP = 0x00001a00;
        public const int GL_VALIDATE_STATUS = 0x00008b83;
        public const int GL_PIXEL_MAP_I_TO_I = 0x00000c70;
        public const int GL_PIXEL_MIN_FILTER_EXT = 0x00008332;
        public const int GL_SOURCE2_ALPHA_EXT = 0x0000858a;
        public const int GL_ASYNC_MARKER_SGIX = 0x00008329;
        public const int GL_OBJECT_LINK_STATUS_ARB = 0x00008b82;
        public const int GL_OFFSET_TEXTURE_2D_MATRIX_NV = 0x000086e1;
        public const int GL_PIXEL_MAP_I_TO_A = 0x00000c75;
        public const int GL_PIXEL_MAP_I_TO_B = 0x00000c74;
        public const int GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 0x000080d5;
        public const int GL_PIXEL_MAP_I_TO_G = 0x00000c73;
        public const int GL_ELEMENT_ARRAY_APPLE = 0x00008768;
        public const int GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x00008174;
        public const int GL_TEXTURE3_ARB = 0x000084c3;
        public const int GL_LINEAR_DETAIL_ALPHA_SGIS = 0x00008098;
        public const int GL_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x000080d1;
        public const int GL_MAX_VERTEX_ATTRIBS = 0x00008869;
        public const int GL_LINEAR_ATTENUATION = 0x00001208;
        public const int GL_SAMPLER_2D_SHADOW_ARB = 0x00008b62;
        public const int GL_SGIX_async_histogram = 0x00000001;
        public const int GL_CMYKA_EXT = 0x0000800d;
        public const int GL_MAP1_TEXTURE_COORD_1 = 0x00000d93;
        public const int GL_MAP1_TEXTURE_COORD_2 = 0x00000d94;
        public const int GL_MAP1_TEXTURE_COORD_3 = 0x00000d95;
        public const int GL_VERTEX_PROGRAM_TWO_SIDE_ARB = 0x00008643;
        public const int GL_MODELVIEW0_MATRIX_EXT = 0x00000ba6;
        public const int GL_SAMPLE_MASK_VALUE_EXT = 0x000080aa;
        public const int GL_TEXTURE22 = 0x000084d6;
        public const int GL_TEXTURE23 = 0x000084d7;
        public const int GL_TEXTURE20 = 0x000084d4;
        public const int GL_TEXTURE21 = 0x000084d5;
        public const int GL_TEXTURE26 = 0x000084da;
        public const int GL_TEXTURE27 = 0x000084db;
        public const int GL_TEXTURE24 = 0x000084d8;
        public const int GL_TEXTURE25 = 0x000084d9;
        public const int GL_TEXTURE28 = 0x000084dc;
        public const int GL_TEXTURE29 = 0x000084dd;
        public const int GL_DEPTH_COMPONENT16_SGIX = 0x000081a5;
        public const int GL_PIXEL_TILE_GRID_WIDTH_SGIX = 0x00008142;
        public const int GL_ALPHA_MIN_SGIX = 0x00008320;
        public const int GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x00000b13;
        public const int GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x00008b4d;
        public const int GL_MAT_SHININESS_BIT_PGI = 0x02000000;
        public const int GL_COLOR_INDEX16_EXT = 0x000080e7;
        public const int GL_MAX_TEXTURE_STACK_DEPTH = 0x00000d39;
        public const int GL_COLOR_ATTACHMENT13_EXT = 0x00008ced;
        public const int GL_OBJECT_BUFFER_USAGE_ATI = 0x00008765;
        public const int GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 0x000087f6;
        public const int GL_MAP1_VERTEX_ATTRIB1_4_NV = 0x00008661;
        public const int GL_REG_5_ATI = 0x00008926;
        public const int GL_PIXEL_TILE_CACHE_INCREMENT_SGIX = 0x0000813f;
        public const int GL_VIBRANCE_SCALE_NV = 0x00008713;
        public const int GL_MAP1_NORMAL = 0x00000d92;
        public const int GL_READ_BUFFER = 0x00000c02;
        public const int GL_POLYGON_BIT = 0x00000008;
        public const int GL_DEPTH_CLAMP_NV = 0x0000864f;
        public const int GL_TEXTURE16_ARB = 0x000084d0;
        public const int GL_ONE_MINUS_CONSTANT_ALPHA = 0x00008004;
        public const int GL_PACK_SUBSAMPLE_RATE_SGIX = 0x000085a0;
        public const int GL_MAP2_VERTEX_ATTRIB3_4_NV = 0x00008673;
        public const int GL_TEXTURE_4D_BINDING_SGIS = 0x0000814f;
        public const int GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 0x00008b49;
        public const int GL_DEPTH_BOUNDS_TEST_EXT = 0x00008890;
        public const int GL_QUERY_COUNTER_BITS_ARB = 0x00008864;
        public const int GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 0x00008b87;
        public const int GL_VERTEX_STREAM4_ATI = 0x00008770;
        public const int GL_ALL_COMPLETED_NV = 0x000084f2;
        public const int GL_V3F = 0x00002a21;
        public const int GL_R1UI_T2F_N3F_V3F_SUN = 0x000085ca;
        public const int GL_RED_BITS = 0x00000d52;
        public const int GL_CONSTANT = 0x00008576;
        public const int GL_LINE_STIPPLE_REPEAT = 0x00000b26;
        public const int GL_COLOR_ATTACHMENT10_EXT = 0x00008cea;
        public const int GL_UNSIGNED_SHORT_8_8_REV_APPLE = 0x000085bb;
        public const int GL_SAMPLES_PASSED = 0x00008914;
        public const int GL_COLOR_ARRAY_LIST_STRIDE_IBM = 0x000192aa;
        public const int GL_BINORMAL_ARRAY_TYPE_EXT = 0x00008440;
        public const int GL_COLOR_TABLE_SCALE = 0x000080d6;
        public const int GL_REPLACE = 0x00001e01;
        public const int GL_COMBINER7_NV = 0x00008557;
        public const int GL_422_REV_EXT = 0x000080cd;
        public const int GL_PHONG_WIN = 0x000080ea;
        public const int GL_INVALID_ENUM = 0x00000500;
        public const int GL_EXT_cmyka = 0x00000001;
        public const int GL_DOT_PRODUCT_DEPTH_REPLACE_NV = 0x000086ed;
        public const int GL_PROGRAM_PARAMETER_NV = 0x00008644;
        public const int GL_DEPENDENT_GB_TEXTURE_2D_NV = 0x000086ea;
        public const int GL_TEXTURE_BINDING_3D = 0x0000806a;
        public const int GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = 0x000088ef;
        public const int GL_QUERY_RESULT = 0x00008866;
        public const int GL_LUMINANCE16_EXT = 0x00008042;
        public const int GL_REG_29_ATI = 0x0000893e;
        public const int GL_PER_STAGE_CONSTANTS_NV = 0x00008535;
        public const int GL_POINT_SIZE_MIN_SGIS = 0x00008126;
        public const int GL_DEPTH_FUNC = 0x00000b74;
        public const int GL_NICEST = 0x00001102;
        public const int GL_TEXTURE_GEN_S = 0x00000c60;
        public const int GL_TEXTURE_GEN_Q = 0x00000c63;
        public const int GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 0x0000889d;
        public const int GL_TEXTURE_ENV_BIAS_SGIX = 0x000080be;
        public const int GL_FOG_OFFSET_VALUE_SGIX = 0x00008199;
        public const int GL_COMBINE_RGB = 0x00008571;
        public const int GL_POINT_SPRITE = 0x00008861;
        public const int GL_Z_EXT = 0x000087d7;
        public const int GL_CLAMP_FRAGMENT_COLOR_ARB = 0x0000891b;
        public const int GL_BLEND_SRC_RGB_EXT = 0x000080c9;
        public const int GL_ALWAYS_FAST_HINT_PGI = 0x0001a20c;
        public const int GL_FRAGMENT_SHADER_ATI = 0x00008920;
        public const int GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x0000889b;
        public const int GL_SAMPLE_ALPHA_TO_COVERAGE = 0x0000809e;
        public const int GL_UNSIGNED_SHORT_5_6_5_REV = 0x00008364;
        public const int GL_REG_20_ATI = 0x00008935;
        public const int GL_STRICT_SCISSOR_HINT_PGI = 0x0001a218;
        public const int GL_SAMPLES_3DFX = 0x000086b4;
        public const int GL_COLOR_ARRAY = 0x00008076;
        public const int GL_MAP1_VERTEX_4 = 0x00000d98;
        public const int GL_CONVOLUTION_1D_EXT = 0x00008010;
        public const int GL_CURRENT_MATRIX_STACK_DEPTH_ARB = 0x00008640;
        public const int GL_MAX_COLOR_ATTACHMENTS_EXT = 0x00008cdf;
        public const int GL_PIXEL_MAP_A_TO_A_SIZE = 0x00000cb9;
        public const int GL_CON_6_ATI = 0x00008947;
        public const int GL_OPERAND1_RGB = 0x00008591;
        public const int GL_TEXTURE_MAG_FILTER = 0x00002800;
        public const int GL_CURRENT_NORMAL = 0x00000b02;
        public const int GL_POST_CONVOLUTION_GREEN_SCALE_EXT = 0x0000801d;
        public const int GL_COLOR_INDEX2_EXT = 0x000080e3;
        public const int GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 0x00008517;
        public const int GL_MAP1_VERTEX_ATTRIB10_4_NV = 0x0000866a;
        public const int GL_TRANSPOSE_MODELVIEW_MATRIX = 0x000084e3;
        public const int GL_TEXTURE_RESIDENT_EXT = 0x00008067;
        public const int GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x00008b87;
        public const int GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = 0x000081a8;
        public const int GL_FRONT_AND_BACK = 0x00000408;
        public const int GL_COLOR_TABLE_FORMAT = 0x000080d8;
        public const int GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x00008b4a;
        public const int GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 0x00008853;
        public const int GL_HISTOGRAM_GREEN_SIZE_EXT = 0x00008029;
        public const int GL_INTENSITY16F_ARB = 0x0000881d;
        public const int GL_ADD_SIGNED = 0x00008574;
        public const int GL_PASS_THROUGH_NV = 0x000086e6;
        public const int GL_FRAGMENT_LIGHT6_SGIX = 0x00008412;
        public const int GL_RED_SCALE = 0x00000d14;
        public const int GL_COMPARE_R_TO_TEXTURE = 0x0000884e;
        public const int GL_VERTEX_PROGRAM_BINDING_NV = 0x0000864a;
        public const int GL_VERTEX_ATTRIB_ARRAY8_NV = 0x00008658;
        public const int GL_DOT4_ATI = 0x00008967;
        public const int GL_ATTRIB_ARRAY_POINTER_NV = 0x00008645;
        public const int GL_NEAREST_CLIPMAP_NEAREST_SGIX = 0x0000844d;
        public const int GL_DEPTH_SCALE = 0x00000d1e;

        //
        // Functions
        //


        [DllImport("opengl32.dll", EntryPoint = "glArrayElement"), SuppressUnmanagedCodeSecurity]
        public static extern void glArrayElement(int i);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, bool[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, byte[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, short[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, int[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, float[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, double[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, string pointer);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, IntPtr pointer);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, ref sbyte pointer);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, sbyte[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, sbyte[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, sbyte[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, ref ushort pointer);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, ushort[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, ushort[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, ushort[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, ref uint pointer);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, uint[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, uint[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, uint[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, ref bool pointer);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, bool[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, bool[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, ref byte pointer);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, byte[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, byte[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, ref short pointer);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, short[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, short[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, ref int pointer);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, int[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, int[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, ref float pointer);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, float[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, float[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, ref double pointer);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, double[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glColorPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorPointer(int size, int type, int stride, double[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glDisableClientState"), SuppressUnmanagedCodeSecurity]
        public static extern void glDisableClientState(int array);

        [DllImport("opengl32.dll", EntryPoint = "glDrawArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawArrays(int mode, int first, int count);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, bool[] indices);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, byte[] indices);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, short[] indices);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, int[] indices);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, float[] indices);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, double[] indices);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, string indices);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, IntPtr indices);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, ref sbyte indices);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, sbyte[] indices);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, sbyte[,] indices);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, sbyte[,,] indices);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, ref ushort indices);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, ushort[] indices);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, ushort[,] indices);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, ushort[,,] indices);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, ref uint indices);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, uint[] indices);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, uint[,] indices);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, uint[,,] indices);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, ref bool indices);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, bool[,] indices);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, bool[,,] indices);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, ref byte indices);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, byte[,] indices);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, byte[,,] indices);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, ref short indices);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, short[,] indices);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, short[,,] indices);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, ref int indices);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, int[,] indices);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, int[,,] indices);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, ref float indices);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, float[,] indices);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, float[,,] indices);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, ref double indices);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, double[,] indices);

        [DllImport("opengl32.dll", EntryPoint = "glDrawElements"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawElements(int mode, int count, int type, double[,,] indices);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, bool[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, byte[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, short[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, int[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, float[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, double[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, string pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, IntPtr pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, ref sbyte pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, sbyte[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, sbyte[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, sbyte[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, ref ushort pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, ushort[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, ushort[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, ushort[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, ref uint pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, uint[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, uint[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, uint[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, ref bool pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, bool[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, bool[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, ref byte pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, byte[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, byte[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, ref short pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, short[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, short[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, ref int pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, int[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, int[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, ref float pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, float[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, float[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, ref double pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, double[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagPointer(int stride, double[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glEnableClientState"), SuppressUnmanagedCodeSecurity]
        public static extern void glEnableClientState(int array);

        [DllImport("opengl32.dll", EntryPoint = "glGetPointerv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPointerv(int pname, [Out] bool[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetPointerv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPointerv(int pname, [Out] byte[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetPointerv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPointerv(int pname, [Out] short[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetPointerv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPointerv(int pname, [Out] int[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetPointerv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPointerv(int pname, [Out] float[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetPointerv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPointerv(int pname, [Out] double[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetPointerv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPointerv(int pname, IntPtr arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetPointerv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPointerv(int pname, out bool arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetPointerv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPointerv(int pname, out byte arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetPointerv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPointerv(int pname, out short arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetPointerv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPointerv(int pname, out int arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetPointerv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPointerv(int pname, out float arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetPointerv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPointerv(int pname, out double arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetPointerv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPointerv(int pname, out sbyte arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetPointerv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPointerv(int pname, [Out] sbyte[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetPointerv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPointerv(int pname, out ushort arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetPointerv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPointerv(int pname, [Out] ushort[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetPointerv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPointerv(int pname, out uint arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetPointerv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPointerv(int pname, [Out] uint[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, bool[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, byte[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, short[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, int[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, float[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, double[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, string pointer);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, IntPtr pointer);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, ref sbyte pointer);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, sbyte[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, sbyte[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, sbyte[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, ref ushort pointer);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, ushort[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, ushort[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, ushort[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, ref uint pointer);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, uint[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, uint[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, uint[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, ref bool pointer);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, bool[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, bool[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, ref byte pointer);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, byte[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, byte[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, ref short pointer);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, short[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, short[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, ref int pointer);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, int[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, int[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, ref float pointer);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, float[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, float[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, ref double pointer);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, double[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glIndexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexPointer(int type, int stride, double[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, bool[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, byte[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, short[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, int[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, float[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, double[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, string pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, IntPtr pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, ref sbyte pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, sbyte[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, sbyte[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, sbyte[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, ref ushort pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, ushort[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, ushort[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, ushort[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, ref uint pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, uint[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, uint[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, uint[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, ref bool pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, bool[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, bool[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, ref byte pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, byte[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, byte[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, ref short pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, short[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, short[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, ref int pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, int[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, int[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, ref float pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, float[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, float[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, ref double pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, double[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays"), SuppressUnmanagedCodeSecurity]
        public static extern void glInterleavedArrays(int format, int stride, double[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, bool[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, byte[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, short[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, int[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, float[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, double[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, string pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, IntPtr pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, ref sbyte pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, sbyte[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, sbyte[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, sbyte[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, ref ushort pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, ushort[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, ushort[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, ushort[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, ref uint pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, uint[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, uint[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, uint[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, ref bool pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, bool[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, bool[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, ref byte pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, byte[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, byte[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, ref short pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, short[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, short[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, ref int pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, int[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, int[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, ref float pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, float[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, float[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, ref double pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, double[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glNormalPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormalPointer(int type, int stride, double[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, bool[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, byte[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, short[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, int[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, float[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, double[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, string pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, IntPtr pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, ref sbyte pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, sbyte[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, sbyte[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, sbyte[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, ref ushort pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, ushort[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, ushort[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, ushort[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, ref uint pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, uint[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, uint[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, uint[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, ref bool pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, bool[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, bool[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, ref byte pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, byte[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, byte[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, ref short pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, short[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, short[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, ref int pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, int[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, int[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, ref float pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, float[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, float[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, ref double pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, double[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoordPointer(int size, int type, int stride, double[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, bool[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, byte[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, short[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, int[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, float[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, double[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, string pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, IntPtr pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, ref sbyte pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, sbyte[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, sbyte[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, sbyte[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, ref ushort pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, ushort[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, ushort[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, ushort[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, ref uint pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, uint[] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, uint[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, uint[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, ref bool pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, bool[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, bool[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, ref byte pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, byte[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, byte[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, ref short pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, short[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, short[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, ref int pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, int[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, int[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, ref float pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, float[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, float[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, ref double pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, double[,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glVertexPointer"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertexPointer(int size, int type, int stride, double[,,] pointer);

        [DllImport("opengl32.dll", EntryPoint = "glPolygonOffset"), SuppressUnmanagedCodeSecurity]
        public static extern void glPolygonOffset(float factor, float units);

        [DllImport("opengl32.dll", EntryPoint = "glCopyTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glCopyTexImage1D(int target, int level, int internalformat, int x, int y, int width, int border);

        [DllImport("opengl32.dll", EntryPoint = "glCopyTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glCopyTexImage2D(int target, int level, int internalformat, int x, int y, int width, int height, int border);

        [DllImport("opengl32.dll", EntryPoint = "glCopyTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glCopyTexSubImage1D(int target, int level, int xoffset, int x, int y, int width);

        [DllImport("opengl32.dll", EntryPoint = "glCopyTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glCopyTexSubImage2D(int target, int level, int xoffset, int yoffset, int x, int y, int width, int height);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, bool[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, byte[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, short[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, int[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, float[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, double[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, string pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, IntPtr pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, ref sbyte pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, sbyte[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, sbyte[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, sbyte[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, ref ushort pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, ushort[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, ushort[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, ushort[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, ref uint pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, uint[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, uint[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, uint[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, ref bool pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, bool[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, bool[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, ref byte pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, byte[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, byte[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, ref short pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, short[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, short[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, ref int pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, int[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, int[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, ref float pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, float[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, float[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, ref double pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, double[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, double[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, bool[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, byte[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, short[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, int[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, float[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, double[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, string pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, IntPtr pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ref sbyte pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, sbyte[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, sbyte[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, sbyte[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ref ushort pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ushort[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ushort[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ushort[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ref uint pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, uint[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, uint[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, uint[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ref bool pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, bool[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, bool[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ref byte pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, byte[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, byte[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ref short pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, short[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, short[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ref int pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, int[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, int[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ref float pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, float[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, float[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ref double pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, double[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, double[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glAreTexturesResident"), SuppressUnmanagedCodeSecurity]
        public static extern int glAreTexturesResident(int n, ref int textures, out int residences);

        [DllImport("opengl32.dll", EntryPoint = "glAreTexturesResident"), SuppressUnmanagedCodeSecurity]
        public static extern int glAreTexturesResident(int n, int[] textures, out int residences);

        [DllImport("opengl32.dll", EntryPoint = "glAreTexturesResident"), SuppressUnmanagedCodeSecurity]
        public static extern int glAreTexturesResident(int n, ref uint textures, out int residences);

        [DllImport("opengl32.dll", EntryPoint = "glAreTexturesResident"), SuppressUnmanagedCodeSecurity]
        public static extern int glAreTexturesResident(int n, uint[] textures, out int residences);

        [DllImport("opengl32.dll", EntryPoint = "glAreTexturesResident"), SuppressUnmanagedCodeSecurity]
        public static extern int glAreTexturesResident(int n, ref int textures, [Out] int[] residences);

        [DllImport("opengl32.dll", EntryPoint = "glAreTexturesResident"), SuppressUnmanagedCodeSecurity]
        public static extern int glAreTexturesResident(int n, int[] textures, [Out] int[] residences);

        [DllImport("opengl32.dll", EntryPoint = "glAreTexturesResident"), SuppressUnmanagedCodeSecurity]
        public static extern int glAreTexturesResident(int n, ref uint textures, [Out] int[] residences);

        [DllImport("opengl32.dll", EntryPoint = "glAreTexturesResident"), SuppressUnmanagedCodeSecurity]
        public static extern int glAreTexturesResident(int n, uint[] textures, [Out] int[] residences);

        [DllImport("opengl32.dll", EntryPoint = "glAreTexturesResident"), SuppressUnmanagedCodeSecurity]
        public static extern int glAreTexturesResident(int n, ref int textures, out bool residences);

        [DllImport("opengl32.dll", EntryPoint = "glAreTexturesResident"), SuppressUnmanagedCodeSecurity]
        public static extern int glAreTexturesResident(int n, int[] textures, out bool residences);

        [DllImport("opengl32.dll", EntryPoint = "glAreTexturesResident"), SuppressUnmanagedCodeSecurity]
        public static extern int glAreTexturesResident(int n, ref uint textures, out bool residences);

        [DllImport("opengl32.dll", EntryPoint = "glAreTexturesResident"), SuppressUnmanagedCodeSecurity]
        public static extern int glAreTexturesResident(int n, uint[] textures, out bool residences);

        [DllImport("opengl32.dll", EntryPoint = "glAreTexturesResident"), SuppressUnmanagedCodeSecurity]
        public static extern int glAreTexturesResident(int n, ref int textures, [Out] bool[] residences);

        [DllImport("opengl32.dll", EntryPoint = "glAreTexturesResident"), SuppressUnmanagedCodeSecurity]
        public static extern int glAreTexturesResident(int n, int[] textures, [Out] bool[] residences);

        [DllImport("opengl32.dll", EntryPoint = "glAreTexturesResident"), SuppressUnmanagedCodeSecurity]
        public static extern int glAreTexturesResident(int n, ref uint textures, [Out] bool[] residences);

        [DllImport("opengl32.dll", EntryPoint = "glAreTexturesResident"), SuppressUnmanagedCodeSecurity]
        public static extern int glAreTexturesResident(int n, uint[] textures, [Out] bool[] residences);

        [DllImport("opengl32.dll", EntryPoint = "glBindTexture"), SuppressUnmanagedCodeSecurity]
        public static extern void glBindTexture(int target, int texture);

        [DllImport("opengl32.dll", EntryPoint = "glBindTexture"), SuppressUnmanagedCodeSecurity]
        public static extern void glBindTexture(int target, uint texture);

        [DllImport("opengl32.dll", EntryPoint = "glDeleteTextures"), SuppressUnmanagedCodeSecurity]
        public static extern void glDeleteTextures(int n, ref int textures);

        [DllImport("opengl32.dll", EntryPoint = "glDeleteTextures"), SuppressUnmanagedCodeSecurity]
        public static extern void glDeleteTextures(int n, int[] textures);

        [DllImport("opengl32.dll", EntryPoint = "glDeleteTextures"), SuppressUnmanagedCodeSecurity]
        public static extern void glDeleteTextures(int n, ref uint textures);

        [DllImport("opengl32.dll", EntryPoint = "glDeleteTextures"), SuppressUnmanagedCodeSecurity]
        public static extern void glDeleteTextures(int n, uint[] textures);

        [DllImport("opengl32.dll", EntryPoint = "glGenTextures"), SuppressUnmanagedCodeSecurity]
        public static extern void glGenTextures(int n, out int textures);

        [DllImport("opengl32.dll", EntryPoint = "glGenTextures"), SuppressUnmanagedCodeSecurity]
        public static extern void glGenTextures(int n, [Out] int[] textures);

        [DllImport("opengl32.dll", EntryPoint = "glGenTextures"), SuppressUnmanagedCodeSecurity]
        public static extern void glGenTextures(int n, out uint textures);

        [DllImport("opengl32.dll", EntryPoint = "glGenTextures"), SuppressUnmanagedCodeSecurity]
        public static extern void glGenTextures(int n, [Out] uint[] textures);

        [DllImport("opengl32.dll", EntryPoint = "glIsTexture"), SuppressUnmanagedCodeSecurity]
        public static extern int glIsTexture(int texture);

        [DllImport("opengl32.dll", EntryPoint = "glIsTexture"), SuppressUnmanagedCodeSecurity]
        public static extern int glIsTexture(uint texture);

        [DllImport("opengl32.dll", EntryPoint = "glPrioritizeTextures"), SuppressUnmanagedCodeSecurity]
        public static extern void glPrioritizeTextures(int n, ref int textures, ref float priorities);

        [DllImport("opengl32.dll", EntryPoint = "glPrioritizeTextures"), SuppressUnmanagedCodeSecurity]
        public static extern void glPrioritizeTextures(int n, int[] textures, ref float priorities);

        [DllImport("opengl32.dll", EntryPoint = "glPrioritizeTextures"), SuppressUnmanagedCodeSecurity]
        public static extern void glPrioritizeTextures(int n, ref uint textures, ref float priorities);

        [DllImport("opengl32.dll", EntryPoint = "glPrioritizeTextures"), SuppressUnmanagedCodeSecurity]
        public static extern void glPrioritizeTextures(int n, uint[] textures, ref float priorities);

        [DllImport("opengl32.dll", EntryPoint = "glPrioritizeTextures"), SuppressUnmanagedCodeSecurity]
        public static extern void glPrioritizeTextures(int n, ref int textures, float[] priorities);

        [DllImport("opengl32.dll", EntryPoint = "glPrioritizeTextures"), SuppressUnmanagedCodeSecurity]
        public static extern void glPrioritizeTextures(int n, int[] textures, float[] priorities);

        [DllImport("opengl32.dll", EntryPoint = "glPrioritizeTextures"), SuppressUnmanagedCodeSecurity]
        public static extern void glPrioritizeTextures(int n, ref uint textures, float[] priorities);

        [DllImport("opengl32.dll", EntryPoint = "glPrioritizeTextures"), SuppressUnmanagedCodeSecurity]
        public static extern void glPrioritizeTextures(int n, uint[] textures, float[] priorities);

        [DllImport("opengl32.dll", EntryPoint = "glIndexub"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexub(byte c);

        [DllImport("opengl32.dll", EntryPoint = "glIndexubv"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexubv(ref byte c);

        [DllImport("opengl32.dll", EntryPoint = "glIndexubv"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexubv(byte[] c);

        [DllImport("opengl32.dll", EntryPoint = "glPopClientAttrib"), SuppressUnmanagedCodeSecurity]
        public static extern void glPopClientAttrib();

        [DllImport("opengl32.dll", EntryPoint = "glPushClientAttrib"), SuppressUnmanagedCodeSecurity]
        public static extern void glPushClientAttrib(int mask);

        [DllImport("opengl32.dll", EntryPoint = "glPushClientAttrib"), SuppressUnmanagedCodeSecurity]
        public static extern void glPushClientAttrib(uint mask);

        [DllImport("opengl32.dll", EntryPoint = "glNewList"), SuppressUnmanagedCodeSecurity]
        public static extern void glNewList(int list, int mode);

        [DllImport("opengl32.dll", EntryPoint = "glNewList"), SuppressUnmanagedCodeSecurity]
        public static extern void glNewList(uint list, int mode);

        [DllImport("opengl32.dll", EntryPoint = "glEndList"), SuppressUnmanagedCodeSecurity]
        public static extern void glEndList();

        [DllImport("opengl32.dll", EntryPoint = "glCallList"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallList(int list);

        [DllImport("opengl32.dll", EntryPoint = "glCallList"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallList(uint list);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, bool[] lists);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, byte[] lists);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, short[] lists);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, int[] lists);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, float[] lists);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, double[] lists);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, string lists);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, IntPtr lists);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, ref sbyte lists);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, sbyte[] lists);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, sbyte[,] lists);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, sbyte[,,] lists);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, ref ushort lists);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, ushort[] lists);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, ushort[,] lists);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, ushort[,,] lists);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, ref uint lists);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, uint[] lists);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, uint[,] lists);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, uint[,,] lists);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, ref bool lists);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, bool[,] lists);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, bool[,,] lists);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, ref byte lists);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, byte[,] lists);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, byte[,,] lists);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, ref short lists);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, short[,] lists);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, short[,,] lists);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, ref int lists);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, int[,] lists);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, int[,,] lists);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, ref float lists);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, float[,] lists);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, float[,,] lists);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, ref double lists);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, double[,] lists);

        [DllImport("opengl32.dll", EntryPoint = "glCallLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glCallLists(int n, int type, double[,,] lists);

        [DllImport("opengl32.dll", EntryPoint = "glDeleteLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glDeleteLists(int list, int range);

        [DllImport("opengl32.dll", EntryPoint = "glDeleteLists"), SuppressUnmanagedCodeSecurity]
        public static extern void glDeleteLists(uint list, int range);

        [DllImport("opengl32.dll", EntryPoint = "glGenLists"), SuppressUnmanagedCodeSecurity]
        public static extern int glGenLists(int range);

        [DllImport("opengl32.dll", EntryPoint = "glListBase"), SuppressUnmanagedCodeSecurity]
        public static extern void glListBase(int arg_base);

        [DllImport("opengl32.dll", EntryPoint = "glListBase"), SuppressUnmanagedCodeSecurity]
        public static extern void glListBase(uint arg_base);

        [DllImport("opengl32.dll", EntryPoint = "glBegin"), SuppressUnmanagedCodeSecurity]
        public static extern void glBegin(int mode);

        [DllImport("opengl32.dll", EntryPoint = "glBitmap"), SuppressUnmanagedCodeSecurity]
        public static extern void glBitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, ref byte bitmap);

        [DllImport("opengl32.dll", EntryPoint = "glBitmap"), SuppressUnmanagedCodeSecurity]
        public static extern void glBitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, byte[] bitmap);

        [DllImport("opengl32.dll", EntryPoint = "glColor3b"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3b(byte red, byte green, byte blue);

        [DllImport("opengl32.dll", EntryPoint = "glColor3b"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3b(sbyte red, byte green, byte blue);

        [DllImport("opengl32.dll", EntryPoint = "glColor3b"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3b(byte red, sbyte green, byte blue);

        [DllImport("opengl32.dll", EntryPoint = "glColor3b"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3b(sbyte red, sbyte green, byte blue);

        [DllImport("opengl32.dll", EntryPoint = "glColor3b"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3b(byte red, byte green, sbyte blue);

        [DllImport("opengl32.dll", EntryPoint = "glColor3b"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3b(sbyte red, byte green, sbyte blue);

        [DllImport("opengl32.dll", EntryPoint = "glColor3b"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3b(byte red, sbyte green, sbyte blue);

        [DllImport("opengl32.dll", EntryPoint = "glColor3b"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3b(sbyte red, sbyte green, sbyte blue);

        [DllImport("opengl32.dll", EntryPoint = "glColor3bv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3bv(ref byte v);

        [DllImport("opengl32.dll", EntryPoint = "glColor3bv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3bv(byte[] v);

        [DllImport("opengl32.dll", EntryPoint = "glColor3bv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3bv(ref sbyte v);

        [DllImport("opengl32.dll", EntryPoint = "glColor3bv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3bv(sbyte[] v);

        [DllImport("opengl32.dll", EntryPoint = "glColor3d"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3d(double red, double green, double blue);

        [DllImport("opengl32.dll", EntryPoint = "glColor3dv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3dv(ref double v);

        [DllImport("opengl32.dll", EntryPoint = "glColor3dv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3dv(double[] v);

        [DllImport("opengl32.dll", EntryPoint = "glColor3f"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3f(float red, float green, float blue);

        [DllImport("opengl32.dll", EntryPoint = "glColor3fv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3fv(ref float v);

        [DllImport("opengl32.dll", EntryPoint = "glColor3fv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3fv(float[] v);

        [DllImport("opengl32.dll", EntryPoint = "glColor3i"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3i(int red, int green, int blue);

        [DllImport("opengl32.dll", EntryPoint = "glColor3iv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3iv(ref int v);

        [DllImport("opengl32.dll", EntryPoint = "glColor3iv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3iv(int[] v);

        [DllImport("opengl32.dll", EntryPoint = "glColor3s"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3s(short red, short green, short blue);

        [DllImport("opengl32.dll", EntryPoint = "glColor3sv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3sv(ref short v);

        [DllImport("opengl32.dll", EntryPoint = "glColor3sv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3sv(short[] v);

        [DllImport("opengl32.dll", EntryPoint = "glColor3ub"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3ub(byte red, byte green, byte blue);

        [DllImport("opengl32.dll", EntryPoint = "glColor3ubv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3ubv(ref byte v);

        [DllImport("opengl32.dll", EntryPoint = "glColor3ubv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3ubv(byte[] v);

        [DllImport("opengl32.dll", EntryPoint = "glColor3ui"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3ui(int red, int green, int blue);

        [DllImport("opengl32.dll", EntryPoint = "glColor3ui"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3ui(uint red, int green, int blue);

        [DllImport("opengl32.dll", EntryPoint = "glColor3ui"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3ui(int red, uint green, int blue);

        [DllImport("opengl32.dll", EntryPoint = "glColor3ui"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3ui(uint red, uint green, int blue);

        [DllImport("opengl32.dll", EntryPoint = "glColor3ui"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3ui(int red, int green, uint blue);

        [DllImport("opengl32.dll", EntryPoint = "glColor3ui"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3ui(uint red, int green, uint blue);

        [DllImport("opengl32.dll", EntryPoint = "glColor3ui"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3ui(int red, uint green, uint blue);

        [DllImport("opengl32.dll", EntryPoint = "glColor3ui"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3ui(uint red, uint green, uint blue);

        [DllImport("opengl32.dll", EntryPoint = "glColor3uiv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3uiv(ref int v);

        [DllImport("opengl32.dll", EntryPoint = "glColor3uiv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3uiv(int[] v);

        [DllImport("opengl32.dll", EntryPoint = "glColor3uiv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3uiv(ref uint v);

        [DllImport("opengl32.dll", EntryPoint = "glColor3uiv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3uiv(uint[] v);

        [DllImport("opengl32.dll", EntryPoint = "glColor3us"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3us(short red, short green, short blue);

        [DllImport("opengl32.dll", EntryPoint = "glColor3us"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3us(ushort red, short green, short blue);

        [DllImport("opengl32.dll", EntryPoint = "glColor3us"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3us(short red, ushort green, short blue);

        [DllImport("opengl32.dll", EntryPoint = "glColor3us"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3us(ushort red, ushort green, short blue);

        [DllImport("opengl32.dll", EntryPoint = "glColor3us"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3us(short red, short green, ushort blue);

        [DllImport("opengl32.dll", EntryPoint = "glColor3us"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3us(ushort red, short green, ushort blue);

        [DllImport("opengl32.dll", EntryPoint = "glColor3us"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3us(short red, ushort green, ushort blue);

        [DllImport("opengl32.dll", EntryPoint = "glColor3us"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3us(ushort red, ushort green, ushort blue);

        [DllImport("opengl32.dll", EntryPoint = "glColor3usv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3usv(ref short v);

        [DllImport("opengl32.dll", EntryPoint = "glColor3usv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3usv(short[] v);

        [DllImport("opengl32.dll", EntryPoint = "glColor3usv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3usv(ref ushort v);

        [DllImport("opengl32.dll", EntryPoint = "glColor3usv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor3usv(ushort[] v);

        [DllImport("opengl32.dll", EntryPoint = "glColor4b"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4b(byte red, byte green, byte blue, byte alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4b"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4b(sbyte red, byte green, byte blue, byte alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4b"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4b(byte red, sbyte green, byte blue, byte alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4b"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4b(sbyte red, sbyte green, byte blue, byte alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4b"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4b(byte red, byte green, sbyte blue, byte alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4b"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4b(sbyte red, byte green, sbyte blue, byte alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4b"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4b(byte red, sbyte green, sbyte blue, byte alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4b"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4b(sbyte red, sbyte green, sbyte blue, byte alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4b"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4b(byte red, byte green, byte blue, sbyte alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4b"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4b(sbyte red, byte green, byte blue, sbyte alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4b"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4b(byte red, sbyte green, byte blue, sbyte alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4b"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4b(sbyte red, sbyte green, byte blue, sbyte alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4b"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4b(byte red, byte green, sbyte blue, sbyte alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4b"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4b(sbyte red, byte green, sbyte blue, sbyte alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4b"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4b(byte red, sbyte green, sbyte blue, sbyte alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4b"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4b(sbyte red, sbyte green, sbyte blue, sbyte alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4bv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4bv(ref byte v);

        [DllImport("opengl32.dll", EntryPoint = "glColor4bv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4bv(byte[] v);

        [DllImport("opengl32.dll", EntryPoint = "glColor4bv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4bv(ref sbyte v);

        [DllImport("opengl32.dll", EntryPoint = "glColor4bv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4bv(sbyte[] v);

        [DllImport("opengl32.dll", EntryPoint = "glColor4d"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4d(double red, double green, double blue, double alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4dv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4dv(ref double v);

        [DllImport("opengl32.dll", EntryPoint = "glColor4dv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4dv(double[] v);

        [DllImport("opengl32.dll", EntryPoint = "glColor4f"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4f(float red, float green, float blue, float alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4fv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4fv(ref float v);

        [DllImport("opengl32.dll", EntryPoint = "glColor4fv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4fv(float[] v);

        [DllImport("opengl32.dll", EntryPoint = "glColor4i"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4i(int red, int green, int blue, int alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4iv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4iv(ref int v);

        [DllImport("opengl32.dll", EntryPoint = "glColor4iv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4iv(int[] v);

        [DllImport("opengl32.dll", EntryPoint = "glColor4s"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4s(short red, short green, short blue, short alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4sv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4sv(ref short v);

        [DllImport("opengl32.dll", EntryPoint = "glColor4sv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4sv(short[] v);

        [DllImport("opengl32.dll", EntryPoint = "glColor4ub"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4ub(byte red, byte green, byte blue, byte alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4ubv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4ubv(ref byte v);

        [DllImport("opengl32.dll", EntryPoint = "glColor4ubv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4ubv(byte[] v);

        [DllImport("opengl32.dll", EntryPoint = "glColor4ui"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4ui(int red, int green, int blue, int alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4ui"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4ui(uint red, int green, int blue, int alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4ui"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4ui(int red, uint green, int blue, int alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4ui"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4ui(uint red, uint green, int blue, int alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4ui"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4ui(int red, int green, uint blue, int alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4ui"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4ui(uint red, int green, uint blue, int alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4ui"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4ui(int red, uint green, uint blue, int alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4ui"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4ui(uint red, uint green, uint blue, int alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4ui"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4ui(int red, int green, int blue, uint alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4ui"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4ui(uint red, int green, int blue, uint alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4ui"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4ui(int red, uint green, int blue, uint alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4ui"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4ui(uint red, uint green, int blue, uint alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4ui"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4ui(int red, int green, uint blue, uint alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4ui"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4ui(uint red, int green, uint blue, uint alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4ui"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4ui(int red, uint green, uint blue, uint alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4ui"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4ui(uint red, uint green, uint blue, uint alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4uiv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4uiv(ref int v);

        [DllImport("opengl32.dll", EntryPoint = "glColor4uiv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4uiv(int[] v);

        [DllImport("opengl32.dll", EntryPoint = "glColor4uiv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4uiv(ref uint v);

        [DllImport("opengl32.dll", EntryPoint = "glColor4uiv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4uiv(uint[] v);

        [DllImport("opengl32.dll", EntryPoint = "glColor4us"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4us(short red, short green, short blue, short alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4us"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4us(ushort red, short green, short blue, short alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4us"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4us(short red, ushort green, short blue, short alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4us"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4us(ushort red, ushort green, short blue, short alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4us"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4us(short red, short green, ushort blue, short alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4us"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4us(ushort red, short green, ushort blue, short alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4us"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4us(short red, ushort green, ushort blue, short alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4us"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4us(ushort red, ushort green, ushort blue, short alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4us"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4us(short red, short green, short blue, ushort alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4us"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4us(ushort red, short green, short blue, ushort alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4us"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4us(short red, ushort green, short blue, ushort alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4us"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4us(ushort red, ushort green, short blue, ushort alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4us"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4us(short red, short green, ushort blue, ushort alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4us"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4us(ushort red, short green, ushort blue, ushort alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4us"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4us(short red, ushort green, ushort blue, ushort alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4us"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4us(ushort red, ushort green, ushort blue, ushort alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColor4usv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4usv(ref short v);

        [DllImport("opengl32.dll", EntryPoint = "glColor4usv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4usv(short[] v);

        [DllImport("opengl32.dll", EntryPoint = "glColor4usv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4usv(ref ushort v);

        [DllImport("opengl32.dll", EntryPoint = "glColor4usv"), SuppressUnmanagedCodeSecurity]
        public static extern void glColor4usv(ushort[] v);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlag"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlag(int flag);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlag"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlag(bool flag);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagv"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagv(ref int flag);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagv"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagv(int[] flag);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagv"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagv(ref bool flag);

        [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagv"), SuppressUnmanagedCodeSecurity]
        public static extern void glEdgeFlagv(bool[] flag);

        [DllImport("opengl32.dll", EntryPoint = "glEnd"), SuppressUnmanagedCodeSecurity]
        public static extern void glEnd();

        [DllImport("opengl32.dll", EntryPoint = "glIndexd"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexd(double c);

        [DllImport("opengl32.dll", EntryPoint = "glIndexdv"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexdv(ref double c);

        [DllImport("opengl32.dll", EntryPoint = "glIndexdv"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexdv(double[] c);

        [DllImport("opengl32.dll", EntryPoint = "glIndexf"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexf(float c);

        [DllImport("opengl32.dll", EntryPoint = "glIndexfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexfv(ref float c);

        [DllImport("opengl32.dll", EntryPoint = "glIndexfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexfv(float[] c);

        [DllImport("opengl32.dll", EntryPoint = "glIndexi"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexi(int c);

        [DllImport("opengl32.dll", EntryPoint = "glIndexiv"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexiv(ref int c);

        [DllImport("opengl32.dll", EntryPoint = "glIndexiv"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexiv(int[] c);

        [DllImport("opengl32.dll", EntryPoint = "glIndexs"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexs(short c);

        [DllImport("opengl32.dll", EntryPoint = "glIndexsv"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexsv(ref short c);

        [DllImport("opengl32.dll", EntryPoint = "glIndexsv"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexsv(short[] c);

        [DllImport("opengl32.dll", EntryPoint = "glNormal3b"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3b(byte nx, byte ny, byte nz);

        [DllImport("opengl32.dll", EntryPoint = "glNormal3b"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3b(sbyte nx, byte ny, byte nz);

        [DllImport("opengl32.dll", EntryPoint = "glNormal3b"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3b(byte nx, sbyte ny, byte nz);

        [DllImport("opengl32.dll", EntryPoint = "glNormal3b"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3b(sbyte nx, sbyte ny, byte nz);

        [DllImport("opengl32.dll", EntryPoint = "glNormal3b"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3b(byte nx, byte ny, sbyte nz);

        [DllImport("opengl32.dll", EntryPoint = "glNormal3b"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3b(sbyte nx, byte ny, sbyte nz);

        [DllImport("opengl32.dll", EntryPoint = "glNormal3b"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3b(byte nx, sbyte ny, sbyte nz);

        [DllImport("opengl32.dll", EntryPoint = "glNormal3b"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3b(sbyte nx, sbyte ny, sbyte nz);

        [DllImport("opengl32.dll", EntryPoint = "glNormal3bv"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3bv(ref byte v);

        [DllImport("opengl32.dll", EntryPoint = "glNormal3bv"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3bv(byte[] v);

        [DllImport("opengl32.dll", EntryPoint = "glNormal3bv"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3bv(ref sbyte v);

        [DllImport("opengl32.dll", EntryPoint = "glNormal3bv"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3bv(sbyte[] v);

        [DllImport("opengl32.dll", EntryPoint = "glNormal3d"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3d(double nx, double ny, double nz);

        [DllImport("opengl32.dll", EntryPoint = "glNormal3dv"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3dv(ref double v);

        [DllImport("opengl32.dll", EntryPoint = "glNormal3dv"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3dv(double[] v);

        [DllImport("opengl32.dll", EntryPoint = "glNormal3f"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3f(float nx, float ny, float nz);

        [DllImport("opengl32.dll", EntryPoint = "glNormal3fv"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3fv(ref float v);

        [DllImport("opengl32.dll", EntryPoint = "glNormal3fv"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3fv(float[] v);

        [DllImport("opengl32.dll", EntryPoint = "glNormal3i"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3i(int nx, int ny, int nz);

        [DllImport("opengl32.dll", EntryPoint = "glNormal3iv"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3iv(ref int v);

        [DllImport("opengl32.dll", EntryPoint = "glNormal3iv"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3iv(int[] v);

        [DllImport("opengl32.dll", EntryPoint = "glNormal3s"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3s(short nx, short ny, short nz);

        [DllImport("opengl32.dll", EntryPoint = "glNormal3sv"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3sv(ref short v);

        [DllImport("opengl32.dll", EntryPoint = "glNormal3sv"), SuppressUnmanagedCodeSecurity]
        public static extern void glNormal3sv(short[] v);

        [DllImport("opengl32.dll", EntryPoint = "glRasterPos2d"), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos2d(double x, double y);

        [DllImport("opengl32.dll", EntryPoint = "glRasterPos2dv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos2dv(ref double v);

        [DllImport("opengl32.dll", EntryPoint = "glRasterPos2dv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos2dv(double[] v);

        [DllImport("opengl32.dll", EntryPoint = "glRasterPos2f"), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos2f(float x, float y);

        [DllImport("opengl32.dll", EntryPoint = "glRasterPos2fv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos2fv(ref float v);

        [DllImport("opengl32.dll", EntryPoint = "glRasterPos2fv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos2fv(float[] v);

        [DllImport("opengl32.dll", EntryPoint = "glRasterPos2i"), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos2i(int x, int y);

        [DllImport("opengl32.dll", EntryPoint = "glRasterPos2iv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos2iv(ref int v);

        [DllImport("opengl32.dll", EntryPoint = "glRasterPos2iv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos2iv(int[] v);

        [DllImport("opengl32.dll", EntryPoint = "glRasterPos2s"), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos2s(short x, short y);

        [DllImport("opengl32.dll", EntryPoint = "glRasterPos2sv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos2sv(ref short v);

        [DllImport("opengl32.dll", EntryPoint = "glRasterPos2sv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos2sv(short[] v);

        [DllImport("opengl32.dll", EntryPoint = "glRasterPos3d"), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos3d(double x, double y, double z);

        [DllImport("opengl32.dll", EntryPoint = "glRasterPos3dv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos3dv(ref double v);

        [DllImport("opengl32.dll", EntryPoint = "glRasterPos3dv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos3dv(double[] v);

        [DllImport("opengl32.dll", EntryPoint = "glRasterPos3f"), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos3f(float x, float y, float z);

        [DllImport("opengl32.dll", EntryPoint = "glRasterPos3fv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos3fv(ref float v);

        [DllImport("opengl32.dll", EntryPoint = "glRasterPos3fv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos3fv(float[] v);

        [DllImport("opengl32.dll", EntryPoint = "glRasterPos3i"), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos3i(int x, int y, int z);

        [DllImport("opengl32.dll", EntryPoint = "glRasterPos3iv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos3iv(ref int v);

        [DllImport("opengl32.dll", EntryPoint = "glRasterPos3iv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos3iv(int[] v);

        [DllImport("opengl32.dll", EntryPoint = "glRasterPos3s"), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos3s(short x, short y, short z);

        [DllImport("opengl32.dll", EntryPoint = "glRasterPos3sv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos3sv(ref short v);

        [DllImport("opengl32.dll", EntryPoint = "glRasterPos3sv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos3sv(short[] v);

        [DllImport("opengl32.dll", EntryPoint = "glRasterPos4d"), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos4d(double x, double y, double z, double w);

        [DllImport("opengl32.dll", EntryPoint = "glRasterPos4dv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos4dv(ref double v);

        [DllImport("opengl32.dll", EntryPoint = "glRasterPos4dv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos4dv(double[] v);

        [DllImport("opengl32.dll", EntryPoint = "glRasterPos4f"), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos4f(float x, float y, float z, float w);

        [DllImport("opengl32.dll", EntryPoint = "glRasterPos4fv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos4fv(ref float v);

        [DllImport("opengl32.dll", EntryPoint = "glRasterPos4fv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos4fv(float[] v);

        [DllImport("opengl32.dll", EntryPoint = "glRasterPos4i"), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos4i(int x, int y, int z, int w);

        [DllImport("opengl32.dll", EntryPoint = "glRasterPos4iv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos4iv(ref int v);

        [DllImport("opengl32.dll", EntryPoint = "glRasterPos4iv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos4iv(int[] v);

        [DllImport("opengl32.dll", EntryPoint = "glRasterPos4s"), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos4s(short x, short y, short z, short w);

        [DllImport("opengl32.dll", EntryPoint = "glRasterPos4sv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos4sv(ref short v);

        [DllImport("opengl32.dll", EntryPoint = "glRasterPos4sv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRasterPos4sv(short[] v);

        [DllImport("opengl32.dll", EntryPoint = "glRectd"), SuppressUnmanagedCodeSecurity]
        public static extern void glRectd(double x1, double y1, double x2, double y2);

        [DllImport("opengl32.dll", EntryPoint = "glRectdv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRectdv(ref double v1, ref double v2);

        [DllImport("opengl32.dll", EntryPoint = "glRectdv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRectdv(double[] v1, ref double v2);

        [DllImport("opengl32.dll", EntryPoint = "glRectdv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRectdv(ref double v1, double[] v2);

        [DllImport("opengl32.dll", EntryPoint = "glRectdv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRectdv(double[] v1, double[] v2);

        [DllImport("opengl32.dll", EntryPoint = "glRectf"), SuppressUnmanagedCodeSecurity]
        public static extern void glRectf(float x1, float y1, float x2, float y2);

        [DllImport("opengl32.dll", EntryPoint = "glRectfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRectfv(ref float v1, ref float v2);

        [DllImport("opengl32.dll", EntryPoint = "glRectfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRectfv(float[] v1, ref float v2);

        [DllImport("opengl32.dll", EntryPoint = "glRectfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRectfv(ref float v1, float[] v2);

        [DllImport("opengl32.dll", EntryPoint = "glRectfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRectfv(float[] v1, float[] v2);

        [DllImport("opengl32.dll", EntryPoint = "glRecti"), SuppressUnmanagedCodeSecurity]
        public static extern void glRecti(int x1, int y1, int x2, int y2);

        [DllImport("opengl32.dll", EntryPoint = "glRectiv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRectiv(ref int v1, ref int v2);

        [DllImport("opengl32.dll", EntryPoint = "glRectiv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRectiv(int[] v1, ref int v2);

        [DllImport("opengl32.dll", EntryPoint = "glRectiv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRectiv(ref int v1, int[] v2);

        [DllImport("opengl32.dll", EntryPoint = "glRectiv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRectiv(int[] v1, int[] v2);

        [DllImport("opengl32.dll", EntryPoint = "glRects"), SuppressUnmanagedCodeSecurity]
        public static extern void glRects(short x1, short y1, short x2, short y2);

        [DllImport("opengl32.dll", EntryPoint = "glRectsv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRectsv(ref short v1, ref short v2);

        [DllImport("opengl32.dll", EntryPoint = "glRectsv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRectsv(short[] v1, ref short v2);

        [DllImport("opengl32.dll", EntryPoint = "glRectsv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRectsv(ref short v1, short[] v2);

        [DllImport("opengl32.dll", EntryPoint = "glRectsv"), SuppressUnmanagedCodeSecurity]
        public static extern void glRectsv(short[] v1, short[] v2);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord1d"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord1d(double s);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord1dv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord1dv(ref double v);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord1dv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord1dv(double[] v);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord1f"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord1f(float s);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord1fv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord1fv(ref float v);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord1fv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord1fv(float[] v);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord1i"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord1i(int s);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord1iv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord1iv(ref int v);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord1iv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord1iv(int[] v);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord1s"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord1s(short s);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord1sv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord1sv(ref short v);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord1sv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord1sv(short[] v);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord2d"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord2d(double s, double t);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord2dv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord2dv(ref double v);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord2dv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord2dv(double[] v);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord2f"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord2f(float s, float t);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord2fv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord2fv(ref float v);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord2fv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord2fv(float[] v);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord2i"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord2i(int s, int t);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord2iv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord2iv(ref int v);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord2iv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord2iv(int[] v);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord2s"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord2s(short s, short t);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord2sv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord2sv(ref short v);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord2sv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord2sv(short[] v);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord3d"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord3d(double s, double t, double r);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord3dv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord3dv(ref double v);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord3dv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord3dv(double[] v);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord3f"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord3f(float s, float t, float r);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord3fv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord3fv(ref float v);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord3fv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord3fv(float[] v);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord3i"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord3i(int s, int t, int r);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord3iv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord3iv(ref int v);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord3iv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord3iv(int[] v);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord3s"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord3s(short s, short t, short r);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord3sv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord3sv(ref short v);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord3sv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord3sv(short[] v);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord4d"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord4d(double s, double t, double r, double q);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord4dv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord4dv(ref double v);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord4dv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord4dv(double[] v);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord4f"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord4f(float s, float t, float r, float q);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord4fv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord4fv(ref float v);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord4fv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord4fv(float[] v);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord4i"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord4i(int s, int t, int r, int q);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord4iv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord4iv(ref int v);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord4iv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord4iv(int[] v);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord4s"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord4s(short s, short t, short r, short q);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord4sv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord4sv(ref short v);

        [DllImport("opengl32.dll", EntryPoint = "glTexCoord4sv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexCoord4sv(short[] v);

        [DllImport("opengl32.dll", EntryPoint = "glVertex2d"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex2d(double x, double y);

        [DllImport("opengl32.dll", EntryPoint = "glVertex2dv"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex2dv(ref double v);

        [DllImport("opengl32.dll", EntryPoint = "glVertex2dv"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex2dv(double[] v);

        [DllImport("opengl32.dll", EntryPoint = "glVertex2f"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex2f(float x, float y);

        [DllImport("opengl32.dll", EntryPoint = "glVertex2fv"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex2fv(ref float v);

        [DllImport("opengl32.dll", EntryPoint = "glVertex2fv"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex2fv(float[] v);

        [DllImport("opengl32.dll", EntryPoint = "glVertex2i"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex2i(int x, int y);

        [DllImport("opengl32.dll", EntryPoint = "glVertex2iv"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex2iv(ref int v);

        [DllImport("opengl32.dll", EntryPoint = "glVertex2iv"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex2iv(int[] v);

        [DllImport("opengl32.dll", EntryPoint = "glVertex2s"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex2s(short x, short y);

        [DllImport("opengl32.dll", EntryPoint = "glVertex2sv"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex2sv(ref short v);

        [DllImport("opengl32.dll", EntryPoint = "glVertex2sv"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex2sv(short[] v);

        [DllImport("opengl32.dll", EntryPoint = "glVertex3d"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex3d(double x, double y, double z);

        [DllImport("opengl32.dll", EntryPoint = "glVertex3dv"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex3dv(ref double v);

        [DllImport("opengl32.dll", EntryPoint = "glVertex3dv"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex3dv(double[] v);

        [DllImport("opengl32.dll", EntryPoint = "glVertex3f"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex3f(float x, float y, float z);

        [DllImport("opengl32.dll", EntryPoint = "glVertex3fv"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex3fv(ref float v);

        [DllImport("opengl32.dll", EntryPoint = "glVertex3fv"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex3fv(float[] v);

        [DllImport("opengl32.dll", EntryPoint = "glVertex3i"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex3i(int x, int y, int z);

        [DllImport("opengl32.dll", EntryPoint = "glVertex3iv"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex3iv(ref int v);

        [DllImport("opengl32.dll", EntryPoint = "glVertex3iv"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex3iv(int[] v);

        [DllImport("opengl32.dll", EntryPoint = "glVertex3s"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex3s(short x, short y, short z);

        [DllImport("opengl32.dll", EntryPoint = "glVertex3sv"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex3sv(ref short v);

        [DllImport("opengl32.dll", EntryPoint = "glVertex3sv"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex3sv(short[] v);

        [DllImport("opengl32.dll", EntryPoint = "glVertex4d"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex4d(double x, double y, double z, double w);

        [DllImport("opengl32.dll", EntryPoint = "glVertex4dv"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex4dv(ref double v);

        [DllImport("opengl32.dll", EntryPoint = "glVertex4dv"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex4dv(double[] v);

        [DllImport("opengl32.dll", EntryPoint = "glVertex4f"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex4f(float x, float y, float z, float w);

        [DllImport("opengl32.dll", EntryPoint = "glVertex4fv"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex4fv(ref float v);

        [DllImport("opengl32.dll", EntryPoint = "glVertex4fv"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex4fv(float[] v);

        [DllImport("opengl32.dll", EntryPoint = "glVertex4i"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex4i(int x, int y, int z, int w);

        [DllImport("opengl32.dll", EntryPoint = "glVertex4iv"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex4iv(ref int v);

        [DllImport("opengl32.dll", EntryPoint = "glVertex4iv"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex4iv(int[] v);

        [DllImport("opengl32.dll", EntryPoint = "glVertex4s"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex4s(short x, short y, short z, short w);

        [DllImport("opengl32.dll", EntryPoint = "glVertex4sv"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex4sv(ref short v);

        [DllImport("opengl32.dll", EntryPoint = "glVertex4sv"), SuppressUnmanagedCodeSecurity]
        public static extern void glVertex4sv(short[] v);

        [DllImport("opengl32.dll", EntryPoint = "glClipPlane"), SuppressUnmanagedCodeSecurity]
        public static extern void glClipPlane(int plane, ref double equation);

        [DllImport("opengl32.dll", EntryPoint = "glClipPlane"), SuppressUnmanagedCodeSecurity]
        public static extern void glClipPlane(int plane, double[] equation);

        [DllImport("opengl32.dll", EntryPoint = "glColorMaterial"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorMaterial(int face, int mode);

        [DllImport("opengl32.dll", EntryPoint = "glCullFace"), SuppressUnmanagedCodeSecurity]
        public static extern void glCullFace(int mode);

        [DllImport("opengl32.dll", EntryPoint = "glFogf"), SuppressUnmanagedCodeSecurity]
        public static extern void glFogf(int pname, float param);

        [DllImport("opengl32.dll", EntryPoint = "glFogfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glFogfv(int pname, ref float arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glFogfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glFogfv(int pname, float[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glFogi"), SuppressUnmanagedCodeSecurity]
        public static extern void glFogi(int pname, int param);

        [DllImport("opengl32.dll", EntryPoint = "glFogiv"), SuppressUnmanagedCodeSecurity]
        public static extern void glFogiv(int pname, ref int arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glFogiv"), SuppressUnmanagedCodeSecurity]
        public static extern void glFogiv(int pname, int[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glFrontFace"), SuppressUnmanagedCodeSecurity]
        public static extern void glFrontFace(int mode);

        [DllImport("opengl32.dll", EntryPoint = "glHint"), SuppressUnmanagedCodeSecurity]
        public static extern void glHint(int target, int mode);

        [DllImport("opengl32.dll", EntryPoint = "glLightf"), SuppressUnmanagedCodeSecurity]
        public static extern void glLightf(int light, int pname, float param);

        [DllImport("opengl32.dll", EntryPoint = "glLightfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glLightfv(int light, int pname, ref float arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glLightfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glLightfv(int light, int pname, float[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glLighti"), SuppressUnmanagedCodeSecurity]
        public static extern void glLighti(int light, int pname, int param);

        [DllImport("opengl32.dll", EntryPoint = "glLightiv"), SuppressUnmanagedCodeSecurity]
        public static extern void glLightiv(int light, int pname, ref int arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glLightiv"), SuppressUnmanagedCodeSecurity]
        public static extern void glLightiv(int light, int pname, int[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glLightModelf"), SuppressUnmanagedCodeSecurity]
        public static extern void glLightModelf(int pname, float param);

        [DllImport("opengl32.dll", EntryPoint = "glLightModelfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glLightModelfv(int pname, ref float arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glLightModelfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glLightModelfv(int pname, float[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glLightModeli"), SuppressUnmanagedCodeSecurity]
        public static extern void glLightModeli(int pname, int param);

        [DllImport("opengl32.dll", EntryPoint = "glLightModeliv"), SuppressUnmanagedCodeSecurity]
        public static extern void glLightModeliv(int pname, ref int arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glLightModeliv"), SuppressUnmanagedCodeSecurity]
        public static extern void glLightModeliv(int pname, int[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glLineStipple"), SuppressUnmanagedCodeSecurity]
        public static extern void glLineStipple(int factor, short pattern);

        [DllImport("opengl32.dll", EntryPoint = "glLineStipple"), SuppressUnmanagedCodeSecurity]
        public static extern void glLineStipple(int factor, ushort pattern);

        [DllImport("opengl32.dll", EntryPoint = "glLineWidth"), SuppressUnmanagedCodeSecurity]
        public static extern void glLineWidth(float width);

        [DllImport("opengl32.dll", EntryPoint = "glMaterialf"), SuppressUnmanagedCodeSecurity]
        public static extern void glMaterialf(int face, int pname, float param);

        [DllImport("opengl32.dll", EntryPoint = "glMaterialfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glMaterialfv(int face, int pname, ref float arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glMaterialfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glMaterialfv(int face, int pname, float[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glMateriali"), SuppressUnmanagedCodeSecurity]
        public static extern void glMateriali(int face, int pname, int param);

        [DllImport("opengl32.dll", EntryPoint = "glMaterialiv"), SuppressUnmanagedCodeSecurity]
        public static extern void glMaterialiv(int face, int pname, ref int arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glMaterialiv"), SuppressUnmanagedCodeSecurity]
        public static extern void glMaterialiv(int face, int pname, int[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glPointSize"), SuppressUnmanagedCodeSecurity]
        public static extern void glPointSize(float size);

        [DllImport("opengl32.dll", EntryPoint = "glPolygonMode"), SuppressUnmanagedCodeSecurity]
        public static extern void glPolygonMode(int face, int mode);

        [DllImport("opengl32.dll", EntryPoint = "glPolygonStipple"), SuppressUnmanagedCodeSecurity]
        public static extern void glPolygonStipple(ref byte mask);

        [DllImport("opengl32.dll", EntryPoint = "glPolygonStipple"), SuppressUnmanagedCodeSecurity]
        public static extern void glPolygonStipple(byte[] mask);

        [DllImport("opengl32.dll", EntryPoint = "glScissor"), SuppressUnmanagedCodeSecurity]
        public static extern void glScissor(int x, int y, int width, int height);

        [DllImport("opengl32.dll", EntryPoint = "glShadeModel"), SuppressUnmanagedCodeSecurity]
        public static extern void glShadeModel(int mode);

        [DllImport("opengl32.dll", EntryPoint = "glTexParameterf"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexParameterf(int target, int pname, float param);

        [DllImport("opengl32.dll", EntryPoint = "glTexParameterfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexParameterfv(int target, int pname, ref float arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glTexParameterfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexParameterfv(int target, int pname, float[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glTexParameteri"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexParameteri(int target, int pname, int param);

        [DllImport("opengl32.dll", EntryPoint = "glTexParameteriv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexParameteriv(int target, int pname, ref int arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glTexParameteriv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexParameteriv(int target, int pname, int[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, bool[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, byte[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, short[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, int[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, float[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, double[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, string pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, IntPtr pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, ref sbyte pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, sbyte[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, sbyte[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, sbyte[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, ref ushort pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, ushort[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, ushort[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, ushort[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, ref uint pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, uint[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, uint[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, uint[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, ref bool pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, bool[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, bool[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, ref byte pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, byte[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, byte[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, ref short pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, short[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, short[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, ref int pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, int[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, int[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, ref float pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, float[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, float[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, ref double pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, double[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, double[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, bool[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, byte[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, short[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, int[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, float[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, double[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, string pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, IntPtr pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, ref sbyte pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, sbyte[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, sbyte[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, sbyte[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, ref ushort pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, ushort[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, ushort[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, ushort[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, ref uint pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, uint[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, uint[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, uint[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, ref bool pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, bool[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, bool[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, ref byte pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, byte[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, byte[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, ref short pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, short[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, short[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, ref int pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, int[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, int[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, ref float pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, float[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, float[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, ref double pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, double[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, double[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glTexEnvf"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexEnvf(int target, int pname, float param);

        [DllImport("opengl32.dll", EntryPoint = "glTexEnvfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexEnvfv(int target, int pname, ref float arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glTexEnvfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexEnvfv(int target, int pname, float[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glTexEnvi"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexEnvi(int target, int pname, int param);

        [DllImport("opengl32.dll", EntryPoint = "glTexEnviv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexEnviv(int target, int pname, ref int arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glTexEnviv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexEnviv(int target, int pname, int[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glTexGend"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexGend(int coord, int pname, double param);

        [DllImport("opengl32.dll", EntryPoint = "glTexGendv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexGendv(int coord, int pname, ref double arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glTexGendv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexGendv(int coord, int pname, double[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glTexGenf"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexGenf(int coord, int pname, float param);

        [DllImport("opengl32.dll", EntryPoint = "glTexGenfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexGenfv(int coord, int pname, ref float arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glTexGenfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexGenfv(int coord, int pname, float[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glTexGeni"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexGeni(int coord, int pname, int param);

        [DllImport("opengl32.dll", EntryPoint = "glTexGeniv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexGeniv(int coord, int pname, ref int arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glTexGeniv"), SuppressUnmanagedCodeSecurity]
        public static extern void glTexGeniv(int coord, int pname, int[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glFeedbackBuffer"), SuppressUnmanagedCodeSecurity]
        public static extern void glFeedbackBuffer(int size, int type, out float buffer);

        [DllImport("opengl32.dll", EntryPoint = "glFeedbackBuffer"), SuppressUnmanagedCodeSecurity]
        public static extern void glFeedbackBuffer(int size, int type, [Out] float[] buffer);

        [DllImport("opengl32.dll", EntryPoint = "glSelectBuffer"), SuppressUnmanagedCodeSecurity]
        public static extern void glSelectBuffer(int size, out int buffer);

        [DllImport("opengl32.dll", EntryPoint = "glSelectBuffer"), SuppressUnmanagedCodeSecurity]
        public static extern void glSelectBuffer(int size, [Out] int[] buffer);

        [DllImport("opengl32.dll", EntryPoint = "glSelectBuffer"), SuppressUnmanagedCodeSecurity]
        public static extern void glSelectBuffer(int size, out uint buffer);

        [DllImport("opengl32.dll", EntryPoint = "glSelectBuffer"), SuppressUnmanagedCodeSecurity]
        public static extern void glSelectBuffer(int size, [Out] uint[] buffer);

        [DllImport("opengl32.dll", EntryPoint = "glRenderMode"), SuppressUnmanagedCodeSecurity]
        public static extern int glRenderMode(int mode);

        [DllImport("opengl32.dll", EntryPoint = "glInitNames"), SuppressUnmanagedCodeSecurity]
        public static extern void glInitNames();

        [DllImport("opengl32.dll", EntryPoint = "glLoadName"), SuppressUnmanagedCodeSecurity]
        public static extern void glLoadName(int name);

        [DllImport("opengl32.dll", EntryPoint = "glLoadName"), SuppressUnmanagedCodeSecurity]
        public static extern void glLoadName(uint name);

        [DllImport("opengl32.dll", EntryPoint = "glPassThrough"), SuppressUnmanagedCodeSecurity]
        public static extern void glPassThrough(float token);

        [DllImport("opengl32.dll", EntryPoint = "glPopName"), SuppressUnmanagedCodeSecurity]
        public static extern void glPopName();

        [DllImport("opengl32.dll", EntryPoint = "glPushName"), SuppressUnmanagedCodeSecurity]
        public static extern void glPushName(int name);

        [DllImport("opengl32.dll", EntryPoint = "glPushName"), SuppressUnmanagedCodeSecurity]
        public static extern void glPushName(uint name);

        [DllImport("opengl32.dll", EntryPoint = "glDrawBuffer"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawBuffer(int mode);

        [DllImport("opengl32.dll", EntryPoint = "glClear"), SuppressUnmanagedCodeSecurity]
        public static extern void glClear(int mask);

        [DllImport("opengl32.dll", EntryPoint = "glClear"), SuppressUnmanagedCodeSecurity]
        public static extern void glClear(uint mask);

        [DllImport("opengl32.dll", EntryPoint = "glClearAccum"), SuppressUnmanagedCodeSecurity]
        public static extern void glClearAccum(float red, float green, float blue, float alpha);

        [DllImport("opengl32.dll", EntryPoint = "glClearIndex"), SuppressUnmanagedCodeSecurity]
        public static extern void glClearIndex(float c);

        [DllImport("opengl32.dll", EntryPoint = "glClearColor"), SuppressUnmanagedCodeSecurity]
        public static extern void glClearColor(float red, float green, float blue, float alpha);

        [DllImport("opengl32.dll", EntryPoint = "glClearStencil"), SuppressUnmanagedCodeSecurity]
        public static extern void glClearStencil(int s);

        [DllImport("opengl32.dll", EntryPoint = "glClearDepth"), SuppressUnmanagedCodeSecurity]
        public static extern void glClearDepth(double depth);

        [DllImport("opengl32.dll", EntryPoint = "glStencilMask"), SuppressUnmanagedCodeSecurity]
        public static extern void glStencilMask(int mask);

        [DllImport("opengl32.dll", EntryPoint = "glStencilMask"), SuppressUnmanagedCodeSecurity]
        public static extern void glStencilMask(uint mask);

        [DllImport("opengl32.dll", EntryPoint = "glColorMask"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorMask(int red, int green, int blue, int alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColorMask"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorMask(bool red, int green, int blue, int alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColorMask"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorMask(int red, bool green, int blue, int alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColorMask"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorMask(bool red, bool green, int blue, int alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColorMask"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorMask(int red, int green, bool blue, int alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColorMask"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorMask(bool red, int green, bool blue, int alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColorMask"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorMask(int red, bool green, bool blue, int alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColorMask"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorMask(bool red, bool green, bool blue, int alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColorMask"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorMask(int red, int green, int blue, bool alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColorMask"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorMask(bool red, int green, int blue, bool alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColorMask"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorMask(int red, bool green, int blue, bool alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColorMask"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorMask(bool red, bool green, int blue, bool alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColorMask"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorMask(int red, int green, bool blue, bool alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColorMask"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorMask(bool red, int green, bool blue, bool alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColorMask"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorMask(int red, bool green, bool blue, bool alpha);

        [DllImport("opengl32.dll", EntryPoint = "glColorMask"), SuppressUnmanagedCodeSecurity]
        public static extern void glColorMask(bool red, bool green, bool blue, bool alpha);

        [DllImport("opengl32.dll", EntryPoint = "glDepthMask"), SuppressUnmanagedCodeSecurity]
        public static extern void glDepthMask(int flag);

        [DllImport("opengl32.dll", EntryPoint = "glDepthMask"), SuppressUnmanagedCodeSecurity]
        public static extern void glDepthMask(bool flag);

        [DllImport("opengl32.dll", EntryPoint = "glIndexMask"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexMask(int mask);

        [DllImport("opengl32.dll", EntryPoint = "glIndexMask"), SuppressUnmanagedCodeSecurity]
        public static extern void glIndexMask(uint mask);

        [DllImport("opengl32.dll", EntryPoint = "glAccum"), SuppressUnmanagedCodeSecurity]
        public static extern void glAccum(int op, float value);

        [DllImport("opengl32.dll", EntryPoint = "glDisable"), SuppressUnmanagedCodeSecurity]
        public static extern void glDisable(int cap);

        [DllImport("opengl32.dll", EntryPoint = "glEnable"), SuppressUnmanagedCodeSecurity]
        public static extern void glEnable(int cap);

        [DllImport("opengl32.dll", EntryPoint = "glFinish"), SuppressUnmanagedCodeSecurity]
        public static extern void glFinish();

        [DllImport("opengl32.dll", EntryPoint = "glFlush"), SuppressUnmanagedCodeSecurity]
        public static extern void glFlush();

        [DllImport("opengl32.dll", EntryPoint = "glPopAttrib"), SuppressUnmanagedCodeSecurity]
        public static extern void glPopAttrib();

        [DllImport("opengl32.dll", EntryPoint = "glPushAttrib"), SuppressUnmanagedCodeSecurity]
        public static extern void glPushAttrib(int mask);

        [DllImport("opengl32.dll", EntryPoint = "glPushAttrib"), SuppressUnmanagedCodeSecurity]
        public static extern void glPushAttrib(uint mask);

        [DllImport("opengl32.dll", EntryPoint = "glMap1d"), SuppressUnmanagedCodeSecurity]
        public static extern void glMap1d(int target, double u1, double u2, int stride, int order, ref double points);

        [DllImport("opengl32.dll", EntryPoint = "glMap1d"), SuppressUnmanagedCodeSecurity]
        public static extern void glMap1d(int target, double u1, double u2, int stride, int order, double[] points);

        [DllImport("opengl32.dll", EntryPoint = "glMap1f"), SuppressUnmanagedCodeSecurity]
        public static extern void glMap1f(int target, float u1, float u2, int stride, int order, ref float points);

        [DllImport("opengl32.dll", EntryPoint = "glMap1f"), SuppressUnmanagedCodeSecurity]
        public static extern void glMap1f(int target, float u1, float u2, int stride, int order, float[] points);

        [DllImport("opengl32.dll", EntryPoint = "glMap2d"), SuppressUnmanagedCodeSecurity]
        public static extern void glMap2d(int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, ref double points);

        [DllImport("opengl32.dll", EntryPoint = "glMap2d"), SuppressUnmanagedCodeSecurity]
        public static extern void glMap2d(int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double[] points);

        [DllImport("opengl32.dll", EntryPoint = "glMap2f"), SuppressUnmanagedCodeSecurity]
        public static extern void glMap2f(int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, ref float points);

        [DllImport("opengl32.dll", EntryPoint = "glMap2f"), SuppressUnmanagedCodeSecurity]
        public static extern void glMap2f(int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float[] points);

        [DllImport("opengl32.dll", EntryPoint = "glMapGrid1d"), SuppressUnmanagedCodeSecurity]
        public static extern void glMapGrid1d(int un, double u1, double u2);

        [DllImport("opengl32.dll", EntryPoint = "glMapGrid1f"), SuppressUnmanagedCodeSecurity]
        public static extern void glMapGrid1f(int un, float u1, float u2);

        [DllImport("opengl32.dll", EntryPoint = "glMapGrid2d"), SuppressUnmanagedCodeSecurity]
        public static extern void glMapGrid2d(int un, double u1, double u2, int vn, double v1, double v2);

        [DllImport("opengl32.dll", EntryPoint = "glMapGrid2f"), SuppressUnmanagedCodeSecurity]
        public static extern void glMapGrid2f(int un, float u1, float u2, int vn, float v1, float v2);

        [DllImport("opengl32.dll", EntryPoint = "glEvalCoord1d"), SuppressUnmanagedCodeSecurity]
        public static extern void glEvalCoord1d(double u);

        [DllImport("opengl32.dll", EntryPoint = "glEvalCoord1dv"), SuppressUnmanagedCodeSecurity]
        public static extern void glEvalCoord1dv(ref double u);

        [DllImport("opengl32.dll", EntryPoint = "glEvalCoord1dv"), SuppressUnmanagedCodeSecurity]
        public static extern void glEvalCoord1dv(double[] u);

        [DllImport("opengl32.dll", EntryPoint = "glEvalCoord1f"), SuppressUnmanagedCodeSecurity]
        public static extern void glEvalCoord1f(float u);

        [DllImport("opengl32.dll", EntryPoint = "glEvalCoord1fv"), SuppressUnmanagedCodeSecurity]
        public static extern void glEvalCoord1fv(ref float u);

        [DllImport("opengl32.dll", EntryPoint = "glEvalCoord1fv"), SuppressUnmanagedCodeSecurity]
        public static extern void glEvalCoord1fv(float[] u);

        [DllImport("opengl32.dll", EntryPoint = "glEvalCoord2d"), SuppressUnmanagedCodeSecurity]
        public static extern void glEvalCoord2d(double u, double v);

        [DllImport("opengl32.dll", EntryPoint = "glEvalCoord2dv"), SuppressUnmanagedCodeSecurity]
        public static extern void glEvalCoord2dv(ref double u);

        [DllImport("opengl32.dll", EntryPoint = "glEvalCoord2dv"), SuppressUnmanagedCodeSecurity]
        public static extern void glEvalCoord2dv(double[] u);

        [DllImport("opengl32.dll", EntryPoint = "glEvalCoord2f"), SuppressUnmanagedCodeSecurity]
        public static extern void glEvalCoord2f(float u, float v);

        [DllImport("opengl32.dll", EntryPoint = "glEvalCoord2fv"), SuppressUnmanagedCodeSecurity]
        public static extern void glEvalCoord2fv(ref float u);

        [DllImport("opengl32.dll", EntryPoint = "glEvalCoord2fv"), SuppressUnmanagedCodeSecurity]
        public static extern void glEvalCoord2fv(float[] u);

        [DllImport("opengl32.dll", EntryPoint = "glEvalMesh1"), SuppressUnmanagedCodeSecurity]
        public static extern void glEvalMesh1(int mode, int i1, int i2);

        [DllImport("opengl32.dll", EntryPoint = "glEvalPoint1"), SuppressUnmanagedCodeSecurity]
        public static extern void glEvalPoint1(int i);

        [DllImport("opengl32.dll", EntryPoint = "glEvalMesh2"), SuppressUnmanagedCodeSecurity]
        public static extern void glEvalMesh2(int mode, int i1, int i2, int j1, int j2);

        [DllImport("opengl32.dll", EntryPoint = "glEvalPoint2"), SuppressUnmanagedCodeSecurity]
        public static extern void glEvalPoint2(int i, int j);

        [DllImport("opengl32.dll", EntryPoint = "glAlphaFunc"), SuppressUnmanagedCodeSecurity]
        public static extern void glAlphaFunc(int func, float arg_ref);

        [DllImport("opengl32.dll", EntryPoint = "glBlendFunc"), SuppressUnmanagedCodeSecurity]
        public static extern void glBlendFunc(int sfactor, int dfactor);

        [DllImport("opengl32.dll", EntryPoint = "glLogicOp"), SuppressUnmanagedCodeSecurity]
        public static extern void glLogicOp(int opcode);

        [DllImport("opengl32.dll", EntryPoint = "glStencilFunc"), SuppressUnmanagedCodeSecurity]
        public static extern void glStencilFunc(int func, int arg_ref, int mask);

        [DllImport("opengl32.dll", EntryPoint = "glStencilFunc"), SuppressUnmanagedCodeSecurity]
        public static extern void glStencilFunc(int func, int arg_ref, uint mask);

        [DllImport("opengl32.dll", EntryPoint = "glStencilOp"), SuppressUnmanagedCodeSecurity]
        public static extern void glStencilOp(int fail, int zfail, int zpass);

        [DllImport("opengl32.dll", EntryPoint = "glDepthFunc"), SuppressUnmanagedCodeSecurity]
        public static extern void glDepthFunc(int func);

        [DllImport("opengl32.dll", EntryPoint = "glPixelZoom"), SuppressUnmanagedCodeSecurity]
        public static extern void glPixelZoom(float xfactor, float yfactor);

        [DllImport("opengl32.dll", EntryPoint = "glPixelTransferf"), SuppressUnmanagedCodeSecurity]
        public static extern void glPixelTransferf(int pname, float param);

        [DllImport("opengl32.dll", EntryPoint = "glPixelTransferi"), SuppressUnmanagedCodeSecurity]
        public static extern void glPixelTransferi(int pname, int param);

        [DllImport("opengl32.dll", EntryPoint = "glPixelStoref"), SuppressUnmanagedCodeSecurity]
        public static extern void glPixelStoref(int pname, float param);

        [DllImport("opengl32.dll", EntryPoint = "glPixelStorei"), SuppressUnmanagedCodeSecurity]
        public static extern void glPixelStorei(int pname, int param);

        [DllImport("opengl32.dll", EntryPoint = "glPixelMapfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glPixelMapfv(int map, int mapsize, ref float values);

        [DllImport("opengl32.dll", EntryPoint = "glPixelMapfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glPixelMapfv(int map, int mapsize, float[] values);

        [DllImport("opengl32.dll", EntryPoint = "glPixelMapuiv"), SuppressUnmanagedCodeSecurity]
        public static extern void glPixelMapuiv(int map, int mapsize, ref int values);

        [DllImport("opengl32.dll", EntryPoint = "glPixelMapuiv"), SuppressUnmanagedCodeSecurity]
        public static extern void glPixelMapuiv(int map, int mapsize, int[] values);

        [DllImport("opengl32.dll", EntryPoint = "glPixelMapuiv"), SuppressUnmanagedCodeSecurity]
        public static extern void glPixelMapuiv(int map, int mapsize, ref uint values);

        [DllImport("opengl32.dll", EntryPoint = "glPixelMapuiv"), SuppressUnmanagedCodeSecurity]
        public static extern void glPixelMapuiv(int map, int mapsize, uint[] values);

        [DllImport("opengl32.dll", EntryPoint = "glPixelMapusv"), SuppressUnmanagedCodeSecurity]
        public static extern void glPixelMapusv(int map, int mapsize, ref short values);

        [DllImport("opengl32.dll", EntryPoint = "glPixelMapusv"), SuppressUnmanagedCodeSecurity]
        public static extern void glPixelMapusv(int map, int mapsize, short[] values);

        [DllImport("opengl32.dll", EntryPoint = "glPixelMapusv"), SuppressUnmanagedCodeSecurity]
        public static extern void glPixelMapusv(int map, int mapsize, ref ushort values);

        [DllImport("opengl32.dll", EntryPoint = "glPixelMapusv"), SuppressUnmanagedCodeSecurity]
        public static extern void glPixelMapusv(int map, int mapsize, ushort[] values);

        [DllImport("opengl32.dll", EntryPoint = "glReadBuffer"), SuppressUnmanagedCodeSecurity]
        public static extern void glReadBuffer(int mode);

        [DllImport("opengl32.dll", EntryPoint = "glCopyPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glCopyPixels(int x, int y, int width, int height, int type);

        [DllImport("opengl32.dll", EntryPoint = "glReadPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glReadPixels(int x, int y, int width, int height, int format, int type, [Out] bool[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glReadPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glReadPixels(int x, int y, int width, int height, int format, int type, [Out] byte[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glReadPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glReadPixels(int x, int y, int width, int height, int format, int type, [Out] short[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glReadPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glReadPixels(int x, int y, int width, int height, int format, int type, [Out] int[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glReadPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glReadPixels(int x, int y, int width, int height, int format, int type, [Out] float[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glReadPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glReadPixels(int x, int y, int width, int height, int format, int type, [Out] double[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glReadPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glReadPixels(int x, int y, int width, int height, int format, int type, IntPtr pixels);

        [DllImport("opengl32.dll", EntryPoint = "glReadPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glReadPixels(int x, int y, int width, int height, int format, int type, out bool pixels);

        [DllImport("opengl32.dll", EntryPoint = "glReadPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glReadPixels(int x, int y, int width, int height, int format, int type, out byte pixels);

        [DllImport("opengl32.dll", EntryPoint = "glReadPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glReadPixels(int x, int y, int width, int height, int format, int type, out short pixels);

        [DllImport("opengl32.dll", EntryPoint = "glReadPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glReadPixels(int x, int y, int width, int height, int format, int type, out int pixels);

        [DllImport("opengl32.dll", EntryPoint = "glReadPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glReadPixels(int x, int y, int width, int height, int format, int type, out float pixels);

        [DllImport("opengl32.dll", EntryPoint = "glReadPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glReadPixels(int x, int y, int width, int height, int format, int type, out double pixels);

        [DllImport("opengl32.dll", EntryPoint = "glReadPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glReadPixels(int x, int y, int width, int height, int format, int type, out sbyte pixels);

        [DllImport("opengl32.dll", EntryPoint = "glReadPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glReadPixels(int x, int y, int width, int height, int format, int type, [Out] sbyte[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glReadPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glReadPixels(int x, int y, int width, int height, int format, int type, out ushort pixels);

        [DllImport("opengl32.dll", EntryPoint = "glReadPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glReadPixels(int x, int y, int width, int height, int format, int type, [Out] ushort[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glReadPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glReadPixels(int x, int y, int width, int height, int format, int type, out uint pixels);

        [DllImport("opengl32.dll", EntryPoint = "glReadPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glReadPixels(int x, int y, int width, int height, int format, int type, [Out] uint[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, bool[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, byte[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, short[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, int[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, float[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, double[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, string pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, IntPtr pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, ref sbyte pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, sbyte[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, sbyte[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, sbyte[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, ref ushort pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, ushort[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, ushort[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, ushort[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, ref uint pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, uint[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, uint[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, uint[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, ref bool pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, bool[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, bool[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, ref byte pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, byte[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, byte[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, ref short pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, short[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, short[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, ref int pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, int[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, int[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, ref float pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, float[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, float[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, ref double pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, double[,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glDrawPixels"), SuppressUnmanagedCodeSecurity]
        public static extern void glDrawPixels(int width, int height, int format, int type, double[,,] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glGetBooleanv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetBooleanv(int pname, out int arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetBooleanv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetBooleanv(int pname, [Out] int[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetBooleanv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetBooleanv(int pname, out bool arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetBooleanv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetBooleanv(int pname, [Out] bool[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetClipPlane"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetClipPlane(int plane, out double equation);

        [DllImport("opengl32.dll", EntryPoint = "glGetClipPlane"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetClipPlane(int plane, [Out] double[] equation);

        [DllImport("opengl32.dll", EntryPoint = "glGetDoublev"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetDoublev(int pname, out double arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetDoublev"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetDoublev(int pname, [Out] double[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetError"), SuppressUnmanagedCodeSecurity]
        public static extern int glGetError();

        [DllImport("opengl32.dll", EntryPoint = "glGetFloatv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetFloatv(int pname, out float arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetFloatv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetFloatv(int pname, [Out] float[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetIntegerv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetIntegerv(int pname, out int arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetIntegerv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetIntegerv(int pname, [Out] int[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetLightfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetLightfv(int light, int pname, out float arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetLightfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetLightfv(int light, int pname, [Out] float[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetLightiv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetLightiv(int light, int pname, out int arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetLightiv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetLightiv(int light, int pname, [Out] int[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetMapdv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetMapdv(int target, int query, out double v);

        [DllImport("opengl32.dll", EntryPoint = "glGetMapdv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetMapdv(int target, int query, [Out] double[] v);

        [DllImport("opengl32.dll", EntryPoint = "glGetMapfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetMapfv(int target, int query, out float v);

        [DllImport("opengl32.dll", EntryPoint = "glGetMapfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetMapfv(int target, int query, [Out] float[] v);

        [DllImport("opengl32.dll", EntryPoint = "glGetMapiv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetMapiv(int target, int query, out int v);

        [DllImport("opengl32.dll", EntryPoint = "glGetMapiv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetMapiv(int target, int query, [Out] int[] v);

        [DllImport("opengl32.dll", EntryPoint = "glGetMaterialfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetMaterialfv(int face, int pname, out float arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetMaterialfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetMaterialfv(int face, int pname, [Out] float[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetMaterialiv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetMaterialiv(int face, int pname, out int arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetMaterialiv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetMaterialiv(int face, int pname, [Out] int[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetPixelMapfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPixelMapfv(int map, out float values);

        [DllImport("opengl32.dll", EntryPoint = "glGetPixelMapfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPixelMapfv(int map, [Out] float[] values);

        [DllImport("opengl32.dll", EntryPoint = "glGetPixelMapuiv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPixelMapuiv(int map, out int values);

        [DllImport("opengl32.dll", EntryPoint = "glGetPixelMapuiv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPixelMapuiv(int map, [Out] int[] values);

        [DllImport("opengl32.dll", EntryPoint = "glGetPixelMapuiv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPixelMapuiv(int map, out uint values);

        [DllImport("opengl32.dll", EntryPoint = "glGetPixelMapuiv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPixelMapuiv(int map, [Out] uint[] values);

        [DllImport("opengl32.dll", EntryPoint = "glGetPixelMapusv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPixelMapusv(int map, out short values);

        [DllImport("opengl32.dll", EntryPoint = "glGetPixelMapusv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPixelMapusv(int map, [Out] short[] values);

        [DllImport("opengl32.dll", EntryPoint = "glGetPixelMapusv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPixelMapusv(int map, out ushort values);

        [DllImport("opengl32.dll", EntryPoint = "glGetPixelMapusv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPixelMapusv(int map, [Out] ushort[] values);

        [DllImport("opengl32.dll", EntryPoint = "glGetPolygonStipple"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPolygonStipple(out byte mask);

        [DllImport("opengl32.dll", EntryPoint = "glGetPolygonStipple"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetPolygonStipple([Out] byte[] mask);

        [DllImport("opengl32.dll", EntryPoint = "glGetString"), SuppressUnmanagedCodeSecurity]
        public static extern IntPtr glGetString(int name);

        [DllImport("opengl32.dll", EntryPoint = "glGetTexEnvfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexEnvfv(int target, int pname, out float arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetTexEnvfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexEnvfv(int target, int pname, [Out] float[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetTexEnviv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexEnviv(int target, int pname, out int arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetTexEnviv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexEnviv(int target, int pname, [Out] int[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetTexGendv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexGendv(int coord, int pname, out double arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetTexGendv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexGendv(int coord, int pname, [Out] double[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetTexGenfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexGenfv(int coord, int pname, out float arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetTexGenfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexGenfv(int coord, int pname, [Out] float[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetTexGeniv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexGeniv(int coord, int pname, out int arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetTexGeniv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexGeniv(int coord, int pname, [Out] int[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetTexImage"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int target, int level, int format, int type, [Out] bool[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glGetTexImage"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int target, int level, int format, int type, [Out] byte[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glGetTexImage"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int target, int level, int format, int type, [Out] short[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glGetTexImage"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int target, int level, int format, int type, [Out] int[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glGetTexImage"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int target, int level, int format, int type, [Out] float[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glGetTexImage"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int target, int level, int format, int type, [Out] double[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glGetTexImage"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int target, int level, int format, int type, IntPtr pixels);

        [DllImport("opengl32.dll", EntryPoint = "glGetTexImage"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int target, int level, int format, int type, out bool pixels);

        [DllImport("opengl32.dll", EntryPoint = "glGetTexImage"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int target, int level, int format, int type, out byte pixels);

        [DllImport("opengl32.dll", EntryPoint = "glGetTexImage"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int target, int level, int format, int type, out short pixels);

        [DllImport("opengl32.dll", EntryPoint = "glGetTexImage"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int target, int level, int format, int type, out int pixels);

        [DllImport("opengl32.dll", EntryPoint = "glGetTexImage"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int target, int level, int format, int type, out float pixels);

        [DllImport("opengl32.dll", EntryPoint = "glGetTexImage"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int target, int level, int format, int type, out double pixels);

        [DllImport("opengl32.dll", EntryPoint = "glGetTexImage"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int target, int level, int format, int type, out sbyte pixels);

        [DllImport("opengl32.dll", EntryPoint = "glGetTexImage"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int target, int level, int format, int type, [Out] sbyte[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glGetTexImage"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int target, int level, int format, int type, out ushort pixels);

        [DllImport("opengl32.dll", EntryPoint = "glGetTexImage"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int target, int level, int format, int type, [Out] ushort[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glGetTexImage"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int target, int level, int format, int type, out uint pixels);

        [DllImport("opengl32.dll", EntryPoint = "glGetTexImage"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexImage(int target, int level, int format, int type, [Out] uint[] pixels);

        [DllImport("opengl32.dll", EntryPoint = "glGetTexParameterfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexParameterfv(int target, int pname, out float arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetTexParameterfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexParameterfv(int target, int pname, [Out] float[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetTexParameteriv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexParameteriv(int target, int pname, out int arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetTexParameteriv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexParameteriv(int target, int pname, [Out] int[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetTexLevelParameterfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexLevelParameterfv(int target, int level, int pname, out float arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetTexLevelParameterfv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexLevelParameterfv(int target, int level, int pname, [Out] float[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetTexLevelParameteriv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexLevelParameteriv(int target, int level, int pname, out int arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glGetTexLevelParameteriv"), SuppressUnmanagedCodeSecurity]
        public static extern void glGetTexLevelParameteriv(int target, int level, int pname, [Out] int[] arg_params);

        [DllImport("opengl32.dll", EntryPoint = "glIsEnabled"), SuppressUnmanagedCodeSecurity]
        public static extern int glIsEnabled(int cap);

        [DllImport("opengl32.dll", EntryPoint = "glIsList"), SuppressUnmanagedCodeSecurity]
        public static extern int glIsList(int list);

        [DllImport("opengl32.dll", EntryPoint = "glIsList"), SuppressUnmanagedCodeSecurity]
        public static extern int glIsList(uint list);

        [DllImport("opengl32.dll", EntryPoint = "glDepthRange"), SuppressUnmanagedCodeSecurity]
        public static extern void glDepthRange(double near, double far);

        [DllImport("opengl32.dll", EntryPoint = "glFrustum"), SuppressUnmanagedCodeSecurity]
        public static extern void glFrustum(double left, double right, double bottom, double top, double zNear, double zFar);

        [DllImport("opengl32.dll", EntryPoint = "glLoadIdentity"), SuppressUnmanagedCodeSecurity]
        public static extern void glLoadIdentity();

        [DllImport("opengl32.dll", EntryPoint = "glLoadMatrixf"), SuppressUnmanagedCodeSecurity]
        public static extern void glLoadMatrixf(ref float m);

        [DllImport("opengl32.dll", EntryPoint = "glLoadMatrixf"), SuppressUnmanagedCodeSecurity]
        public static extern void glLoadMatrixf(float[] m);

        [DllImport("opengl32.dll", EntryPoint = "glLoadMatrixd"), SuppressUnmanagedCodeSecurity]
        public static extern void glLoadMatrixd(ref double m);

        [DllImport("opengl32.dll", EntryPoint = "glLoadMatrixd"), SuppressUnmanagedCodeSecurity]
        public static extern void glLoadMatrixd(double[] m);

        [DllImport("opengl32.dll", EntryPoint = "glMatrixMode"), SuppressUnmanagedCodeSecurity]
        public static extern void glMatrixMode(int mode);

        [DllImport("opengl32.dll", EntryPoint = "glMultMatrixf"), SuppressUnmanagedCodeSecurity]
        public static extern void glMultMatrixf(ref float m);

        [DllImport("opengl32.dll", EntryPoint = "glMultMatrixf"), SuppressUnmanagedCodeSecurity]
        public static extern void glMultMatrixf(float[] m);

        [DllImport("opengl32.dll", EntryPoint = "glMultMatrixd"), SuppressUnmanagedCodeSecurity]
        public static extern void glMultMatrixd(ref double m);

        [DllImport("opengl32.dll", EntryPoint = "glMultMatrixd"), SuppressUnmanagedCodeSecurity]
        public static extern void glMultMatrixd(double[] m);

        [DllImport("opengl32.dll", EntryPoint = "glOrtho"), SuppressUnmanagedCodeSecurity]
        public static extern void glOrtho(double left, double right, double bottom, double top, double zNear, double zFar);

        [DllImport("opengl32.dll", EntryPoint = "glPopMatrix"), SuppressUnmanagedCodeSecurity]
        public static extern void glPopMatrix();

        [DllImport("opengl32.dll", EntryPoint = "glPushMatrix"), SuppressUnmanagedCodeSecurity]
        public static extern void glPushMatrix();

        [DllImport("opengl32.dll", EntryPoint = "glRotated"), SuppressUnmanagedCodeSecurity]
        public static extern void glRotated(double angle, double x, double y, double z);

        [DllImport("opengl32.dll", EntryPoint = "glRotatef"), SuppressUnmanagedCodeSecurity]
        public static extern void glRotatef(float angle, float x, float y, float z);

        [DllImport("opengl32.dll", EntryPoint = "glScaled"), SuppressUnmanagedCodeSecurity]
        public static extern void glScaled(double x, double y, double z);

        [DllImport("opengl32.dll", EntryPoint = "glScalef"), SuppressUnmanagedCodeSecurity]
        public static extern void glScalef(float x, float y, float z);

        [DllImport("opengl32.dll", EntryPoint = "glTranslated"), SuppressUnmanagedCodeSecurity]
        public static extern void glTranslated(double x, double y, double z);

        [DllImport("opengl32.dll", EntryPoint = "glTranslatef"), SuppressUnmanagedCodeSecurity]
        public static extern void glTranslatef(float x, float y, float z);

        [DllImport("opengl32.dll", EntryPoint = "glViewport"), SuppressUnmanagedCodeSecurity]
        public static extern void glViewport(int x, int y, int width, int height);

        /*
        [OpenGLExtensionImport("GL_3DFX_tbuffer", "glTbufferMask3DFX")]
        public static IntPtr ext__GL_3DFX_tbuffer__glTbufferMask3DFX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_3DFX_tbuffer", "glTbufferMask3DFX"), SuppressUnmanagedCodeSecurity]
        public static void glTbufferMask3DFX(int mask)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_3DFX_tbuffer", "glTbufferMask3DFX"), SuppressUnmanagedCodeSecurity]
        public static void glTbufferMask3DFX(uint mask)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE")]
        public static IntPtr ext__GL_APPLE_element_array__glElementPointerAPPLE = IntPtr.Zero;

        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, string pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, ref sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, sbyte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, sbyte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, ref ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, ushort[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, ushort[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, ref uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, uint[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, uint[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, uint[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, ref bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, bool[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, bool[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, ref byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, byte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, byte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, ref short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, short[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, short[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, ref int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, int[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, int[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, ref float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, float[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, float[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, ref double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, double[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerAPPLE(int type, double[, ,] pointer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_APPLE_element_array", "glDrawElementArrayAPPLE")]
        public static IntPtr ext__GL_APPLE_element_array__glDrawElementArrayAPPLE = IntPtr.Zero;

        [OpenGLExtensionImport("GL_APPLE_element_array", "glDrawElementArrayAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glDrawElementArrayAPPLE(int mode, int first, int count)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_APPLE_element_array", "glDrawRangeElementArrayAPPLE")]
        public static IntPtr ext__GL_APPLE_element_array__glDrawRangeElementArrayAPPLE = IntPtr.Zero;

        [OpenGLExtensionImport("GL_APPLE_element_array", "glDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementArrayAPPLE(int mode, int start, int end, int first, int count)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementArrayAPPLE(int mode, uint start, int end, int first, int count)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementArrayAPPLE(int mode, int start, uint end, int first, int count)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementArrayAPPLE(int mode, uint start, uint end, int first, int count)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawElementArrayAPPLE")]
        public static IntPtr ext__GL_APPLE_element_array__glMultiDrawElementArrayAPPLE = IntPtr.Zero;

        [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawElementArrayAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementArrayAPPLE(int mode, ref int first, ref int count, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawElementArrayAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementArrayAPPLE(int mode, int[] first, ref int count, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawElementArrayAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementArrayAPPLE(int mode, ref int first, int[] count, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawElementArrayAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementArrayAPPLE(int mode, int[] first, int[] count, int primcount)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawRangeElementArrayAPPLE")]
        public static IntPtr ext__GL_APPLE_element_array__glMultiDrawRangeElementArrayAPPLE = IntPtr.Zero;

        [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawRangeElementArrayAPPLE(int mode, int start, int end, ref int first, ref int count, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawRangeElementArrayAPPLE(int mode, uint start, int end, ref int first, ref int count, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawRangeElementArrayAPPLE(int mode, int start, uint end, ref int first, ref int count, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawRangeElementArrayAPPLE(int mode, uint start, uint end, ref int first, ref int count, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawRangeElementArrayAPPLE(int mode, int start, int end, int[] first, ref int count, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawRangeElementArrayAPPLE(int mode, uint start, int end, int[] first, ref int count, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawRangeElementArrayAPPLE(int mode, int start, uint end, int[] first, ref int count, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawRangeElementArrayAPPLE(int mode, uint start, uint end, int[] first, ref int count, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawRangeElementArrayAPPLE(int mode, int start, int end, ref int first, int[] count, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawRangeElementArrayAPPLE(int mode, uint start, int end, ref int first, int[] count, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawRangeElementArrayAPPLE(int mode, int start, uint end, ref int first, int[] count, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawRangeElementArrayAPPLE(int mode, uint start, uint end, ref int first, int[] count, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawRangeElementArrayAPPLE(int mode, int start, int end, int[] first, int[] count, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawRangeElementArrayAPPLE(int mode, uint start, int end, int[] first, int[] count, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawRangeElementArrayAPPLE(int mode, int start, uint end, int[] first, int[] count, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawRangeElementArrayAPPLE(int mode, uint start, uint end, int[] first, int[] count, int primcount)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_APPLE_fence", "glGenFencesAPPLE")]
        public static IntPtr ext__GL_APPLE_fence__glGenFencesAPPLE = IntPtr.Zero;

        [OpenGLExtensionImport("GL_APPLE_fence", "glGenFencesAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glGenFencesAPPLE(int n, out int fences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_fence", "glGenFencesAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glGenFencesAPPLE(int n, [Out] int[] fences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_fence", "glGenFencesAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glGenFencesAPPLE(int n, out uint fences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_fence", "glGenFencesAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glGenFencesAPPLE(int n, [Out] uint[] fences)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_APPLE_fence", "glDeleteFencesAPPLE")]
        public static IntPtr ext__GL_APPLE_fence__glDeleteFencesAPPLE = IntPtr.Zero;

        [OpenGLExtensionImport("GL_APPLE_fence", "glDeleteFencesAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteFencesAPPLE(int n, ref int fences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_fence", "glDeleteFencesAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteFencesAPPLE(int n, int[] fences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_fence", "glDeleteFencesAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteFencesAPPLE(int n, ref uint fences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_fence", "glDeleteFencesAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteFencesAPPLE(int n, uint[] fences)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_APPLE_fence", "glSetFenceAPPLE")]
        public static IntPtr ext__GL_APPLE_fence__glSetFenceAPPLE = IntPtr.Zero;

        [OpenGLExtensionImport("GL_APPLE_fence", "glSetFenceAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glSetFenceAPPLE(int fence)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_fence", "glSetFenceAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glSetFenceAPPLE(uint fence)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_APPLE_fence", "glIsFenceAPPLE")]
        public static IntPtr ext__GL_APPLE_fence__glIsFenceAPPLE = IntPtr.Zero;

        [OpenGLExtensionImport("GL_APPLE_fence", "glIsFenceAPPLE"), SuppressUnmanagedCodeSecurity]
        public static int glIsFenceAPPLE(int fence)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_fence", "glIsFenceAPPLE"), SuppressUnmanagedCodeSecurity]
        public static int glIsFenceAPPLE(uint fence)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_APPLE_fence", "glTestFenceAPPLE")]
        public static IntPtr ext__GL_APPLE_fence__glTestFenceAPPLE = IntPtr.Zero;

        [OpenGLExtensionImport("GL_APPLE_fence", "glTestFenceAPPLE"), SuppressUnmanagedCodeSecurity]
        public static int glTestFenceAPPLE(int fence)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_fence", "glTestFenceAPPLE"), SuppressUnmanagedCodeSecurity]
        public static int glTestFenceAPPLE(uint fence)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_APPLE_fence", "glFinishFenceAPPLE")]
        public static IntPtr ext__GL_APPLE_fence__glFinishFenceAPPLE = IntPtr.Zero;

        [OpenGLExtensionImport("GL_APPLE_fence", "glFinishFenceAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glFinishFenceAPPLE(int fence)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_fence", "glFinishFenceAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glFinishFenceAPPLE(uint fence)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_APPLE_fence", "glTestObjectAPPLE")]
        public static IntPtr ext__GL_APPLE_fence__glTestObjectAPPLE = IntPtr.Zero;

        [OpenGLExtensionImport("GL_APPLE_fence", "glTestObjectAPPLE"), SuppressUnmanagedCodeSecurity]
        public static int glTestObjectAPPLE(int arg_object, int name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_fence", "glTestObjectAPPLE"), SuppressUnmanagedCodeSecurity]
        public static int glTestObjectAPPLE(int arg_object, uint name)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_APPLE_fence", "glFinishObjectAPPLE")]
        public static IntPtr ext__GL_APPLE_fence__glFinishObjectAPPLE = IntPtr.Zero;

        [OpenGLExtensionImport("GL_APPLE_fence", "glFinishObjectAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glFinishObjectAPPLE(int arg_object, int name)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_APPLE_vertex_array_object", "glBindVertexArrayAPPLE")]
        public static IntPtr ext__GL_APPLE_vertex_array_object__glBindVertexArrayAPPLE = IntPtr.Zero;

        [OpenGLExtensionImport("GL_APPLE_vertex_array_object", "glBindVertexArrayAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glBindVertexArrayAPPLE(int array)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_object", "glBindVertexArrayAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glBindVertexArrayAPPLE(uint array)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_APPLE_vertex_array_object", "glDeleteVertexArraysAPPLE")]
        public static IntPtr ext__GL_APPLE_vertex_array_object__glDeleteVertexArraysAPPLE = IntPtr.Zero;

        [OpenGLExtensionImport("GL_APPLE_vertex_array_object", "glDeleteVertexArraysAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteVertexArraysAPPLE(int n, ref int arrays)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_object", "glDeleteVertexArraysAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteVertexArraysAPPLE(int n, int[] arrays)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_object", "glDeleteVertexArraysAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteVertexArraysAPPLE(int n, ref uint arrays)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_object", "glDeleteVertexArraysAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteVertexArraysAPPLE(int n, uint[] arrays)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_APPLE_vertex_array_object", "glGenVertexArraysAPPLE")]
        public static IntPtr ext__GL_APPLE_vertex_array_object__glGenVertexArraysAPPLE = IntPtr.Zero;

        [OpenGLExtensionImport("GL_APPLE_vertex_array_object", "glGenVertexArraysAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glGenVertexArraysAPPLE(int n, ref int arrays)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_object", "glGenVertexArraysAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glGenVertexArraysAPPLE(int n, int[] arrays)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_object", "glGenVertexArraysAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glGenVertexArraysAPPLE(int n, ref uint arrays)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_object", "glGenVertexArraysAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glGenVertexArraysAPPLE(int n, uint[] arrays)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_APPLE_vertex_array_object", "glIsVertexArrayAPPLE")]
        public static IntPtr ext__GL_APPLE_vertex_array_object__glIsVertexArrayAPPLE = IntPtr.Zero;

        [OpenGLExtensionImport("GL_APPLE_vertex_array_object", "glIsVertexArrayAPPLE"), SuppressUnmanagedCodeSecurity]
        public static int glIsVertexArrayAPPLE(int array)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_object", "glIsVertexArrayAPPLE"), SuppressUnmanagedCodeSecurity]
        public static int glIsVertexArrayAPPLE(uint array)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE")]
        public static IntPtr ext__GL_APPLE_vertex_array_range__glVertexArrayRangeAPPLE = IntPtr.Zero;

        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeAPPLE(int length, [Out] bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeAPPLE(int length, [Out] byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeAPPLE(int length, [Out] short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeAPPLE(int length, [Out] int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeAPPLE(int length, [Out] float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeAPPLE(int length, [Out] double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeAPPLE(int length, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeAPPLE(int length, out bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeAPPLE(int length, out byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeAPPLE(int length, out short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeAPPLE(int length, out int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeAPPLE(int length, out float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeAPPLE(int length, out double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeAPPLE(int length, out sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeAPPLE(int length, [Out] sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeAPPLE(int length, out ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeAPPLE(int length, [Out] ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeAPPLE(int length, out uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeAPPLE(int length, [Out] uint[] pointer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE")]
        public static IntPtr ext__GL_APPLE_vertex_array_range__glFlushVertexArrayRangeAPPLE = IntPtr.Zero;

        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glFlushVertexArrayRangeAPPLE(int length, [Out] bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glFlushVertexArrayRangeAPPLE(int length, [Out] byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glFlushVertexArrayRangeAPPLE(int length, [Out] short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glFlushVertexArrayRangeAPPLE(int length, [Out] int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glFlushVertexArrayRangeAPPLE(int length, [Out] float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glFlushVertexArrayRangeAPPLE(int length, [Out] double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glFlushVertexArrayRangeAPPLE(int length, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glFlushVertexArrayRangeAPPLE(int length, out bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glFlushVertexArrayRangeAPPLE(int length, out byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glFlushVertexArrayRangeAPPLE(int length, out short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glFlushVertexArrayRangeAPPLE(int length, out int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glFlushVertexArrayRangeAPPLE(int length, out float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glFlushVertexArrayRangeAPPLE(int length, out double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glFlushVertexArrayRangeAPPLE(int length, out sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glFlushVertexArrayRangeAPPLE(int length, [Out] sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glFlushVertexArrayRangeAPPLE(int length, out ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glFlushVertexArrayRangeAPPLE(int length, [Out] ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glFlushVertexArrayRangeAPPLE(int length, out uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glFlushVertexArrayRangeAPPLE(int length, [Out] uint[] pointer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayParameteriAPPLE")]
        public static IntPtr ext__GL_APPLE_vertex_array_range__glVertexArrayParameteriAPPLE = IntPtr.Zero;

        [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayParameteriAPPLE"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayParameteriAPPLE(int pname, int param)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_color_buffer_float", "glClampColorARB")]
        public static IntPtr ext__GL_ARB_color_buffer_float__glClampColorARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_color_buffer_float", "glClampColorARB"), SuppressUnmanagedCodeSecurity]
        public static void glClampColorARB(int target, int clamp)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_draw_buffers", "glDrawBuffersARB")]
        public static IntPtr ext__GL_ARB_draw_buffers__glDrawBuffersARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_draw_buffers", "glDrawBuffersARB"), SuppressUnmanagedCodeSecurity]
        public static void glDrawBuffersARB(int n, ref int bufs)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_draw_buffers", "glDrawBuffersARB"), SuppressUnmanagedCodeSecurity]
        public static void glDrawBuffersARB(int n, int[] bufs)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glCurrentPaletteMatrixARB")]
        public static IntPtr ext__GL_ARB_matrix_palette__glCurrentPaletteMatrixARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glCurrentPaletteMatrixARB"), SuppressUnmanagedCodeSecurity]
        public static void glCurrentPaletteMatrixARB(int index)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexubvARB")]
        public static IntPtr ext__GL_ARB_matrix_palette__glMatrixIndexubvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexubvARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexubvARB(int size, ref byte indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexubvARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexubvARB(int size, byte[] indices)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexusvARB")]
        public static IntPtr ext__GL_ARB_matrix_palette__glMatrixIndexusvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexusvARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexusvARB(int size, ref short indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexusvARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexusvARB(int size, short[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexusvARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexusvARB(int size, ref ushort indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexusvARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexusvARB(int size, ushort[] indices)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexuivARB")]
        public static IntPtr ext__GL_ARB_matrix_palette__glMatrixIndexuivARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexuivARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexuivARB(int size, ref int indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexuivARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexuivARB(int size, int[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexuivARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexuivARB(int size, ref uint indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexuivARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexuivARB(int size, uint[] indices)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB")]
        public static IntPtr ext__GL_ARB_matrix_palette__glMatrixIndexPointerARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, string pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, ref sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, sbyte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, sbyte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, ref ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, ushort[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, ushort[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, ref uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, uint[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, uint[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, uint[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, ref bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, bool[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, bool[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, ref byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, byte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, byte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, ref short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, short[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, short[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, ref int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, int[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, int[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, ref float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, float[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, float[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, ref double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, double[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glMatrixIndexPointerARB(int size, int type, int stride, double[, ,] pointer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_multisample", "glSampleCoverageARB")]
        public static IntPtr ext__GL_ARB_multisample__glSampleCoverageARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_multisample", "glSampleCoverageARB"), SuppressUnmanagedCodeSecurity]
        public static void glSampleCoverageARB(float value, int invert)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_multisample", "glSampleCoverageARB"), SuppressUnmanagedCodeSecurity]
        public static void glSampleCoverageARB(float value, bool invert)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_multitexture", "glActiveTextureARB")]
        public static IntPtr ext__GL_ARB_multitexture__glActiveTextureARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_multitexture", "glActiveTextureARB"), SuppressUnmanagedCodeSecurity]
        public static void glActiveTextureARB(int texture)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_multitexture", "glClientActiveTextureARB")]
        public static IntPtr ext__GL_ARB_multitexture__glClientActiveTextureARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_multitexture", "glClientActiveTextureARB"), SuppressUnmanagedCodeSecurity]
        public static void glClientActiveTextureARB(int texture)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1dARB")]
        public static IntPtr ext__GL_ARB_multitexture__glMultiTexCoord1dARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1dARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord1dARB(int target, double s)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1dvARB")]
        public static IntPtr ext__GL_ARB_multitexture__glMultiTexCoord1dvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1dvARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord1dvARB(int target, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1dvARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord1dvARB(int target, double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1fARB")]
        public static IntPtr ext__GL_ARB_multitexture__glMultiTexCoord1fARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1fARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord1fARB(int target, float s)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1fvARB")]
        public static IntPtr ext__GL_ARB_multitexture__glMultiTexCoord1fvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord1fvARB(int target, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord1fvARB(int target, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1iARB")]
        public static IntPtr ext__GL_ARB_multitexture__glMultiTexCoord1iARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1iARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord1iARB(int target, int s)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1ivARB")]
        public static IntPtr ext__GL_ARB_multitexture__glMultiTexCoord1ivARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1ivARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord1ivARB(int target, ref int v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1ivARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord1ivARB(int target, int[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1sARB")]
        public static IntPtr ext__GL_ARB_multitexture__glMultiTexCoord1sARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1sARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord1sARB(int target, short s)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1svARB")]
        public static IntPtr ext__GL_ARB_multitexture__glMultiTexCoord1svARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1svARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord1svARB(int target, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1svARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord1svARB(int target, short[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2dARB")]
        public static IntPtr ext__GL_ARB_multitexture__glMultiTexCoord2dARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2dARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord2dARB(int target, double s, double t)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2dvARB")]
        public static IntPtr ext__GL_ARB_multitexture__glMultiTexCoord2dvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2dvARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord2dvARB(int target, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2dvARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord2dvARB(int target, double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2fARB")]
        public static IntPtr ext__GL_ARB_multitexture__glMultiTexCoord2fARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2fARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord2fARB(int target, float s, float t)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2fvARB")]
        public static IntPtr ext__GL_ARB_multitexture__glMultiTexCoord2fvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord2fvARB(int target, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord2fvARB(int target, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2iARB")]
        public static IntPtr ext__GL_ARB_multitexture__glMultiTexCoord2iARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2iARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord2iARB(int target, int s, int t)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2ivARB")]
        public static IntPtr ext__GL_ARB_multitexture__glMultiTexCoord2ivARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2ivARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord2ivARB(int target, ref int v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2ivARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord2ivARB(int target, int[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2sARB")]
        public static IntPtr ext__GL_ARB_multitexture__glMultiTexCoord2sARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2sARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord2sARB(int target, short s, short t)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2svARB")]
        public static IntPtr ext__GL_ARB_multitexture__glMultiTexCoord2svARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2svARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord2svARB(int target, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2svARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord2svARB(int target, short[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3dARB")]
        public static IntPtr ext__GL_ARB_multitexture__glMultiTexCoord3dARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3dARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord3dARB(int target, double s, double t, double r)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3dvARB")]
        public static IntPtr ext__GL_ARB_multitexture__glMultiTexCoord3dvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3dvARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord3dvARB(int target, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3dvARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord3dvARB(int target, double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3fARB")]
        public static IntPtr ext__GL_ARB_multitexture__glMultiTexCoord3fARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3fARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord3fARB(int target, float s, float t, float r)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3fvARB")]
        public static IntPtr ext__GL_ARB_multitexture__glMultiTexCoord3fvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord3fvARB(int target, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord3fvARB(int target, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3iARB")]
        public static IntPtr ext__GL_ARB_multitexture__glMultiTexCoord3iARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3iARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord3iARB(int target, int s, int t, int r)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3ivARB")]
        public static IntPtr ext__GL_ARB_multitexture__glMultiTexCoord3ivARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3ivARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord3ivARB(int target, ref int v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3ivARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord3ivARB(int target, int[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3sARB")]
        public static IntPtr ext__GL_ARB_multitexture__glMultiTexCoord3sARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3sARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord3sARB(int target, short s, short t, short r)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3svARB")]
        public static IntPtr ext__GL_ARB_multitexture__glMultiTexCoord3svARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3svARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord3svARB(int target, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3svARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord3svARB(int target, short[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4dARB")]
        public static IntPtr ext__GL_ARB_multitexture__glMultiTexCoord4dARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4dARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4dARB(int target, double s, double t, double r, double q)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4dvARB")]
        public static IntPtr ext__GL_ARB_multitexture__glMultiTexCoord4dvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4dvARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4dvARB(int target, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4dvARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4dvARB(int target, double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4fARB")]
        public static IntPtr ext__GL_ARB_multitexture__glMultiTexCoord4fARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4fARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4fARB(int target, float s, float t, float r, float q)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4fvARB")]
        public static IntPtr ext__GL_ARB_multitexture__glMultiTexCoord4fvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4fvARB(int target, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4fvARB(int target, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4iARB")]
        public static IntPtr ext__GL_ARB_multitexture__glMultiTexCoord4iARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4iARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4iARB(int target, int s, int t, int r, int q)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4ivARB")]
        public static IntPtr ext__GL_ARB_multitexture__glMultiTexCoord4ivARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4ivARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4ivARB(int target, ref int v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4ivARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4ivARB(int target, int[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4sARB")]
        public static IntPtr ext__GL_ARB_multitexture__glMultiTexCoord4sARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4sARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4sARB(int target, short s, short t, short r, short q)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4svARB")]
        public static IntPtr ext__GL_ARB_multitexture__glMultiTexCoord4svARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4svARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4svARB(int target, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4svARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4svARB(int target, short[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGenQueriesARB")]
        public static IntPtr ext__GL_ARB_occlusion_query__glGenQueriesARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGenQueriesARB"), SuppressUnmanagedCodeSecurity]
        public static void glGenQueriesARB(int n, out int ids)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGenQueriesARB"), SuppressUnmanagedCodeSecurity]
        public static void glGenQueriesARB(int n, [Out] int[] ids)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGenQueriesARB"), SuppressUnmanagedCodeSecurity]
        public static void glGenQueriesARB(int n, out uint ids)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGenQueriesARB"), SuppressUnmanagedCodeSecurity]
        public static void glGenQueriesARB(int n, [Out] uint[] ids)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_occlusion_query", "glDeleteQueriesARB")]
        public static IntPtr ext__GL_ARB_occlusion_query__glDeleteQueriesARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_occlusion_query", "glDeleteQueriesARB"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteQueriesARB(int n, ref int ids)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_occlusion_query", "glDeleteQueriesARB"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteQueriesARB(int n, int[] ids)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_occlusion_query", "glDeleteQueriesARB"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteQueriesARB(int n, ref uint ids)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_occlusion_query", "glDeleteQueriesARB"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteQueriesARB(int n, uint[] ids)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_occlusion_query", "glIsQueryARB")]
        public static IntPtr ext__GL_ARB_occlusion_query__glIsQueryARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_occlusion_query", "glIsQueryARB"), SuppressUnmanagedCodeSecurity]
        public static int glIsQueryARB(int id)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_occlusion_query", "glIsQueryARB"), SuppressUnmanagedCodeSecurity]
        public static int glIsQueryARB(uint id)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_occlusion_query", "glBeginQueryARB")]
        public static IntPtr ext__GL_ARB_occlusion_query__glBeginQueryARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_occlusion_query", "glBeginQueryARB"), SuppressUnmanagedCodeSecurity]
        public static void glBeginQueryARB(int target, int id)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_occlusion_query", "glBeginQueryARB"), SuppressUnmanagedCodeSecurity]
        public static void glBeginQueryARB(int target, uint id)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_occlusion_query", "glEndQueryARB")]
        public static IntPtr ext__GL_ARB_occlusion_query__glEndQueryARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_occlusion_query", "glEndQueryARB"), SuppressUnmanagedCodeSecurity]
        public static void glEndQueryARB(int target)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGetQueryivARB")]
        public static IntPtr ext__GL_ARB_occlusion_query__glGetQueryivARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGetQueryivARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetQueryivARB(int target, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGetQueryivARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetQueryivARB(int target, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGetQueryObjectivARB")]
        public static IntPtr ext__GL_ARB_occlusion_query__glGetQueryObjectivARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGetQueryObjectivARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetQueryObjectivARB(int id, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGetQueryObjectivARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetQueryObjectivARB(uint id, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGetQueryObjectivARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetQueryObjectivARB(int id, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGetQueryObjectivARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetQueryObjectivARB(uint id, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGetQueryObjectuivARB")]
        public static IntPtr ext__GL_ARB_occlusion_query__glGetQueryObjectuivARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGetQueryObjectuivARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetQueryObjectuivARB(int id, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGetQueryObjectuivARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetQueryObjectuivARB(uint id, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGetQueryObjectuivARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetQueryObjectuivARB(int id, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGetQueryObjectuivARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetQueryObjectuivARB(uint id, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGetQueryObjectuivARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetQueryObjectuivARB(int id, int pname, out uint arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGetQueryObjectuivARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetQueryObjectuivARB(uint id, int pname, out uint arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGetQueryObjectuivARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetQueryObjectuivARB(int id, int pname, [Out] uint[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGetQueryObjectuivARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetQueryObjectuivARB(uint id, int pname, [Out] uint[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_point_parameters", "glPointParameterfARB")]
        public static IntPtr ext__GL_ARB_point_parameters__glPointParameterfARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_point_parameters", "glPointParameterfARB"), SuppressUnmanagedCodeSecurity]
        public static void glPointParameterfARB(int pname, float param)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_point_parameters", "glPointParameterfvARB")]
        public static IntPtr ext__GL_ARB_point_parameters__glPointParameterfvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_point_parameters", "glPointParameterfvARB"), SuppressUnmanagedCodeSecurity]
        public static void glPointParameterfvARB(int pname, ref float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_point_parameters", "glPointParameterfvARB"), SuppressUnmanagedCodeSecurity]
        public static void glPointParameterfvARB(int pname, float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glDeleteObjectARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glDeleteObjectARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glDeleteObjectARB"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteObjectARB(int obj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glDeleteObjectARB"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteObjectARB(uint obj)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetHandleARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glGetHandleARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetHandleARB"), SuppressUnmanagedCodeSecurity]
        public static int glGetHandleARB(int pname)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glDetachObjectARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glDetachObjectARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glDetachObjectARB"), SuppressUnmanagedCodeSecurity]
        public static void glDetachObjectARB(int containerObj, int attachedObj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glDetachObjectARB"), SuppressUnmanagedCodeSecurity]
        public static void glDetachObjectARB(uint containerObj, int attachedObj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glDetachObjectARB"), SuppressUnmanagedCodeSecurity]
        public static void glDetachObjectARB(int containerObj, uint attachedObj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glDetachObjectARB"), SuppressUnmanagedCodeSecurity]
        public static void glDetachObjectARB(uint containerObj, uint attachedObj)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glCreateShaderObjectARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glCreateShaderObjectARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glCreateShaderObjectARB"), SuppressUnmanagedCodeSecurity]
        public static int glCreateShaderObjectARB(int shaderType)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glShaderSourceARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glShaderSourceARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glShaderSourceARB"), SuppressUnmanagedCodeSecurity]
        public static void glShaderSourceARB(int shaderObj, int count, ref string arg_string, ref int length)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glShaderSourceARB"), SuppressUnmanagedCodeSecurity]
        public static void glShaderSourceARB(uint shaderObj, int count, ref string arg_string, ref int length)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glShaderSourceARB"), SuppressUnmanagedCodeSecurity]
        public static void glShaderSourceARB(int shaderObj, int count, string[] arg_string, ref int length)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glShaderSourceARB"), SuppressUnmanagedCodeSecurity]
        public static void glShaderSourceARB(uint shaderObj, int count, string[] arg_string, ref int length)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glShaderSourceARB"), SuppressUnmanagedCodeSecurity]
        public static void glShaderSourceARB(int shaderObj, int count, ref string arg_string, int[] length)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glShaderSourceARB"), SuppressUnmanagedCodeSecurity]
        public static void glShaderSourceARB(uint shaderObj, int count, ref string arg_string, int[] length)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glShaderSourceARB"), SuppressUnmanagedCodeSecurity]
        public static void glShaderSourceARB(int shaderObj, int count, string[] arg_string, int[] length)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glShaderSourceARB"), SuppressUnmanagedCodeSecurity]
        public static void glShaderSourceARB(uint shaderObj, int count, string[] arg_string, int[] length)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glCompileShaderARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glCompileShaderARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glCompileShaderARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompileShaderARB(int shaderObj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glCompileShaderARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompileShaderARB(uint shaderObj)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glCreateProgramObjectARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glCreateProgramObjectARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glCreateProgramObjectARB"), SuppressUnmanagedCodeSecurity]
        public static int glCreateProgramObjectARB()
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glAttachObjectARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glAttachObjectARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glAttachObjectARB"), SuppressUnmanagedCodeSecurity]
        public static void glAttachObjectARB(int containerObj, int obj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glAttachObjectARB"), SuppressUnmanagedCodeSecurity]
        public static void glAttachObjectARB(uint containerObj, int obj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glAttachObjectARB"), SuppressUnmanagedCodeSecurity]
        public static void glAttachObjectARB(int containerObj, uint obj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glAttachObjectARB"), SuppressUnmanagedCodeSecurity]
        public static void glAttachObjectARB(uint containerObj, uint obj)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glLinkProgramARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glLinkProgramARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glLinkProgramARB"), SuppressUnmanagedCodeSecurity]
        public static void glLinkProgramARB(int programObj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glLinkProgramARB"), SuppressUnmanagedCodeSecurity]
        public static void glLinkProgramARB(uint programObj)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUseProgramObjectARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glUseProgramObjectARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUseProgramObjectARB"), SuppressUnmanagedCodeSecurity]
        public static void glUseProgramObjectARB(int programObj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUseProgramObjectARB"), SuppressUnmanagedCodeSecurity]
        public static void glUseProgramObjectARB(uint programObj)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glValidateProgramARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glValidateProgramARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glValidateProgramARB"), SuppressUnmanagedCodeSecurity]
        public static void glValidateProgramARB(int programObj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glValidateProgramARB"), SuppressUnmanagedCodeSecurity]
        public static void glValidateProgramARB(uint programObj)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform1fARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glUniform1fARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform1fARB"), SuppressUnmanagedCodeSecurity]
        public static void glUniform1fARB(int location, float v0)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform2fARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glUniform2fARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform2fARB"), SuppressUnmanagedCodeSecurity]
        public static void glUniform2fARB(int location, float v0, float v1)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform3fARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glUniform3fARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform3fARB"), SuppressUnmanagedCodeSecurity]
        public static void glUniform3fARB(int location, float v0, float v1, float v2)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform4fARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glUniform4fARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform4fARB"), SuppressUnmanagedCodeSecurity]
        public static void glUniform4fARB(int location, float v0, float v1, float v2, float v3)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform1iARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glUniform1iARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform1iARB"), SuppressUnmanagedCodeSecurity]
        public static void glUniform1iARB(int location, int v0)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform2iARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glUniform2iARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform2iARB"), SuppressUnmanagedCodeSecurity]
        public static void glUniform2iARB(int location, int v0, int v1)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform3iARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glUniform3iARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform3iARB"), SuppressUnmanagedCodeSecurity]
        public static void glUniform3iARB(int location, int v0, int v1, int v2)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform4iARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glUniform4iARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform4iARB"), SuppressUnmanagedCodeSecurity]
        public static void glUniform4iARB(int location, int v0, int v1, int v2, int v3)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform1fvARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glUniform1fvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform1fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glUniform1fvARB(int location, int count, ref float value)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform1fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glUniform1fvARB(int location, int count, float[] value)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform2fvARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glUniform2fvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform2fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glUniform2fvARB(int location, int count, ref float value)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform2fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glUniform2fvARB(int location, int count, float[] value)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform3fvARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glUniform3fvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform3fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glUniform3fvARB(int location, int count, ref float value)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform3fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glUniform3fvARB(int location, int count, float[] value)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform4fvARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glUniform4fvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform4fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glUniform4fvARB(int location, int count, ref float value)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform4fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glUniform4fvARB(int location, int count, float[] value)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform1ivARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glUniform1ivARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform1ivARB"), SuppressUnmanagedCodeSecurity]
        public static void glUniform1ivARB(int location, int count, ref int value)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform1ivARB"), SuppressUnmanagedCodeSecurity]
        public static void glUniform1ivARB(int location, int count, int[] value)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform2ivARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glUniform2ivARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform2ivARB"), SuppressUnmanagedCodeSecurity]
        public static void glUniform2ivARB(int location, int count, ref int value)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform2ivARB"), SuppressUnmanagedCodeSecurity]
        public static void glUniform2ivARB(int location, int count, int[] value)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform3ivARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glUniform3ivARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform3ivARB"), SuppressUnmanagedCodeSecurity]
        public static void glUniform3ivARB(int location, int count, ref int value)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform3ivARB"), SuppressUnmanagedCodeSecurity]
        public static void glUniform3ivARB(int location, int count, int[] value)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform4ivARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glUniform4ivARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform4ivARB"), SuppressUnmanagedCodeSecurity]
        public static void glUniform4ivARB(int location, int count, ref int value)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform4ivARB"), SuppressUnmanagedCodeSecurity]
        public static void glUniform4ivARB(int location, int count, int[] value)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniformMatrix2fvARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glUniformMatrix2fvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniformMatrix2fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glUniformMatrix2fvARB(int location, int count, int transpose, ref float value)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniformMatrix2fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glUniformMatrix2fvARB(int location, int count, bool transpose, ref float value)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniformMatrix2fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glUniformMatrix2fvARB(int location, int count, int transpose, float[] value)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniformMatrix2fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glUniformMatrix2fvARB(int location, int count, bool transpose, float[] value)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniformMatrix3fvARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glUniformMatrix3fvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniformMatrix3fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glUniformMatrix3fvARB(int location, int count, int transpose, ref float value)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniformMatrix3fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glUniformMatrix3fvARB(int location, int count, bool transpose, ref float value)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniformMatrix3fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glUniformMatrix3fvARB(int location, int count, int transpose, float[] value)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniformMatrix3fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glUniformMatrix3fvARB(int location, int count, bool transpose, float[] value)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniformMatrix4fvARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glUniformMatrix4fvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniformMatrix4fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glUniformMatrix4fvARB(int location, int count, int transpose, ref float value)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniformMatrix4fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glUniformMatrix4fvARB(int location, int count, bool transpose, ref float value)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniformMatrix4fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glUniformMatrix4fvARB(int location, int count, int transpose, float[] value)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniformMatrix4fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glUniformMatrix4fvARB(int location, int count, bool transpose, float[] value)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetObjectParameterfvARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glGetObjectParameterfvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetObjectParameterfvARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetObjectParameterfvARB(int obj, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetObjectParameterfvARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetObjectParameterfvARB(uint obj, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetObjectParameterfvARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetObjectParameterfvARB(int obj, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetObjectParameterfvARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetObjectParameterfvARB(uint obj, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetObjectParameterivARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glGetObjectParameterivARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetObjectParameterivARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetObjectParameterivARB(int obj, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetObjectParameterivARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetObjectParameterivARB(uint obj, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetObjectParameterivARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetObjectParameterivARB(int obj, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetObjectParameterivARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetObjectParameterivARB(uint obj, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetInfoLogARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glGetInfoLogARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetInfoLogARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetInfoLogARB(int obj, int maxLength, out int length, IntPtr infoLog)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetInfoLogARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetInfoLogARB(uint obj, int maxLength, out int length, IntPtr infoLog)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetInfoLogARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetInfoLogARB(int obj, int maxLength, [Out] int[] length, IntPtr infoLog)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetInfoLogARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetInfoLogARB(uint obj, int maxLength, [Out] int[] length, IntPtr infoLog)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetAttachedObjectsARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glGetAttachedObjectsARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetAttachedObjectsARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetAttachedObjectsARB(int containerObj, int maxCount, out int count, out int obj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetAttachedObjectsARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetAttachedObjectsARB(uint containerObj, int maxCount, out int count, out int obj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetAttachedObjectsARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetAttachedObjectsARB(int containerObj, int maxCount, [Out] int[] count, out int obj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetAttachedObjectsARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetAttachedObjectsARB(uint containerObj, int maxCount, [Out] int[] count, out int obj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetAttachedObjectsARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetAttachedObjectsARB(int containerObj, int maxCount, out int count, [Out] int[] obj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetAttachedObjectsARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetAttachedObjectsARB(uint containerObj, int maxCount, out int count, [Out] int[] obj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetAttachedObjectsARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetAttachedObjectsARB(int containerObj, int maxCount, [Out] int[] count, [Out] int[] obj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetAttachedObjectsARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetAttachedObjectsARB(uint containerObj, int maxCount, [Out] int[] count, [Out] int[] obj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetAttachedObjectsARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetAttachedObjectsARB(int containerObj, int maxCount, out int count, out uint obj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetAttachedObjectsARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetAttachedObjectsARB(uint containerObj, int maxCount, out int count, out uint obj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetAttachedObjectsARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetAttachedObjectsARB(int containerObj, int maxCount, [Out] int[] count, out uint obj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetAttachedObjectsARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetAttachedObjectsARB(uint containerObj, int maxCount, [Out] int[] count, out uint obj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetAttachedObjectsARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetAttachedObjectsARB(int containerObj, int maxCount, out int count, [Out] uint[] obj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetAttachedObjectsARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetAttachedObjectsARB(uint containerObj, int maxCount, out int count, [Out] uint[] obj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetAttachedObjectsARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetAttachedObjectsARB(int containerObj, int maxCount, [Out] int[] count, [Out] uint[] obj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetAttachedObjectsARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetAttachedObjectsARB(uint containerObj, int maxCount, [Out] int[] count, [Out] uint[] obj)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetUniformLocationARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glGetUniformLocationARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetUniformLocationARB"), SuppressUnmanagedCodeSecurity]
        public static int glGetUniformLocationARB(int programObj, string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetUniformLocationARB"), SuppressUnmanagedCodeSecurity]
        public static int glGetUniformLocationARB(uint programObj, string name)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glGetActiveUniformARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniformARB(int programObj, int index, int maxLength, out int length, out int size, out int type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniformARB(uint programObj, int index, int maxLength, out int length, out int size, out int type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniformARB(int programObj, uint index, int maxLength, out int length, out int size, out int type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniformARB(uint programObj, uint index, int maxLength, out int length, out int size, out int type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniformARB(int programObj, int index, int maxLength, [Out] int[] length, out int size, out int type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniformARB(uint programObj, int index, int maxLength, [Out] int[] length, out int size, out int type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniformARB(int programObj, uint index, int maxLength, [Out] int[] length, out int size, out int type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniformARB(uint programObj, uint index, int maxLength, [Out] int[] length, out int size, out int type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniformARB(int programObj, int index, int maxLength, out int length, [Out] int[] size, out int type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniformARB(uint programObj, int index, int maxLength, out int length, [Out] int[] size, out int type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniformARB(int programObj, uint index, int maxLength, out int length, [Out] int[] size, out int type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniformARB(uint programObj, uint index, int maxLength, out int length, [Out] int[] size, out int type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniformARB(int programObj, int index, int maxLength, [Out] int[] length, [Out] int[] size, out int type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniformARB(uint programObj, int index, int maxLength, [Out] int[] length, [Out] int[] size, out int type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniformARB(int programObj, uint index, int maxLength, [Out] int[] length, [Out] int[] size, out int type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniformARB(uint programObj, uint index, int maxLength, [Out] int[] length, [Out] int[] size, out int type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniformARB(int programObj, int index, int maxLength, out int length, out int size, [Out] int[] type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniformARB(uint programObj, int index, int maxLength, out int length, out int size, [Out] int[] type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniformARB(int programObj, uint index, int maxLength, out int length, out int size, [Out] int[] type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniformARB(uint programObj, uint index, int maxLength, out int length, out int size, [Out] int[] type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniformARB(int programObj, int index, int maxLength, [Out] int[] length, out int size, [Out] int[] type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniformARB(uint programObj, int index, int maxLength, [Out] int[] length, out int size, [Out] int[] type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniformARB(int programObj, uint index, int maxLength, [Out] int[] length, out int size, [Out] int[] type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniformARB(uint programObj, uint index, int maxLength, [Out] int[] length, out int size, [Out] int[] type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniformARB(int programObj, int index, int maxLength, out int length, [Out] int[] size, [Out] int[] type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniformARB(uint programObj, int index, int maxLength, out int length, [Out] int[] size, [Out] int[] type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniformARB(int programObj, uint index, int maxLength, out int length, [Out] int[] size, [Out] int[] type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniformARB(uint programObj, uint index, int maxLength, out int length, [Out] int[] size, [Out] int[] type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniformARB(int programObj, int index, int maxLength, [Out] int[] length, [Out] int[] size, [Out] int[] type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniformARB(uint programObj, int index, int maxLength, [Out] int[] length, [Out] int[] size, [Out] int[] type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniformARB(int programObj, uint index, int maxLength, [Out] int[] length, [Out] int[] size, [Out] int[] type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniformARB(uint programObj, uint index, int maxLength, [Out] int[] length, [Out] int[] size, [Out] int[] type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetUniformfvARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glGetUniformfvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetUniformfvARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetUniformfvARB(int programObj, int location, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetUniformfvARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetUniformfvARB(uint programObj, int location, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetUniformfvARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetUniformfvARB(int programObj, int location, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetUniformfvARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetUniformfvARB(uint programObj, int location, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetUniformivARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glGetUniformivARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetUniformivARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetUniformivARB(int programObj, int location, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetUniformivARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetUniformivARB(uint programObj, int location, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetUniformivARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetUniformivARB(int programObj, int location, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetUniformivARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetUniformivARB(uint programObj, int location, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetShaderSourceARB")]
        public static IntPtr ext__GL_ARB_shader_objects__glGetShaderSourceARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetShaderSourceARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetShaderSourceARB(int obj, int maxLength, out int length, System.Text.StringBuilder source)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetShaderSourceARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetShaderSourceARB(uint obj, int maxLength, out int length, System.Text.StringBuilder source)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetShaderSourceARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetShaderSourceARB(int obj, int maxLength, [Out] int[] length, System.Text.StringBuilder source)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetShaderSourceARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetShaderSourceARB(uint obj, int maxLength, [Out] int[] length, System.Text.StringBuilder source)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB")]
        public static IntPtr ext__GL_ARB_texture_compression__glCompressedTexImage3DARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, bool[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, byte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, short[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, int[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, float[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, double[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, string data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ref sbyte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, sbyte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, sbyte[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, sbyte[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ref ushort data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ushort[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ushort[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ushort[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ref uint data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, uint[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, uint[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, uint[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ref bool data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, bool[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, bool[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ref byte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, byte[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, byte[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ref short data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, short[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, short[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ref int data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, int[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, int[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ref float data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, float[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, float[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ref double data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, double[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, double[, ,] data)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB")]
        public static IntPtr ext__GL_ARB_texture_compression__glCompressedTexImage2DARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, bool[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, byte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, short[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, int[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, float[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, double[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, string data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, IntPtr data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, ref sbyte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, sbyte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, sbyte[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, sbyte[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, ref ushort data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, ushort[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, ushort[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, ushort[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, ref uint data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, uint[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, uint[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, uint[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, ref bool data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, bool[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, bool[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, ref byte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, byte[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, byte[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, ref short data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, short[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, short[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, ref int data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, int[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, int[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, ref float data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, float[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, float[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, ref double data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, double[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, double[, ,] data)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB")]
        public static IntPtr ext__GL_ARB_texture_compression__glCompressedTexImage1DARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, bool[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, byte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, short[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, int[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, float[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, double[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, string data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, IntPtr data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, ref sbyte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, sbyte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, sbyte[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, sbyte[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, ref ushort data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, ushort[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, ushort[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, ushort[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, ref uint data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, uint[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, uint[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, uint[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, ref bool data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, bool[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, bool[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, ref byte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, byte[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, byte[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, ref short data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, short[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, short[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, ref int data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, int[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, int[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, ref float data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, float[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, float[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, ref double data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, double[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, double[, ,] data)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB")]
        public static IntPtr ext__GL_ARB_texture_compression__glCompressedTexSubImage3DARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, bool[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, byte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, short[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, int[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, float[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, double[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, string data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, IntPtr data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ref sbyte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, sbyte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, sbyte[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, sbyte[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ref ushort data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ushort[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ushort[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ushort[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ref uint data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, uint[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, uint[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, uint[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ref bool data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, bool[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, bool[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ref byte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, byte[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, byte[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ref short data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, short[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, short[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ref int data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, int[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, int[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ref float data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, float[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, float[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ref double data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, double[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, double[, ,] data)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB")]
        public static IntPtr ext__GL_ARB_texture_compression__glCompressedTexSubImage2DARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, bool[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, byte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, short[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, int[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, float[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, double[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, string data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, IntPtr data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ref sbyte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, sbyte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, sbyte[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, sbyte[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ref ushort data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ushort[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ushort[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ushort[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ref uint data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, uint[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, uint[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, uint[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ref bool data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, bool[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, bool[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ref byte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, byte[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, byte[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ref short data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, short[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, short[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ref int data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, int[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, int[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ref float data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, float[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, float[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ref double data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, double[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, double[, ,] data)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB")]
        public static IntPtr ext__GL_ARB_texture_compression__glCompressedTexSubImage1DARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, bool[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, byte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, short[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, int[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, float[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, double[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, string data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, IntPtr data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, ref sbyte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, sbyte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, sbyte[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, sbyte[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, ref ushort data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, ushort[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, ushort[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, ushort[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, ref uint data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, uint[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, uint[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, uint[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, ref bool data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, bool[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, bool[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, ref byte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, byte[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, byte[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, ref short data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, short[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, short[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, ref int data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, int[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, int[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, ref float data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, float[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, float[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, ref double data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, double[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, double[, ,] data)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB")]
        public static IntPtr ext__GL_ARB_texture_compression__glGetCompressedTexImageARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImageARB(int target, int level, [Out] bool[] img)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImageARB(int target, int level, [Out] byte[] img)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImageARB(int target, int level, [Out] short[] img)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImageARB(int target, int level, [Out] int[] img)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImageARB(int target, int level, [Out] float[] img)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImageARB(int target, int level, [Out] double[] img)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImageARB(int target, int level, IntPtr img)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImageARB(int target, int level, out bool img)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImageARB(int target, int level, out byte img)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImageARB(int target, int level, out short img)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImageARB(int target, int level, out int img)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImageARB(int target, int level, out float img)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImageARB(int target, int level, out double img)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImageARB(int target, int level, out sbyte img)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImageARB(int target, int level, [Out] sbyte[] img)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImageARB(int target, int level, out ushort img)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImageARB(int target, int level, [Out] ushort[] img)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImageARB(int target, int level, out uint img)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImageARB(int target, int level, [Out] uint[] img)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_transpose_matrix", "glLoadTransposeMatrixfARB")]
        public static IntPtr ext__GL_ARB_transpose_matrix__glLoadTransposeMatrixfARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_transpose_matrix", "glLoadTransposeMatrixfARB"), SuppressUnmanagedCodeSecurity]
        public static void glLoadTransposeMatrixfARB(ref float m)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_transpose_matrix", "glLoadTransposeMatrixfARB"), SuppressUnmanagedCodeSecurity]
        public static void glLoadTransposeMatrixfARB(float[] m)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_transpose_matrix", "glLoadTransposeMatrixdARB")]
        public static IntPtr ext__GL_ARB_transpose_matrix__glLoadTransposeMatrixdARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_transpose_matrix", "glLoadTransposeMatrixdARB"), SuppressUnmanagedCodeSecurity]
        public static void glLoadTransposeMatrixdARB(ref double m)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_transpose_matrix", "glLoadTransposeMatrixdARB"), SuppressUnmanagedCodeSecurity]
        public static void glLoadTransposeMatrixdARB(double[] m)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_transpose_matrix", "glMultTransposeMatrixfARB")]
        public static IntPtr ext__GL_ARB_transpose_matrix__glMultTransposeMatrixfARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_transpose_matrix", "glMultTransposeMatrixfARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultTransposeMatrixfARB(ref float m)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_transpose_matrix", "glMultTransposeMatrixfARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultTransposeMatrixfARB(float[] m)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_transpose_matrix", "glMultTransposeMatrixdARB")]
        public static IntPtr ext__GL_ARB_transpose_matrix__glMultTransposeMatrixdARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_transpose_matrix", "glMultTransposeMatrixdARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultTransposeMatrixdARB(ref double m)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_transpose_matrix", "glMultTransposeMatrixdARB"), SuppressUnmanagedCodeSecurity]
        public static void glMultTransposeMatrixdARB(double[] m)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightbvARB")]
        public static IntPtr ext__GL_ARB_vertex_blend__glWeightbvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightbvARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightbvARB(int size, ref byte weights)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightbvARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightbvARB(int size, byte[] weights)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightbvARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightbvARB(int size, ref sbyte weights)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightbvARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightbvARB(int size, sbyte[] weights)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightsvARB")]
        public static IntPtr ext__GL_ARB_vertex_blend__glWeightsvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightsvARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightsvARB(int size, ref short weights)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightsvARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightsvARB(int size, short[] weights)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightivARB")]
        public static IntPtr ext__GL_ARB_vertex_blend__glWeightivARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightivARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightivARB(int size, ref int weights)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightivARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightivARB(int size, int[] weights)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightfvARB")]
        public static IntPtr ext__GL_ARB_vertex_blend__glWeightfvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightfvARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightfvARB(int size, ref float weights)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightfvARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightfvARB(int size, float[] weights)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightdvARB")]
        public static IntPtr ext__GL_ARB_vertex_blend__glWeightdvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightdvARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightdvARB(int size, ref double weights)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightdvARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightdvARB(int size, double[] weights)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightubvARB")]
        public static IntPtr ext__GL_ARB_vertex_blend__glWeightubvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightubvARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightubvARB(int size, ref byte weights)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightubvARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightubvARB(int size, byte[] weights)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightusvARB")]
        public static IntPtr ext__GL_ARB_vertex_blend__glWeightusvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightusvARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightusvARB(int size, ref short weights)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightusvARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightusvARB(int size, short[] weights)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightusvARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightusvARB(int size, ref ushort weights)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightusvARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightusvARB(int size, ushort[] weights)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightuivARB")]
        public static IntPtr ext__GL_ARB_vertex_blend__glWeightuivARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightuivARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightuivARB(int size, ref int weights)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightuivARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightuivARB(int size, int[] weights)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightuivARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightuivARB(int size, ref uint weights)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightuivARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightuivARB(int size, uint[] weights)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB")]
        public static IntPtr ext__GL_ARB_vertex_blend__glWeightPointerARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, string pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, ref sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, sbyte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, sbyte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, ref ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, ushort[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, ushort[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, ref uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, uint[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, uint[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, uint[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, ref bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, bool[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, bool[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, ref byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, byte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, byte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, ref short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, short[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, short[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, ref int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, int[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, int[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, ref float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, float[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, float[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, ref double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, double[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glWeightPointerARB(int size, int type, int stride, double[, ,] pointer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glVertexBlendARB")]
        public static IntPtr ext__GL_ARB_vertex_blend__glVertexBlendARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_blend", "glVertexBlendARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexBlendARB(int count)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBindBufferARB")]
        public static IntPtr ext__GL_ARB_vertex_buffer_object__glBindBufferARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBindBufferARB"), SuppressUnmanagedCodeSecurity]
        public static void glBindBufferARB(int target, int buffer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBindBufferARB"), SuppressUnmanagedCodeSecurity]
        public static void glBindBufferARB(int target, uint buffer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glDeleteBuffersARB")]
        public static IntPtr ext__GL_ARB_vertex_buffer_object__glDeleteBuffersARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glDeleteBuffersARB"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteBuffersARB(int n, ref int buffers)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glDeleteBuffersARB"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteBuffersARB(int n, int[] buffers)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glDeleteBuffersARB"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteBuffersARB(int n, ref uint buffers)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glDeleteBuffersARB"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteBuffersARB(int n, uint[] buffers)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGenBuffersARB")]
        public static IntPtr ext__GL_ARB_vertex_buffer_object__glGenBuffersARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGenBuffersARB"), SuppressUnmanagedCodeSecurity]
        public static void glGenBuffersARB(int n, out int buffers)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGenBuffersARB"), SuppressUnmanagedCodeSecurity]
        public static void glGenBuffersARB(int n, [Out] int[] buffers)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGenBuffersARB"), SuppressUnmanagedCodeSecurity]
        public static void glGenBuffersARB(int n, out uint buffers)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGenBuffersARB"), SuppressUnmanagedCodeSecurity]
        public static void glGenBuffersARB(int n, [Out] uint[] buffers)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glIsBufferARB")]
        public static IntPtr ext__GL_ARB_vertex_buffer_object__glIsBufferARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glIsBufferARB"), SuppressUnmanagedCodeSecurity]
        public static int glIsBufferARB(int buffer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glIsBufferARB"), SuppressUnmanagedCodeSecurity]
        public static int glIsBufferARB(uint buffer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB")]
        public static IntPtr ext__GL_ARB_vertex_buffer_object__glBufferDataARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, bool[] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, byte[] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, short[] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, int[] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, float[] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, double[] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, string data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, IntPtr data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, ref sbyte data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, sbyte[] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, sbyte[,] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, sbyte[, ,] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, ref ushort data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, ushort[] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, ushort[,] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, ushort[, ,] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, ref uint data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, uint[] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, uint[,] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, uint[, ,] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, ref bool data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, bool[,] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, bool[, ,] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, ref byte data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, byte[,] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, byte[, ,] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, ref short data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, short[,] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, short[, ,] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, ref int data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, int[,] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, int[, ,] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, ref float data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, float[,] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, float[, ,] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, ref double data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, double[,] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferDataARB(int target, int size, double[, ,] data, int usage)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB")]
        public static IntPtr ext__GL_ARB_vertex_buffer_object__glBufferSubDataARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, bool[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, byte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, short[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, int[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, float[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, double[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, string data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, IntPtr data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, ref sbyte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, sbyte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, sbyte[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, sbyte[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, ref ushort data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, ushort[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, ushort[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, ushort[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, ref uint data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, uint[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, uint[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, uint[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, ref bool data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, bool[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, bool[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, ref byte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, byte[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, byte[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, ref short data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, short[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, short[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, ref int data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, int[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, int[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, ref float data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, float[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, float[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, ref double data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, double[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubDataARB(int target, int offset, int size, double[, ,] data)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB")]
        public static IntPtr ext__GL_ARB_vertex_buffer_object__glGetBufferSubDataARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubDataARB(int target, int offset, int size, [Out] bool[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubDataARB(int target, int offset, int size, [Out] byte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubDataARB(int target, int offset, int size, [Out] short[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubDataARB(int target, int offset, int size, [Out] int[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubDataARB(int target, int offset, int size, [Out] float[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubDataARB(int target, int offset, int size, [Out] double[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubDataARB(int target, int offset, int size, IntPtr data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubDataARB(int target, int offset, int size, out bool data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubDataARB(int target, int offset, int size, out byte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubDataARB(int target, int offset, int size, out short data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubDataARB(int target, int offset, int size, out int data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubDataARB(int target, int offset, int size, out float data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubDataARB(int target, int offset, int size, out double data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubDataARB(int target, int offset, int size, out sbyte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubDataARB(int target, int offset, int size, [Out] sbyte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubDataARB(int target, int offset, int size, out ushort data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubDataARB(int target, int offset, int size, [Out] ushort[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubDataARB(int target, int offset, int size, out uint data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubDataARB(int target, int offset, int size, [Out] uint[] data)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glMapBufferARB")]
        public static IntPtr ext__GL_ARB_vertex_buffer_object__glMapBufferARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glMapBufferARB"), SuppressUnmanagedCodeSecurity]
        public static IntPtr glMapBufferARB(int target, int access)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glUnmapBufferARB")]
        public static IntPtr ext__GL_ARB_vertex_buffer_object__glUnmapBufferARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glUnmapBufferARB"), SuppressUnmanagedCodeSecurity]
        public static int glUnmapBufferARB(int target)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferParameterivARB")]
        public static IntPtr ext__GL_ARB_vertex_buffer_object__glGetBufferParameterivARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferParameterivARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferParameterivARB(int target, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferParameterivARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferParameterivARB(int target, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB")]
        public static IntPtr ext__GL_ARB_vertex_buffer_object__glGetBufferPointervARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointervARB(int target, int pname, [Out] bool[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointervARB(int target, int pname, [Out] byte[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointervARB(int target, int pname, [Out] short[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointervARB(int target, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointervARB(int target, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointervARB(int target, int pname, [Out] double[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointervARB(int target, int pname, IntPtr arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointervARB(int target, int pname, out bool arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointervARB(int target, int pname, out byte arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointervARB(int target, int pname, out short arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointervARB(int target, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointervARB(int target, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointervARB(int target, int pname, out double arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointervARB(int target, int pname, out sbyte arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointervARB(int target, int pname, [Out] sbyte[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointervARB(int target, int pname, out ushort arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointervARB(int target, int pname, [Out] ushort[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointervARB(int target, int pname, out uint arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointervARB(int target, int pname, [Out] uint[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1dARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glVertexAttrib1dARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1dARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1dARB(int index, double x)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1dARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1dARB(uint index, double x)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1dvARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glVertexAttrib1dvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1dvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1dvARB(int index, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1dvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1dvARB(uint index, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1dvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1dvARB(int index, double[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1dvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1dvARB(uint index, double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1fARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glVertexAttrib1fARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1fARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1fARB(int index, float x)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1fARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1fARB(uint index, float x)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1fvARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glVertexAttrib1fvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1fvARB(int index, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1fvARB(uint index, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1fvARB(int index, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1fvARB(uint index, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1sARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glVertexAttrib1sARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1sARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1sARB(int index, short x)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1sARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1sARB(uint index, short x)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1svARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glVertexAttrib1svARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1svARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1svARB(int index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1svARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1svARB(uint index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1svARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1svARB(int index, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1svARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1svARB(uint index, short[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2dARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glVertexAttrib2dARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2dARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2dARB(int index, double x, double y)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2dARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2dARB(uint index, double x, double y)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2dvARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glVertexAttrib2dvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2dvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2dvARB(int index, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2dvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2dvARB(uint index, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2dvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2dvARB(int index, double[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2dvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2dvARB(uint index, double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2fARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glVertexAttrib2fARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2fARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2fARB(int index, float x, float y)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2fARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2fARB(uint index, float x, float y)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2fvARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glVertexAttrib2fvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2fvARB(int index, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2fvARB(uint index, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2fvARB(int index, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2fvARB(uint index, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2sARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glVertexAttrib2sARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2sARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2sARB(int index, short x, short y)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2sARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2sARB(uint index, short x, short y)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2svARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glVertexAttrib2svARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2svARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2svARB(int index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2svARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2svARB(uint index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2svARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2svARB(int index, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2svARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2svARB(uint index, short[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3dARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glVertexAttrib3dARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3dARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3dARB(int index, double x, double y, double z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3dARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3dARB(uint index, double x, double y, double z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3dvARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glVertexAttrib3dvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3dvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3dvARB(int index, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3dvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3dvARB(uint index, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3dvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3dvARB(int index, double[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3dvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3dvARB(uint index, double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3fARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glVertexAttrib3fARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3fARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3fARB(int index, float x, float y, float z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3fARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3fARB(uint index, float x, float y, float z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3fvARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glVertexAttrib3fvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3fvARB(int index, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3fvARB(uint index, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3fvARB(int index, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3fvARB(uint index, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3sARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glVertexAttrib3sARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3sARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3sARB(int index, short x, short y, short z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3sARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3sARB(uint index, short x, short y, short z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3svARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glVertexAttrib3svARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3svARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3svARB(int index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3svARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3svARB(uint index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3svARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3svARB(int index, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3svARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3svARB(uint index, short[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NbvARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glVertexAttrib4NbvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NbvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NbvARB(int index, ref byte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NbvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NbvARB(uint index, ref byte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NbvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NbvARB(int index, byte[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NbvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NbvARB(uint index, byte[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NbvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NbvARB(int index, ref sbyte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NbvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NbvARB(uint index, ref sbyte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NbvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NbvARB(int index, sbyte[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NbvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NbvARB(uint index, sbyte[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NivARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glVertexAttrib4NivARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NivARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NivARB(int index, ref int v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NivARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NivARB(uint index, ref int v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NivARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NivARB(int index, int[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NivARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NivARB(uint index, int[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NsvARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glVertexAttrib4NsvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NsvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NsvARB(int index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NsvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NsvARB(uint index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NsvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NsvARB(int index, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NsvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NsvARB(uint index, short[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NubARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glVertexAttrib4NubARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NubARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NubARB(int index, byte x, byte y, byte z, byte w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NubARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NubARB(uint index, byte x, byte y, byte z, byte w)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NubvARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glVertexAttrib4NubvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NubvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NubvARB(int index, ref byte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NubvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NubvARB(uint index, ref byte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NubvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NubvARB(int index, byte[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NubvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NubvARB(uint index, byte[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NuivARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glVertexAttrib4NuivARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NuivARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NuivARB(int index, ref int v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NuivARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NuivARB(uint index, ref int v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NuivARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NuivARB(int index, int[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NuivARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NuivARB(uint index, int[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NuivARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NuivARB(int index, ref uint v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NuivARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NuivARB(uint index, ref uint v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NuivARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NuivARB(int index, uint[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NuivARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NuivARB(uint index, uint[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NusvARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glVertexAttrib4NusvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NusvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NusvARB(int index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NusvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NusvARB(uint index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NusvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NusvARB(int index, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NusvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NusvARB(uint index, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NusvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NusvARB(int index, ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NusvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NusvARB(uint index, ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NusvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NusvARB(int index, ushort[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NusvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4NusvARB(uint index, ushort[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4bvARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glVertexAttrib4bvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4bvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4bvARB(int index, ref byte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4bvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4bvARB(uint index, ref byte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4bvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4bvARB(int index, byte[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4bvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4bvARB(uint index, byte[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4bvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4bvARB(int index, ref sbyte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4bvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4bvARB(uint index, ref sbyte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4bvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4bvARB(int index, sbyte[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4bvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4bvARB(uint index, sbyte[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4dARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glVertexAttrib4dARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4dARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4dARB(int index, double x, double y, double z, double w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4dARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4dARB(uint index, double x, double y, double z, double w)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4dvARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glVertexAttrib4dvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4dvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4dvARB(int index, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4dvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4dvARB(uint index, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4dvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4dvARB(int index, double[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4dvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4dvARB(uint index, double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4fARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glVertexAttrib4fARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4fARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4fARB(int index, float x, float y, float z, float w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4fARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4fARB(uint index, float x, float y, float z, float w)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4fvARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glVertexAttrib4fvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4fvARB(int index, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4fvARB(uint index, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4fvARB(int index, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4fvARB(uint index, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4ivARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glVertexAttrib4ivARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4ivARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4ivARB(int index, ref int v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4ivARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4ivARB(uint index, ref int v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4ivARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4ivARB(int index, int[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4ivARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4ivARB(uint index, int[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4sARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glVertexAttrib4sARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4sARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4sARB(int index, short x, short y, short z, short w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4sARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4sARB(uint index, short x, short y, short z, short w)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4svARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glVertexAttrib4svARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4svARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4svARB(int index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4svARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4svARB(uint index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4svARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4svARB(int index, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4svARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4svARB(uint index, short[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4ubvARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glVertexAttrib4ubvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4ubvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4ubvARB(int index, ref byte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4ubvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4ubvARB(uint index, ref byte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4ubvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4ubvARB(int index, byte[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4ubvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4ubvARB(uint index, byte[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4uivARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glVertexAttrib4uivARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4uivARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4uivARB(int index, ref int v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4uivARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4uivARB(uint index, ref int v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4uivARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4uivARB(int index, int[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4uivARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4uivARB(uint index, int[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4uivARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4uivARB(int index, ref uint v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4uivARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4uivARB(uint index, ref uint v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4uivARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4uivARB(int index, uint[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4uivARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4uivARB(uint index, uint[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4usvARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glVertexAttrib4usvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4usvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4usvARB(int index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4usvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4usvARB(uint index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4usvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4usvARB(int index, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4usvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4usvARB(uint index, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4usvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4usvARB(int index, ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4usvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4usvARB(uint index, ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4usvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4usvARB(int index, ushort[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4usvARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4usvARB(uint index, ushort[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glVertexAttribPointerARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, string pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, string pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, string pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, string pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, ref sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, ref sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, ref sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, ref sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, sbyte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, sbyte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, sbyte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, sbyte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, sbyte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, sbyte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, sbyte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, sbyte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, ref ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, ref ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, ref ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, ref ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, ushort[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, ushort[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, ushort[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, ushort[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, ushort[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, ushort[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, ushort[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, ushort[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, ref uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, ref uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, ref uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, ref uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, uint[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, uint[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, uint[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, uint[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, uint[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, uint[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, uint[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, uint[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, uint[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, uint[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, uint[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, uint[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, ref bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, ref bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, ref bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, ref bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, bool[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, bool[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, bool[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, bool[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, bool[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, bool[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, bool[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, bool[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, ref byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, ref byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, ref byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, ref byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, byte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, byte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, byte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, byte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, byte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, byte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, byte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, byte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, ref short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, ref short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, ref short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, ref short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, short[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, short[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, short[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, short[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, short[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, short[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, short[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, short[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, ref int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, ref int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, ref int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, ref int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, int[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, int[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, int[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, int[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, int[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, int[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, int[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, int[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, ref float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, ref float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, ref float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, ref float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, float[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, float[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, float[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, float[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, float[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, float[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, float[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, float[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, ref double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, ref double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, ref double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, ref double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, double[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, double[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, double[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, double[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, double[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, int normalized, int stride, double[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(int index, int size, int type, bool normalized, int stride, double[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerARB(uint index, int size, int type, bool normalized, int stride, double[, ,] pointer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glEnableVertexAttribArrayARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glEnableVertexAttribArrayARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glEnableVertexAttribArrayARB"), SuppressUnmanagedCodeSecurity]
        public static void glEnableVertexAttribArrayARB(int index)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glEnableVertexAttribArrayARB"), SuppressUnmanagedCodeSecurity]
        public static void glEnableVertexAttribArrayARB(uint index)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glDisableVertexAttribArrayARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glDisableVertexAttribArrayARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glDisableVertexAttribArrayARB"), SuppressUnmanagedCodeSecurity]
        public static void glDisableVertexAttribArrayARB(int index)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glDisableVertexAttribArrayARB"), SuppressUnmanagedCodeSecurity]
        public static void glDisableVertexAttribArrayARB(uint index)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glProgramStringARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, bool[] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, byte[] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, short[] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, int[] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, float[] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, double[] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, string arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, IntPtr arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, ref sbyte arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, sbyte[] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, sbyte[,] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, sbyte[, ,] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, ref ushort arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, ushort[] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, ushort[,] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, ushort[, ,] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, ref uint arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, uint[] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, uint[,] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, uint[, ,] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, ref bool arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, bool[,] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, bool[, ,] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, ref byte arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, byte[,] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, byte[, ,] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, ref short arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, short[,] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, short[, ,] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, ref int arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, int[,] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, int[, ,] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, ref float arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, float[,] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, float[, ,] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, ref double arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, double[,] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramStringARB(int target, int format, int len, double[, ,] arg_string)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glBindProgramARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glBindProgramARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glBindProgramARB"), SuppressUnmanagedCodeSecurity]
        public static void glBindProgramARB(int target, int program)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glBindProgramARB"), SuppressUnmanagedCodeSecurity]
        public static void glBindProgramARB(int target, uint program)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glDeleteProgramsARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glDeleteProgramsARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glDeleteProgramsARB"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteProgramsARB(int n, ref int programs)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glDeleteProgramsARB"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteProgramsARB(int n, int[] programs)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glDeleteProgramsARB"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteProgramsARB(int n, ref uint programs)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glDeleteProgramsARB"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteProgramsARB(int n, uint[] programs)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGenProgramsARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glGenProgramsARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGenProgramsARB"), SuppressUnmanagedCodeSecurity]
        public static void glGenProgramsARB(int n, out int programs)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGenProgramsARB"), SuppressUnmanagedCodeSecurity]
        public static void glGenProgramsARB(int n, [Out] int[] programs)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGenProgramsARB"), SuppressUnmanagedCodeSecurity]
        public static void glGenProgramsARB(int n, out uint programs)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGenProgramsARB"), SuppressUnmanagedCodeSecurity]
        public static void glGenProgramsARB(int n, [Out] uint[] programs)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramEnvParameter4dARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glProgramEnvParameter4dARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramEnvParameter4dARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramEnvParameter4dARB(int target, int index, double x, double y, double z, double w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramEnvParameter4dARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramEnvParameter4dARB(int target, uint index, double x, double y, double z, double w)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramEnvParameter4dvARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glProgramEnvParameter4dvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramEnvParameter4dvARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramEnvParameter4dvARB(int target, int index, ref double arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramEnvParameter4dvARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramEnvParameter4dvARB(int target, uint index, ref double arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramEnvParameter4dvARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramEnvParameter4dvARB(int target, int index, double[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramEnvParameter4dvARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramEnvParameter4dvARB(int target, uint index, double[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramEnvParameter4fARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glProgramEnvParameter4fARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramEnvParameter4fARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramEnvParameter4fARB(int target, int index, float x, float y, float z, float w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramEnvParameter4fARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramEnvParameter4fARB(int target, uint index, float x, float y, float z, float w)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramEnvParameter4fvARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glProgramEnvParameter4fvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramEnvParameter4fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramEnvParameter4fvARB(int target, int index, ref float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramEnvParameter4fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramEnvParameter4fvARB(int target, uint index, ref float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramEnvParameter4fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramEnvParameter4fvARB(int target, int index, float[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramEnvParameter4fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramEnvParameter4fvARB(int target, uint index, float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramLocalParameter4dARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glProgramLocalParameter4dARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramLocalParameter4dARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramLocalParameter4dARB(int target, int index, double x, double y, double z, double w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramLocalParameter4dARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramLocalParameter4dARB(int target, uint index, double x, double y, double z, double w)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramLocalParameter4dvARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glProgramLocalParameter4dvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramLocalParameter4dvARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramLocalParameter4dvARB(int target, int index, ref double arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramLocalParameter4dvARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramLocalParameter4dvARB(int target, uint index, ref double arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramLocalParameter4dvARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramLocalParameter4dvARB(int target, int index, double[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramLocalParameter4dvARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramLocalParameter4dvARB(int target, uint index, double[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramLocalParameter4fARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glProgramLocalParameter4fARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramLocalParameter4fARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramLocalParameter4fARB(int target, int index, float x, float y, float z, float w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramLocalParameter4fARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramLocalParameter4fARB(int target, uint index, float x, float y, float z, float w)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramLocalParameter4fvARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glProgramLocalParameter4fvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramLocalParameter4fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramLocalParameter4fvARB(int target, int index, ref float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramLocalParameter4fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramLocalParameter4fvARB(int target, uint index, ref float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramLocalParameter4fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramLocalParameter4fvARB(int target, int index, float[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramLocalParameter4fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glProgramLocalParameter4fvARB(int target, uint index, float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramEnvParameterdvARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glGetProgramEnvParameterdvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramEnvParameterdvARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramEnvParameterdvARB(int target, int index, out double arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramEnvParameterdvARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramEnvParameterdvARB(int target, uint index, out double arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramEnvParameterdvARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramEnvParameterdvARB(int target, int index, [Out] double[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramEnvParameterdvARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramEnvParameterdvARB(int target, uint index, [Out] double[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramEnvParameterfvARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glGetProgramEnvParameterfvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramEnvParameterfvARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramEnvParameterfvARB(int target, int index, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramEnvParameterfvARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramEnvParameterfvARB(int target, uint index, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramEnvParameterfvARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramEnvParameterfvARB(int target, int index, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramEnvParameterfvARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramEnvParameterfvARB(int target, uint index, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramLocalParameterdvARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glGetProgramLocalParameterdvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramLocalParameterdvARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramLocalParameterdvARB(int target, int index, out double arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramLocalParameterdvARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramLocalParameterdvARB(int target, uint index, out double arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramLocalParameterdvARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramLocalParameterdvARB(int target, int index, [Out] double[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramLocalParameterdvARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramLocalParameterdvARB(int target, uint index, [Out] double[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramLocalParameterfvARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glGetProgramLocalParameterfvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramLocalParameterfvARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramLocalParameterfvARB(int target, int index, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramLocalParameterfvARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramLocalParameterfvARB(int target, uint index, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramLocalParameterfvARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramLocalParameterfvARB(int target, int index, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramLocalParameterfvARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramLocalParameterfvARB(int target, uint index, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramivARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glGetProgramivARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramivARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramivARB(int target, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramivARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramivARB(int target, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glGetProgramStringARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramStringARB(int target, int pname, [Out] bool[] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramStringARB(int target, int pname, [Out] byte[] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramStringARB(int target, int pname, [Out] short[] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramStringARB(int target, int pname, [Out] int[] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramStringARB(int target, int pname, [Out] float[] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramStringARB(int target, int pname, [Out] double[] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramStringARB(int target, int pname, IntPtr arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramStringARB(int target, int pname, out bool arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramStringARB(int target, int pname, out byte arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramStringARB(int target, int pname, out short arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramStringARB(int target, int pname, out int arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramStringARB(int target, int pname, out float arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramStringARB(int target, int pname, out double arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramStringARB(int target, int pname, out sbyte arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramStringARB(int target, int pname, [Out] sbyte[] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramStringARB(int target, int pname, out ushort arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramStringARB(int target, int pname, [Out] ushort[] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramStringARB(int target, int pname, out uint arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramStringARB(int target, int pname, [Out] uint[] arg_string)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribdvARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glGetVertexAttribdvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribdvARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribdvARB(int index, int pname, out double arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribdvARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribdvARB(uint index, int pname, out double arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribdvARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribdvARB(int index, int pname, [Out] double[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribdvARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribdvARB(uint index, int pname, [Out] double[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribfvARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glGetVertexAttribfvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribfvARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribfvARB(int index, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribfvARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribfvARB(uint index, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribfvARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribfvARB(int index, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribfvARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribfvARB(uint index, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribivARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glGetVertexAttribivARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribivARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribivARB(int index, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribivARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribivARB(uint index, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribivARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribivARB(int index, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribivARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribivARB(uint index, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glGetVertexAttribPointervARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(int index, int pname, [Out] bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(uint index, int pname, [Out] bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(int index, int pname, [Out] byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(uint index, int pname, [Out] byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(int index, int pname, [Out] short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(uint index, int pname, [Out] short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(int index, int pname, [Out] int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(uint index, int pname, [Out] int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(int index, int pname, [Out] float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(uint index, int pname, [Out] float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(int index, int pname, [Out] double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(uint index, int pname, [Out] double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(int index, int pname, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(uint index, int pname, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(int index, int pname, out bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(uint index, int pname, out bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(int index, int pname, out byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(uint index, int pname, out byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(int index, int pname, out short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(uint index, int pname, out short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(int index, int pname, out int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(uint index, int pname, out int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(int index, int pname, out float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(uint index, int pname, out float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(int index, int pname, out double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(uint index, int pname, out double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(int index, int pname, out sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(uint index, int pname, out sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(int index, int pname, [Out] sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(uint index, int pname, [Out] sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(int index, int pname, out ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(uint index, int pname, out ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(int index, int pname, [Out] ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(uint index, int pname, [Out] ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(int index, int pname, out uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(uint index, int pname, out uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(int index, int pname, [Out] uint[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervARB(uint index, int pname, [Out] uint[] pointer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glIsProgramARB")]
        public static IntPtr ext__GL_ARB_vertex_program__glIsProgramARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_program", "glIsProgramARB"), SuppressUnmanagedCodeSecurity]
        public static int glIsProgramARB(int program)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_program", "glIsProgramARB"), SuppressUnmanagedCodeSecurity]
        public static int glIsProgramARB(uint program)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glBindAttribLocationARB")]
        public static IntPtr ext__GL_ARB_vertex_shader__glBindAttribLocationARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glBindAttribLocationARB"), SuppressUnmanagedCodeSecurity]
        public static void glBindAttribLocationARB(int programObj, int index, string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glBindAttribLocationARB"), SuppressUnmanagedCodeSecurity]
        public static void glBindAttribLocationARB(uint programObj, int index, string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glBindAttribLocationARB"), SuppressUnmanagedCodeSecurity]
        public static void glBindAttribLocationARB(int programObj, uint index, string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glBindAttribLocationARB"), SuppressUnmanagedCodeSecurity]
        public static void glBindAttribLocationARB(uint programObj, uint index, string name)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB")]
        public static IntPtr ext__GL_ARB_vertex_shader__glGetActiveAttribARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttribARB(int programObj, int index, int maxLength, out int length, out int size, out int type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttribARB(uint programObj, int index, int maxLength, out int length, out int size, out int type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttribARB(int programObj, uint index, int maxLength, out int length, out int size, out int type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttribARB(uint programObj, uint index, int maxLength, out int length, out int size, out int type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttribARB(int programObj, int index, int maxLength, [Out] int[] length, out int size, out int type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttribARB(uint programObj, int index, int maxLength, [Out] int[] length, out int size, out int type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttribARB(int programObj, uint index, int maxLength, [Out] int[] length, out int size, out int type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttribARB(uint programObj, uint index, int maxLength, [Out] int[] length, out int size, out int type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttribARB(int programObj, int index, int maxLength, out int length, [Out] int[] size, out int type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttribARB(uint programObj, int index, int maxLength, out int length, [Out] int[] size, out int type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttribARB(int programObj, uint index, int maxLength, out int length, [Out] int[] size, out int type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttribARB(uint programObj, uint index, int maxLength, out int length, [Out] int[] size, out int type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttribARB(int programObj, int index, int maxLength, [Out] int[] length, [Out] int[] size, out int type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttribARB(uint programObj, int index, int maxLength, [Out] int[] length, [Out] int[] size, out int type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttribARB(int programObj, uint index, int maxLength, [Out] int[] length, [Out] int[] size, out int type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttribARB(uint programObj, uint index, int maxLength, [Out] int[] length, [Out] int[] size, out int type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttribARB(int programObj, int index, int maxLength, out int length, out int size, [Out] int[] type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttribARB(uint programObj, int index, int maxLength, out int length, out int size, [Out] int[] type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttribARB(int programObj, uint index, int maxLength, out int length, out int size, [Out] int[] type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttribARB(uint programObj, uint index, int maxLength, out int length, out int size, [Out] int[] type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttribARB(int programObj, int index, int maxLength, [Out] int[] length, out int size, [Out] int[] type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttribARB(uint programObj, int index, int maxLength, [Out] int[] length, out int size, [Out] int[] type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttribARB(int programObj, uint index, int maxLength, [Out] int[] length, out int size, [Out] int[] type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttribARB(uint programObj, uint index, int maxLength, [Out] int[] length, out int size, [Out] int[] type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttribARB(int programObj, int index, int maxLength, out int length, [Out] int[] size, [Out] int[] type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttribARB(uint programObj, int index, int maxLength, out int length, [Out] int[] size, [Out] int[] type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttribARB(int programObj, uint index, int maxLength, out int length, [Out] int[] size, [Out] int[] type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttribARB(uint programObj, uint index, int maxLength, out int length, [Out] int[] size, [Out] int[] type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttribARB(int programObj, int index, int maxLength, [Out] int[] length, [Out] int[] size, [Out] int[] type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttribARB(uint programObj, int index, int maxLength, [Out] int[] length, [Out] int[] size, [Out] int[] type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttribARB(int programObj, uint index, int maxLength, [Out] int[] length, [Out] int[] size, [Out] int[] type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttribARB(uint programObj, uint index, int maxLength, [Out] int[] length, [Out] int[] size, [Out] int[] type, System.Text.StringBuilder name)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetAttribLocationARB")]
        public static IntPtr ext__GL_ARB_vertex_shader__glGetAttribLocationARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetAttribLocationARB"), SuppressUnmanagedCodeSecurity]
        public static int glGetAttribLocationARB(int programObj, string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetAttribLocationARB"), SuppressUnmanagedCodeSecurity]
        public static int glGetAttribLocationARB(uint programObj, string name)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2dARB")]
        public static IntPtr ext__GL_ARB_window_pos__glWindowPos2dARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2dARB"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos2dARB(double x, double y)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2dvARB")]
        public static IntPtr ext__GL_ARB_window_pos__glWindowPos2dvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2dvARB"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos2dvARB(ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2dvARB"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos2dvARB(double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2fARB")]
        public static IntPtr ext__GL_ARB_window_pos__glWindowPos2fARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2fARB"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos2fARB(float x, float y)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2fvARB")]
        public static IntPtr ext__GL_ARB_window_pos__glWindowPos2fvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos2fvARB(ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos2fvARB(float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2iARB")]
        public static IntPtr ext__GL_ARB_window_pos__glWindowPos2iARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2iARB"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos2iARB(int x, int y)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2ivARB")]
        public static IntPtr ext__GL_ARB_window_pos__glWindowPos2ivARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2ivARB"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos2ivARB(ref int v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2ivARB"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos2ivARB(int[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2sARB")]
        public static IntPtr ext__GL_ARB_window_pos__glWindowPos2sARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2sARB"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos2sARB(short x, short y)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2svARB")]
        public static IntPtr ext__GL_ARB_window_pos__glWindowPos2svARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2svARB"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos2svARB(ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2svARB"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos2svARB(short[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3dARB")]
        public static IntPtr ext__GL_ARB_window_pos__glWindowPos3dARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3dARB"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos3dARB(double x, double y, double z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3dvARB")]
        public static IntPtr ext__GL_ARB_window_pos__glWindowPos3dvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3dvARB"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos3dvARB(ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3dvARB"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos3dvARB(double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3fARB")]
        public static IntPtr ext__GL_ARB_window_pos__glWindowPos3fARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3fARB"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos3fARB(float x, float y, float z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3fvARB")]
        public static IntPtr ext__GL_ARB_window_pos__glWindowPos3fvARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos3fvARB(ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3fvARB"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos3fvARB(float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3iARB")]
        public static IntPtr ext__GL_ARB_window_pos__glWindowPos3iARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3iARB"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos3iARB(int x, int y, int z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3ivARB")]
        public static IntPtr ext__GL_ARB_window_pos__glWindowPos3ivARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3ivARB"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos3ivARB(ref int v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3ivARB"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos3ivARB(int[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3sARB")]
        public static IntPtr ext__GL_ARB_window_pos__glWindowPos3sARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3sARB"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos3sARB(short x, short y, short z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3svARB")]
        public static IntPtr ext__GL_ARB_window_pos__glWindowPos3svARB = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3svARB"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos3svARB(ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3svARB"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos3svARB(short[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_draw_buffers", "glDrawBuffersATI")]
        public static IntPtr ext__GL_ATI_draw_buffers__glDrawBuffersATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_draw_buffers", "glDrawBuffersATI"), SuppressUnmanagedCodeSecurity]
        public static void glDrawBuffersATI(int n, ref int bufs)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_draw_buffers", "glDrawBuffersATI"), SuppressUnmanagedCodeSecurity]
        public static void glDrawBuffersATI(int n, int[] bufs)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI")]
        public static IntPtr ext__GL_ATI_element_array__glElementPointerATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, string pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, ref sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, sbyte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, sbyte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, ref ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, ushort[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, ushort[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, ref uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, uint[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, uint[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, uint[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, ref bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, bool[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, bool[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, ref byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, byte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, byte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, ref short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, short[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, short[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, ref int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, int[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, int[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, ref float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, float[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, float[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, ref double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, double[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity]
        public static void glElementPointerATI(int type, double[, ,] pointer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_element_array", "glDrawElementArrayATI")]
        public static IntPtr ext__GL_ATI_element_array__glDrawElementArrayATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_element_array", "glDrawElementArrayATI"), SuppressUnmanagedCodeSecurity]
        public static void glDrawElementArrayATI(int mode, int count)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_element_array", "glDrawRangeElementArrayATI")]
        public static IntPtr ext__GL_ATI_element_array__glDrawRangeElementArrayATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_element_array", "glDrawRangeElementArrayATI"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementArrayATI(int mode, int start, int end, int count)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glDrawRangeElementArrayATI"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementArrayATI(int mode, uint start, int end, int count)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glDrawRangeElementArrayATI"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementArrayATI(int mode, int start, uint end, int count)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_element_array", "glDrawRangeElementArrayATI"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementArrayATI(int mode, uint start, uint end, int count)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_envmap_bumpmap", "glTexBumpParameterivATI")]
        public static IntPtr ext__GL_ATI_envmap_bumpmap__glTexBumpParameterivATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_envmap_bumpmap", "glTexBumpParameterivATI"), SuppressUnmanagedCodeSecurity]
        public static void glTexBumpParameterivATI(int pname, ref int param)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_envmap_bumpmap", "glTexBumpParameterivATI"), SuppressUnmanagedCodeSecurity]
        public static void glTexBumpParameterivATI(int pname, int[] param)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_envmap_bumpmap", "glTexBumpParameterfvATI")]
        public static IntPtr ext__GL_ATI_envmap_bumpmap__glTexBumpParameterfvATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_envmap_bumpmap", "glTexBumpParameterfvATI"), SuppressUnmanagedCodeSecurity]
        public static void glTexBumpParameterfvATI(int pname, ref float param)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_envmap_bumpmap", "glTexBumpParameterfvATI"), SuppressUnmanagedCodeSecurity]
        public static void glTexBumpParameterfvATI(int pname, float[] param)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_envmap_bumpmap", "glGetTexBumpParameterivATI")]
        public static IntPtr ext__GL_ATI_envmap_bumpmap__glGetTexBumpParameterivATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_envmap_bumpmap", "glGetTexBumpParameterivATI"), SuppressUnmanagedCodeSecurity]
        public static void glGetTexBumpParameterivATI(int pname, out int param)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_envmap_bumpmap", "glGetTexBumpParameterivATI"), SuppressUnmanagedCodeSecurity]
        public static void glGetTexBumpParameterivATI(int pname, [Out] int[] param)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_envmap_bumpmap", "glGetTexBumpParameterfvATI")]
        public static IntPtr ext__GL_ATI_envmap_bumpmap__glGetTexBumpParameterfvATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_envmap_bumpmap", "glGetTexBumpParameterfvATI"), SuppressUnmanagedCodeSecurity]
        public static void glGetTexBumpParameterfvATI(int pname, out float param)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_envmap_bumpmap", "glGetTexBumpParameterfvATI"), SuppressUnmanagedCodeSecurity]
        public static void glGetTexBumpParameterfvATI(int pname, [Out] float[] param)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glGenFragmentShadersATI")]
        public static IntPtr ext__GL_ATI_fragment_shader__glGenFragmentShadersATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glGenFragmentShadersATI"), SuppressUnmanagedCodeSecurity]
        public static int glGenFragmentShadersATI(int range)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glGenFragmentShadersATI"), SuppressUnmanagedCodeSecurity]
        public static int glGenFragmentShadersATI(uint range)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glBindFragmentShaderATI")]
        public static IntPtr ext__GL_ATI_fragment_shader__glBindFragmentShaderATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glBindFragmentShaderATI"), SuppressUnmanagedCodeSecurity]
        public static void glBindFragmentShaderATI(int id)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glBindFragmentShaderATI"), SuppressUnmanagedCodeSecurity]
        public static void glBindFragmentShaderATI(uint id)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glDeleteFragmentShaderATI")]
        public static IntPtr ext__GL_ATI_fragment_shader__glDeleteFragmentShaderATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glDeleteFragmentShaderATI"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteFragmentShaderATI(int id)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glDeleteFragmentShaderATI"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteFragmentShaderATI(uint id)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glBeginFragmentShaderATI")]
        public static IntPtr ext__GL_ATI_fragment_shader__glBeginFragmentShaderATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glBeginFragmentShaderATI"), SuppressUnmanagedCodeSecurity]
        public static void glBeginFragmentShaderATI()
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glEndFragmentShaderATI")]
        public static IntPtr ext__GL_ATI_fragment_shader__glEndFragmentShaderATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glEndFragmentShaderATI"), SuppressUnmanagedCodeSecurity]
        public static void glEndFragmentShaderATI()
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glPassTexCoordATI")]
        public static IntPtr ext__GL_ATI_fragment_shader__glPassTexCoordATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glPassTexCoordATI"), SuppressUnmanagedCodeSecurity]
        public static void glPassTexCoordATI(int dst, int coord, int swizzle)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glPassTexCoordATI"), SuppressUnmanagedCodeSecurity]
        public static void glPassTexCoordATI(uint dst, int coord, int swizzle)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glPassTexCoordATI"), SuppressUnmanagedCodeSecurity]
        public static void glPassTexCoordATI(int dst, uint coord, int swizzle)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glPassTexCoordATI"), SuppressUnmanagedCodeSecurity]
        public static void glPassTexCoordATI(uint dst, uint coord, int swizzle)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glSampleMapATI")]
        public static IntPtr ext__GL_ATI_fragment_shader__glSampleMapATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glSampleMapATI"), SuppressUnmanagedCodeSecurity]
        public static void glSampleMapATI(int dst, int interp, int swizzle)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glSampleMapATI"), SuppressUnmanagedCodeSecurity]
        public static void glSampleMapATI(uint dst, int interp, int swizzle)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glSampleMapATI"), SuppressUnmanagedCodeSecurity]
        public static void glSampleMapATI(int dst, uint interp, int swizzle)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glSampleMapATI"), SuppressUnmanagedCodeSecurity]
        public static void glSampleMapATI(uint dst, uint interp, int swizzle)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glColorFragmentOp1ATI")]
        public static IntPtr ext__GL_ATI_fragment_shader__glColorFragmentOp1ATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glColorFragmentOp1ATI"), SuppressUnmanagedCodeSecurity]
        public static void glColorFragmentOp1ATI(int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glColorFragmentOp2ATI")]
        public static IntPtr ext__GL_ATI_fragment_shader__glColorFragmentOp2ATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glColorFragmentOp2ATI"), SuppressUnmanagedCodeSecurity]
        public static void glColorFragmentOp2ATI(int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glColorFragmentOp3ATI")]
        public static IntPtr ext__GL_ATI_fragment_shader__glColorFragmentOp3ATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glColorFragmentOp3ATI"), SuppressUnmanagedCodeSecurity]
        public static void glColorFragmentOp3ATI(int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod, int arg3, int arg3Rep, int arg3Mod)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glAlphaFragmentOp1ATI")]
        public static IntPtr ext__GL_ATI_fragment_shader__glAlphaFragmentOp1ATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glAlphaFragmentOp1ATI"), SuppressUnmanagedCodeSecurity]
        public static void glAlphaFragmentOp1ATI(int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glAlphaFragmentOp2ATI")]
        public static IntPtr ext__GL_ATI_fragment_shader__glAlphaFragmentOp2ATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glAlphaFragmentOp2ATI"), SuppressUnmanagedCodeSecurity]
        public static void glAlphaFragmentOp2ATI(int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glAlphaFragmentOp3ATI")]
        public static IntPtr ext__GL_ATI_fragment_shader__glAlphaFragmentOp3ATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glAlphaFragmentOp3ATI"), SuppressUnmanagedCodeSecurity]
        public static void glAlphaFragmentOp3ATI(int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod, int arg3, int arg3Rep, int arg3Mod)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glSetFragmentShaderConstantATI")]
        public static IntPtr ext__GL_ATI_fragment_shader__glSetFragmentShaderConstantATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glSetFragmentShaderConstantATI"), SuppressUnmanagedCodeSecurity]
        public static void glSetFragmentShaderConstantATI(int dst, ref float value)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glSetFragmentShaderConstantATI"), SuppressUnmanagedCodeSecurity]
        public static void glSetFragmentShaderConstantATI(uint dst, ref float value)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glSetFragmentShaderConstantATI"), SuppressUnmanagedCodeSecurity]
        public static void glSetFragmentShaderConstantATI(int dst, float[] value)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_fragment_shader", "glSetFragmentShaderConstantATI"), SuppressUnmanagedCodeSecurity]
        public static void glSetFragmentShaderConstantATI(uint dst, float[] value)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_map_object_buffer", "glMapObjectBufferATI")]
        public static IntPtr ext__GL_ATI_map_object_buffer__glMapObjectBufferATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_map_object_buffer", "glMapObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static IntPtr glMapObjectBufferATI(int buffer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_map_object_buffer", "glMapObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static IntPtr glMapObjectBufferATI(uint buffer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_map_object_buffer", "glUnmapObjectBufferATI")]
        public static IntPtr ext__GL_ATI_map_object_buffer__glUnmapObjectBufferATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_map_object_buffer", "glUnmapObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUnmapObjectBufferATI(int buffer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_map_object_buffer", "glUnmapObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUnmapObjectBufferATI(uint buffer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_pn_triangles", "glPNTrianglesiATI")]
        public static IntPtr ext__GL_ATI_pn_triangles__glPNTrianglesiATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_pn_triangles", "glPNTrianglesiATI"), SuppressUnmanagedCodeSecurity]
        public static void glPNTrianglesiATI(int pname, int param)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_pn_triangles", "glPNTrianglesfATI")]
        public static IntPtr ext__GL_ATI_pn_triangles__glPNTrianglesfATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_pn_triangles", "glPNTrianglesfATI"), SuppressUnmanagedCodeSecurity]
        public static void glPNTrianglesfATI(int pname, float param)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_separate_stencil", "glStencilOpSeparateATI")]
        public static IntPtr ext__GL_ATI_separate_stencil__glStencilOpSeparateATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_separate_stencil", "glStencilOpSeparateATI"), SuppressUnmanagedCodeSecurity]
        public static void glStencilOpSeparateATI(int face, int sfail, int dpfail, int dppass)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_separate_stencil", "glStencilFuncSeparateATI")]
        public static IntPtr ext__GL_ATI_separate_stencil__glStencilFuncSeparateATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_separate_stencil", "glStencilFuncSeparateATI"), SuppressUnmanagedCodeSecurity]
        public static void glStencilFuncSeparateATI(int frontfunc, int backfunc, int arg_ref, int mask)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_separate_stencil", "glStencilFuncSeparateATI"), SuppressUnmanagedCodeSecurity]
        public static void glStencilFuncSeparateATI(int frontfunc, int backfunc, int arg_ref, uint mask)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI")]
        public static IntPtr ext__GL_ATI_vertex_array_object__glNewObjectBufferATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, bool[] pointer, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, byte[] pointer, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, short[] pointer, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, int[] pointer, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, float[] pointer, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, double[] pointer, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, string pointer, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, IntPtr pointer, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, ref sbyte pointer, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, sbyte[] pointer, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, sbyte[,] pointer, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, sbyte[, ,] pointer, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, ref ushort pointer, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, ushort[] pointer, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, ushort[,] pointer, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, ushort[, ,] pointer, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, ref uint pointer, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, uint[] pointer, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, uint[,] pointer, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, uint[, ,] pointer, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, ref bool pointer, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, bool[,] pointer, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, bool[, ,] pointer, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, ref byte pointer, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, byte[,] pointer, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, byte[, ,] pointer, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, ref short pointer, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, short[,] pointer, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, short[, ,] pointer, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, ref int pointer, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, int[,] pointer, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, int[, ,] pointer, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, ref float pointer, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, float[,] pointer, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, float[, ,] pointer, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, ref double pointer, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, double[,] pointer, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glNewObjectBufferATI(int size, double[, ,] pointer, int usage)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glIsObjectBufferATI")]
        public static IntPtr ext__GL_ATI_vertex_array_object__glIsObjectBufferATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glIsObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glIsObjectBufferATI(int buffer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glIsObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static int glIsObjectBufferATI(uint buffer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI")]
        public static IntPtr ext__GL_ATI_vertex_array_object__glUpdateObjectBufferATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, bool[] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, bool[] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, bool[] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, bool[] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, byte[] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, byte[] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, byte[] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, byte[] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, short[] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, short[] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, short[] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, short[] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, int[] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, int[] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, int[] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, int[] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, float[] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, float[] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, float[] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, float[] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, double[] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, double[] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, double[] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, double[] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, string pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, string pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, string pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, string pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, IntPtr pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, IntPtr pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, IntPtr pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, IntPtr pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, ref sbyte pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, ref sbyte pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, ref sbyte pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, ref sbyte pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, sbyte[] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, sbyte[] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, sbyte[] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, sbyte[] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, sbyte[,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, sbyte[,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, sbyte[,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, sbyte[,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, sbyte[, ,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, sbyte[, ,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, sbyte[, ,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, sbyte[, ,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, ref ushort pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, ref ushort pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, ref ushort pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, ref ushort pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, ushort[] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, ushort[] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, ushort[] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, ushort[] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, ushort[,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, ushort[,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, ushort[,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, ushort[,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, ushort[, ,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, ushort[, ,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, ushort[, ,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, ushort[, ,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, ref uint pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, ref uint pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, ref uint pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, ref uint pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, uint[] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, uint[] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, uint[] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, uint[] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, uint[,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, uint[,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, uint[,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, uint[,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, uint[, ,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, uint[, ,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, uint[, ,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, uint[, ,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, ref bool pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, ref bool pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, ref bool pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, ref bool pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, bool[,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, bool[,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, bool[,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, bool[,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, bool[, ,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, bool[, ,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, bool[, ,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, bool[, ,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, ref byte pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, ref byte pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, ref byte pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, ref byte pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, byte[,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, byte[,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, byte[,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, byte[,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, byte[, ,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, byte[, ,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, byte[, ,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, byte[, ,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, ref short pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, ref short pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, ref short pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, ref short pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, short[,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, short[,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, short[,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, short[,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, short[, ,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, short[, ,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, short[, ,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, short[, ,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, ref int pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, ref int pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, ref int pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, ref int pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, int[,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, int[,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, int[,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, int[,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, int[, ,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, int[, ,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, int[, ,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, int[, ,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, ref float pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, ref float pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, ref float pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, ref float pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, float[,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, float[,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, float[,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, float[,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, float[, ,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, float[, ,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, float[, ,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, float[, ,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, ref double pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, ref double pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, ref double pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, ref double pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, double[,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, double[,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, double[,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, double[,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, int offset, int size, double[, ,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, int offset, int size, double[, ,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(int buffer, uint offset, int size, double[, ,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glUpdateObjectBufferATI(uint buffer, uint offset, int size, double[, ,] pointer, int preserve)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetObjectBufferfvATI")]
        public static IntPtr ext__GL_ATI_vertex_array_object__glGetObjectBufferfvATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetObjectBufferfvATI"), SuppressUnmanagedCodeSecurity]
        public static void glGetObjectBufferfvATI(int buffer, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetObjectBufferfvATI"), SuppressUnmanagedCodeSecurity]
        public static void glGetObjectBufferfvATI(uint buffer, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetObjectBufferfvATI"), SuppressUnmanagedCodeSecurity]
        public static void glGetObjectBufferfvATI(int buffer, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetObjectBufferfvATI"), SuppressUnmanagedCodeSecurity]
        public static void glGetObjectBufferfvATI(uint buffer, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetObjectBufferivATI")]
        public static IntPtr ext__GL_ATI_vertex_array_object__glGetObjectBufferivATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetObjectBufferivATI"), SuppressUnmanagedCodeSecurity]
        public static void glGetObjectBufferivATI(int buffer, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetObjectBufferivATI"), SuppressUnmanagedCodeSecurity]
        public static void glGetObjectBufferivATI(uint buffer, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetObjectBufferivATI"), SuppressUnmanagedCodeSecurity]
        public static void glGetObjectBufferivATI(int buffer, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetObjectBufferivATI"), SuppressUnmanagedCodeSecurity]
        public static void glGetObjectBufferivATI(uint buffer, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glFreeObjectBufferATI")]
        public static IntPtr ext__GL_ATI_vertex_array_object__glFreeObjectBufferATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glFreeObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glFreeObjectBufferATI(int buffer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glFreeObjectBufferATI"), SuppressUnmanagedCodeSecurity]
        public static void glFreeObjectBufferATI(uint buffer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glArrayObjectATI")]
        public static IntPtr ext__GL_ATI_vertex_array_object__glArrayObjectATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glArrayObjectATI"), SuppressUnmanagedCodeSecurity]
        public static void glArrayObjectATI(int array, int size, int type, int stride, int buffer, int offset)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glArrayObjectATI"), SuppressUnmanagedCodeSecurity]
        public static void glArrayObjectATI(int array, int size, int type, int stride, uint buffer, int offset)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glArrayObjectATI"), SuppressUnmanagedCodeSecurity]
        public static void glArrayObjectATI(int array, int size, int type, int stride, int buffer, uint offset)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glArrayObjectATI"), SuppressUnmanagedCodeSecurity]
        public static void glArrayObjectATI(int array, int size, int type, int stride, uint buffer, uint offset)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetArrayObjectfvATI")]
        public static IntPtr ext__GL_ATI_vertex_array_object__glGetArrayObjectfvATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetArrayObjectfvATI"), SuppressUnmanagedCodeSecurity]
        public static void glGetArrayObjectfvATI(int array, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetArrayObjectfvATI"), SuppressUnmanagedCodeSecurity]
        public static void glGetArrayObjectfvATI(int array, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetArrayObjectivATI")]
        public static IntPtr ext__GL_ATI_vertex_array_object__glGetArrayObjectivATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetArrayObjectivATI"), SuppressUnmanagedCodeSecurity]
        public static void glGetArrayObjectivATI(int array, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetArrayObjectivATI"), SuppressUnmanagedCodeSecurity]
        public static void glGetArrayObjectivATI(int array, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glVariantArrayObjectATI")]
        public static IntPtr ext__GL_ATI_vertex_array_object__glVariantArrayObjectATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glVariantArrayObjectATI"), SuppressUnmanagedCodeSecurity]
        public static void glVariantArrayObjectATI(int id, int type, int stride, int buffer, int offset)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glVariantArrayObjectATI"), SuppressUnmanagedCodeSecurity]
        public static void glVariantArrayObjectATI(uint id, int type, int stride, int buffer, int offset)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glVariantArrayObjectATI"), SuppressUnmanagedCodeSecurity]
        public static void glVariantArrayObjectATI(int id, int type, int stride, uint buffer, int offset)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glVariantArrayObjectATI"), SuppressUnmanagedCodeSecurity]
        public static void glVariantArrayObjectATI(uint id, int type, int stride, uint buffer, int offset)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glVariantArrayObjectATI"), SuppressUnmanagedCodeSecurity]
        public static void glVariantArrayObjectATI(int id, int type, int stride, int buffer, uint offset)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glVariantArrayObjectATI"), SuppressUnmanagedCodeSecurity]
        public static void glVariantArrayObjectATI(uint id, int type, int stride, int buffer, uint offset)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glVariantArrayObjectATI"), SuppressUnmanagedCodeSecurity]
        public static void glVariantArrayObjectATI(int id, int type, int stride, uint buffer, uint offset)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glVariantArrayObjectATI"), SuppressUnmanagedCodeSecurity]
        public static void glVariantArrayObjectATI(uint id, int type, int stride, uint buffer, uint offset)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetVariantArrayObjectfvATI")]
        public static IntPtr ext__GL_ATI_vertex_array_object__glGetVariantArrayObjectfvATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetVariantArrayObjectfvATI"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantArrayObjectfvATI(int id, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetVariantArrayObjectfvATI"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantArrayObjectfvATI(uint id, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetVariantArrayObjectfvATI"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantArrayObjectfvATI(int id, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetVariantArrayObjectfvATI"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantArrayObjectfvATI(uint id, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetVariantArrayObjectivATI")]
        public static IntPtr ext__GL_ATI_vertex_array_object__glGetVariantArrayObjectivATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetVariantArrayObjectivATI"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantArrayObjectivATI(int id, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetVariantArrayObjectivATI"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantArrayObjectivATI(uint id, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetVariantArrayObjectivATI"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantArrayObjectivATI(int id, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetVariantArrayObjectivATI"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantArrayObjectivATI(uint id, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glVertexAttribArrayObjectATI")]
        public static IntPtr ext__GL_ATI_vertex_attrib_array_object__glVertexAttribArrayObjectATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glVertexAttribArrayObjectATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribArrayObjectATI(int index, int size, int type, int normalized, int stride, int buffer, int offset)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glVertexAttribArrayObjectATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribArrayObjectATI(uint index, int size, int type, int normalized, int stride, int buffer, int offset)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glVertexAttribArrayObjectATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribArrayObjectATI(int index, int size, int type, bool normalized, int stride, int buffer, int offset)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glVertexAttribArrayObjectATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribArrayObjectATI(uint index, int size, int type, bool normalized, int stride, int buffer, int offset)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glVertexAttribArrayObjectATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribArrayObjectATI(int index, int size, int type, int normalized, int stride, uint buffer, int offset)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glVertexAttribArrayObjectATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribArrayObjectATI(uint index, int size, int type, int normalized, int stride, uint buffer, int offset)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glVertexAttribArrayObjectATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribArrayObjectATI(int index, int size, int type, bool normalized, int stride, uint buffer, int offset)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glVertexAttribArrayObjectATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribArrayObjectATI(uint index, int size, int type, bool normalized, int stride, uint buffer, int offset)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glVertexAttribArrayObjectATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribArrayObjectATI(int index, int size, int type, int normalized, int stride, int buffer, uint offset)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glVertexAttribArrayObjectATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribArrayObjectATI(uint index, int size, int type, int normalized, int stride, int buffer, uint offset)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glVertexAttribArrayObjectATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribArrayObjectATI(int index, int size, int type, bool normalized, int stride, int buffer, uint offset)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glVertexAttribArrayObjectATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribArrayObjectATI(uint index, int size, int type, bool normalized, int stride, int buffer, uint offset)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glVertexAttribArrayObjectATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribArrayObjectATI(int index, int size, int type, int normalized, int stride, uint buffer, uint offset)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glVertexAttribArrayObjectATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribArrayObjectATI(uint index, int size, int type, int normalized, int stride, uint buffer, uint offset)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glVertexAttribArrayObjectATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribArrayObjectATI(int index, int size, int type, bool normalized, int stride, uint buffer, uint offset)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glVertexAttribArrayObjectATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribArrayObjectATI(uint index, int size, int type, bool normalized, int stride, uint buffer, uint offset)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glGetVertexAttribArrayObjectfvATI")]
        public static IntPtr ext__GL_ATI_vertex_attrib_array_object__glGetVertexAttribArrayObjectfvATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glGetVertexAttribArrayObjectfvATI"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribArrayObjectfvATI(int index, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glGetVertexAttribArrayObjectfvATI"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribArrayObjectfvATI(uint index, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glGetVertexAttribArrayObjectfvATI"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribArrayObjectfvATI(int index, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glGetVertexAttribArrayObjectfvATI"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribArrayObjectfvATI(uint index, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glGetVertexAttribArrayObjectivATI")]
        public static IntPtr ext__GL_ATI_vertex_attrib_array_object__glGetVertexAttribArrayObjectivATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glGetVertexAttribArrayObjectivATI"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribArrayObjectivATI(int index, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glGetVertexAttribArrayObjectivATI"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribArrayObjectivATI(uint index, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glGetVertexAttribArrayObjectivATI"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribArrayObjectivATI(int index, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glGetVertexAttribArrayObjectivATI"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribArrayObjectivATI(uint index, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1sATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glVertexStream1sATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1sATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream1sATI(int stream, short x)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1svATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glVertexStream1svATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1svATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream1svATI(int stream, ref short coords)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1svATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream1svATI(int stream, short[] coords)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1iATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glVertexStream1iATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1iATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream1iATI(int stream, int x)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1ivATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glVertexStream1ivATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1ivATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream1ivATI(int stream, ref int coords)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1ivATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream1ivATI(int stream, int[] coords)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1fATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glVertexStream1fATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1fATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream1fATI(int stream, float x)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1fvATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glVertexStream1fvATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1fvATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream1fvATI(int stream, ref float coords)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1fvATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream1fvATI(int stream, float[] coords)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1dATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glVertexStream1dATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1dATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream1dATI(int stream, double x)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1dvATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glVertexStream1dvATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1dvATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream1dvATI(int stream, ref double coords)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1dvATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream1dvATI(int stream, double[] coords)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2sATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glVertexStream2sATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2sATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream2sATI(int stream, short x, short y)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2svATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glVertexStream2svATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2svATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream2svATI(int stream, ref short coords)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2svATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream2svATI(int stream, short[] coords)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2iATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glVertexStream2iATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2iATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream2iATI(int stream, int x, int y)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2ivATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glVertexStream2ivATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2ivATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream2ivATI(int stream, ref int coords)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2ivATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream2ivATI(int stream, int[] coords)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2fATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glVertexStream2fATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2fATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream2fATI(int stream, float x, float y)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2fvATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glVertexStream2fvATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2fvATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream2fvATI(int stream, ref float coords)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2fvATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream2fvATI(int stream, float[] coords)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2dATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glVertexStream2dATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2dATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream2dATI(int stream, double x, double y)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2dvATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glVertexStream2dvATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2dvATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream2dvATI(int stream, ref double coords)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2dvATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream2dvATI(int stream, double[] coords)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3sATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glVertexStream3sATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3sATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream3sATI(int stream, short x, short y, short z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3svATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glVertexStream3svATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3svATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream3svATI(int stream, ref short coords)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3svATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream3svATI(int stream, short[] coords)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3iATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glVertexStream3iATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3iATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream3iATI(int stream, int x, int y, int z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3ivATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glVertexStream3ivATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3ivATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream3ivATI(int stream, ref int coords)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3ivATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream3ivATI(int stream, int[] coords)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3fATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glVertexStream3fATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3fATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream3fATI(int stream, float x, float y, float z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3fvATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glVertexStream3fvATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3fvATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream3fvATI(int stream, ref float coords)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3fvATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream3fvATI(int stream, float[] coords)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3dATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glVertexStream3dATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3dATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream3dATI(int stream, double x, double y, double z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3dvATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glVertexStream3dvATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3dvATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream3dvATI(int stream, ref double coords)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3dvATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream3dvATI(int stream, double[] coords)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4sATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glVertexStream4sATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4sATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream4sATI(int stream, short x, short y, short z, short w)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4svATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glVertexStream4svATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4svATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream4svATI(int stream, ref short coords)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4svATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream4svATI(int stream, short[] coords)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4iATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glVertexStream4iATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4iATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream4iATI(int stream, int x, int y, int z, int w)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4ivATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glVertexStream4ivATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4ivATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream4ivATI(int stream, ref int coords)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4ivATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream4ivATI(int stream, int[] coords)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4fATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glVertexStream4fATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4fATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream4fATI(int stream, float x, float y, float z, float w)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4fvATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glVertexStream4fvATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4fvATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream4fvATI(int stream, ref float coords)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4fvATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream4fvATI(int stream, float[] coords)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4dATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glVertexStream4dATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4dATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream4dATI(int stream, double x, double y, double z, double w)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4dvATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glVertexStream4dvATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4dvATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream4dvATI(int stream, ref double coords)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4dvATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexStream4dvATI(int stream, double[] coords)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3bATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glNormalStream3bATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3bATI"), SuppressUnmanagedCodeSecurity]
        public static void glNormalStream3bATI(int stream, byte nx, byte ny, byte nz)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3bATI"), SuppressUnmanagedCodeSecurity]
        public static void glNormalStream3bATI(int stream, sbyte nx, byte ny, byte nz)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3bATI"), SuppressUnmanagedCodeSecurity]
        public static void glNormalStream3bATI(int stream, byte nx, sbyte ny, byte nz)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3bATI"), SuppressUnmanagedCodeSecurity]
        public static void glNormalStream3bATI(int stream, sbyte nx, sbyte ny, byte nz)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3bATI"), SuppressUnmanagedCodeSecurity]
        public static void glNormalStream3bATI(int stream, byte nx, byte ny, sbyte nz)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3bATI"), SuppressUnmanagedCodeSecurity]
        public static void glNormalStream3bATI(int stream, sbyte nx, byte ny, sbyte nz)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3bATI"), SuppressUnmanagedCodeSecurity]
        public static void glNormalStream3bATI(int stream, byte nx, sbyte ny, sbyte nz)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3bATI"), SuppressUnmanagedCodeSecurity]
        public static void glNormalStream3bATI(int stream, sbyte nx, sbyte ny, sbyte nz)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3bvATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glNormalStream3bvATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3bvATI"), SuppressUnmanagedCodeSecurity]
        public static void glNormalStream3bvATI(int stream, ref byte coords)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3bvATI"), SuppressUnmanagedCodeSecurity]
        public static void glNormalStream3bvATI(int stream, byte[] coords)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3bvATI"), SuppressUnmanagedCodeSecurity]
        public static void glNormalStream3bvATI(int stream, ref sbyte coords)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3bvATI"), SuppressUnmanagedCodeSecurity]
        public static void glNormalStream3bvATI(int stream, sbyte[] coords)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3sATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glNormalStream3sATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3sATI"), SuppressUnmanagedCodeSecurity]
        public static void glNormalStream3sATI(int stream, short nx, short ny, short nz)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3svATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glNormalStream3svATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3svATI"), SuppressUnmanagedCodeSecurity]
        public static void glNormalStream3svATI(int stream, ref short coords)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3svATI"), SuppressUnmanagedCodeSecurity]
        public static void glNormalStream3svATI(int stream, short[] coords)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3iATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glNormalStream3iATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3iATI"), SuppressUnmanagedCodeSecurity]
        public static void glNormalStream3iATI(int stream, int nx, int ny, int nz)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3ivATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glNormalStream3ivATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3ivATI"), SuppressUnmanagedCodeSecurity]
        public static void glNormalStream3ivATI(int stream, ref int coords)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3ivATI"), SuppressUnmanagedCodeSecurity]
        public static void glNormalStream3ivATI(int stream, int[] coords)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3fATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glNormalStream3fATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3fATI"), SuppressUnmanagedCodeSecurity]
        public static void glNormalStream3fATI(int stream, float nx, float ny, float nz)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3fvATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glNormalStream3fvATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3fvATI"), SuppressUnmanagedCodeSecurity]
        public static void glNormalStream3fvATI(int stream, ref float coords)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3fvATI"), SuppressUnmanagedCodeSecurity]
        public static void glNormalStream3fvATI(int stream, float[] coords)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3dATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glNormalStream3dATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3dATI"), SuppressUnmanagedCodeSecurity]
        public static void glNormalStream3dATI(int stream, double nx, double ny, double nz)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3dvATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glNormalStream3dvATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3dvATI"), SuppressUnmanagedCodeSecurity]
        public static void glNormalStream3dvATI(int stream, ref double coords)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3dvATI"), SuppressUnmanagedCodeSecurity]
        public static void glNormalStream3dvATI(int stream, double[] coords)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glClientActiveVertexStreamATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glClientActiveVertexStreamATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glClientActiveVertexStreamATI"), SuppressUnmanagedCodeSecurity]
        public static void glClientActiveVertexStreamATI(int stream)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexBlendEnviATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glVertexBlendEnviATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexBlendEnviATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexBlendEnviATI(int pname, int param)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexBlendEnvfATI")]
        public static IntPtr ext__GL_ATI_vertex_streams__glVertexBlendEnvfATI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexBlendEnvfATI"), SuppressUnmanagedCodeSecurity]
        public static void glVertexBlendEnvfATI(int pname, float param)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_blend_color", "glBlendColorEXT")]
        public static IntPtr ext__GL_EXT_blend_color__glBlendColorEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_blend_color", "glBlendColorEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBlendColorEXT(float red, float green, float blue, float alpha)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_blend_equation_separate", "glBlendEquationSeparateEXT")]
        public static IntPtr ext__GL_EXT_blend_equation_separate__glBlendEquationSeparateEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_blend_equation_separate", "glBlendEquationSeparateEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBlendEquationSeparateEXT(int modeRGB, int modeAlpha)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_blend_func_separate", "glBlendFuncSeparateEXT")]
        public static IntPtr ext__GL_EXT_blend_func_separate__glBlendFuncSeparateEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_blend_func_separate", "glBlendFuncSeparateEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBlendFuncSeparateEXT(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_blend_minmax", "glBlendEquationEXT")]
        public static IntPtr ext__GL_EXT_blend_minmax__glBlendEquationEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_blend_minmax", "glBlendEquationEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBlendEquationEXT(int mode)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT")]
        public static IntPtr ext__GL_EXT_color_subtable__glColorSubTableEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, bool[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, byte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, short[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, int[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, float[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, double[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, string data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, IntPtr data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, ref sbyte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, sbyte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, sbyte[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, sbyte[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, ref ushort data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, ushort[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, ushort[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, ushort[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, ref uint data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, uint[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, uint[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, uint[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, ref bool data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, bool[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, bool[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, ref byte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, byte[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, byte[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, ref short data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, short[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, short[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, ref int data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, int[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, int[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, ref float data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, float[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, float[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, ref double data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, double[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTableEXT(int target, int start, int count, int format, int type, double[, ,] data)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_color_subtable", "glCopyColorSubTableEXT")]
        public static IntPtr ext__GL_EXT_color_subtable__glCopyColorSubTableEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_color_subtable", "glCopyColorSubTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glCopyColorSubTableEXT(int target, int start, int x, int y, int width)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_compiled_vertex_array", "glLockArraysEXT")]
        public static IntPtr ext__GL_EXT_compiled_vertex_array__glLockArraysEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_compiled_vertex_array", "glLockArraysEXT"), SuppressUnmanagedCodeSecurity]
        public static void glLockArraysEXT(int first, int count)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_compiled_vertex_array", "glUnlockArraysEXT")]
        public static IntPtr ext__GL_EXT_compiled_vertex_array__glUnlockArraysEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_compiled_vertex_array", "glUnlockArraysEXT"), SuppressUnmanagedCodeSecurity]
        public static void glUnlockArraysEXT()
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT")]
        public static IntPtr ext__GL_EXT_convolution__glConvolutionFilter1DEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, bool[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, byte[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, short[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, int[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, float[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, double[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, string image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, IntPtr image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, ref sbyte image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, sbyte[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, sbyte[,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, sbyte[, ,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, ref ushort image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, ushort[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, ushort[,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, ushort[, ,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, ref uint image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, uint[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, uint[,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, uint[, ,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, ref bool image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, bool[,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, bool[, ,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, ref byte image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, byte[,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, byte[, ,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, ref short image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, short[,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, short[, ,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, ref int image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, int[,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, int[, ,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, ref float image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, float[,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, float[, ,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, ref double image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, double[,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, double[, ,] image)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT")]
        public static IntPtr ext__GL_EXT_convolution__glConvolutionFilter2DEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, bool[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, byte[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, short[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, int[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, float[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, double[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, string image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, IntPtr image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, ref sbyte image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, sbyte[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, sbyte[,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, sbyte[, ,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, ref ushort image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, ushort[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, ushort[,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, ushort[, ,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, ref uint image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, uint[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, uint[,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, uint[, ,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, ref bool image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, bool[,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, bool[, ,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, ref byte image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, byte[,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, byte[, ,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, ref short image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, short[,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, short[, ,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, ref int image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, int[,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, int[, ,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, ref float image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, float[,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, float[, ,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, ref double image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, double[,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, double[, ,] image)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionParameterfEXT")]
        public static IntPtr ext__GL_EXT_convolution__glConvolutionParameterfEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionParameterfEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionParameterfEXT(int target, int pname, float arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionParameterfvEXT")]
        public static IntPtr ext__GL_EXT_convolution__glConvolutionParameterfvEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionParameterfvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionParameterfvEXT(int target, int pname, ref float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionParameterfvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionParameterfvEXT(int target, int pname, float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionParameteriEXT")]
        public static IntPtr ext__GL_EXT_convolution__glConvolutionParameteriEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionParameteriEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionParameteriEXT(int target, int pname, int arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionParameterivEXT")]
        public static IntPtr ext__GL_EXT_convolution__glConvolutionParameterivEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionParameterivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionParameterivEXT(int target, int pname, ref int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionParameterivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionParameterivEXT(int target, int pname, int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_convolution", "glCopyConvolutionFilter1DEXT")]
        public static IntPtr ext__GL_EXT_convolution__glCopyConvolutionFilter1DEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_convolution", "glCopyConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glCopyConvolutionFilter1DEXT(int target, int internalformat, int x, int y, int width)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_convolution", "glCopyConvolutionFilter2DEXT")]
        public static IntPtr ext__GL_EXT_convolution__glCopyConvolutionFilter2DEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_convolution", "glCopyConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glCopyConvolutionFilter2DEXT(int target, int internalformat, int x, int y, int width, int height)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT")]
        public static IntPtr ext__GL_EXT_convolution__glGetConvolutionFilterEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilterEXT(int target, int format, int type, [Out] bool[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilterEXT(int target, int format, int type, [Out] byte[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilterEXT(int target, int format, int type, [Out] short[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilterEXT(int target, int format, int type, [Out] int[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilterEXT(int target, int format, int type, [Out] float[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilterEXT(int target, int format, int type, [Out] double[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilterEXT(int target, int format, int type, IntPtr image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilterEXT(int target, int format, int type, out bool image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilterEXT(int target, int format, int type, out byte image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilterEXT(int target, int format, int type, out short image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilterEXT(int target, int format, int type, out int image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilterEXT(int target, int format, int type, out float image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilterEXT(int target, int format, int type, out double image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilterEXT(int target, int format, int type, out sbyte image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilterEXT(int target, int format, int type, [Out] sbyte[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilterEXT(int target, int format, int type, out ushort image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilterEXT(int target, int format, int type, [Out] ushort[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilterEXT(int target, int format, int type, out uint image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilterEXT(int target, int format, int type, [Out] uint[] image)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionParameterfvEXT")]
        public static IntPtr ext__GL_EXT_convolution__glGetConvolutionParameterfvEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionParameterfvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionParameterfvEXT(int target, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionParameterfvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionParameterfvEXT(int target, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionParameterivEXT")]
        public static IntPtr ext__GL_EXT_convolution__glGetConvolutionParameterivEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionParameterivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionParameterivEXT(int target, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionParameterivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionParameterivEXT(int target, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3bEXT")]
        public static IntPtr ext__GL_EXT_coordinate_frame__glTangent3bEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3bEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangent3bEXT(byte tx, byte ty, byte tz)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3bEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangent3bEXT(sbyte tx, byte ty, byte tz)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3bEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangent3bEXT(byte tx, sbyte ty, byte tz)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3bEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangent3bEXT(sbyte tx, sbyte ty, byte tz)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3bEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangent3bEXT(byte tx, byte ty, sbyte tz)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3bEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangent3bEXT(sbyte tx, byte ty, sbyte tz)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3bEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangent3bEXT(byte tx, sbyte ty, sbyte tz)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3bEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangent3bEXT(sbyte tx, sbyte ty, sbyte tz)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3bvEXT")]
        public static IntPtr ext__GL_EXT_coordinate_frame__glTangent3bvEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3bvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangent3bvEXT(ref byte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3bvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangent3bvEXT(byte[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3bvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangent3bvEXT(ref sbyte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3bvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangent3bvEXT(sbyte[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3dEXT")]
        public static IntPtr ext__GL_EXT_coordinate_frame__glTangent3dEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3dEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangent3dEXT(double tx, double ty, double tz)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3dvEXT")]
        public static IntPtr ext__GL_EXT_coordinate_frame__glTangent3dvEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3dvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangent3dvEXT(ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3dvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangent3dvEXT(double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3fEXT")]
        public static IntPtr ext__GL_EXT_coordinate_frame__glTangent3fEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3fEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangent3fEXT(float tx, float ty, float tz)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3fvEXT")]
        public static IntPtr ext__GL_EXT_coordinate_frame__glTangent3fvEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3fvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangent3fvEXT(ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3fvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangent3fvEXT(float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3iEXT")]
        public static IntPtr ext__GL_EXT_coordinate_frame__glTangent3iEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3iEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangent3iEXT(int tx, int ty, int tz)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3ivEXT")]
        public static IntPtr ext__GL_EXT_coordinate_frame__glTangent3ivEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3ivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangent3ivEXT(ref int v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3ivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangent3ivEXT(int[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3sEXT")]
        public static IntPtr ext__GL_EXT_coordinate_frame__glTangent3sEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3sEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangent3sEXT(short tx, short ty, short tz)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3svEXT")]
        public static IntPtr ext__GL_EXT_coordinate_frame__glTangent3svEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3svEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangent3svEXT(ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3svEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangent3svEXT(short[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3bEXT")]
        public static IntPtr ext__GL_EXT_coordinate_frame__glBinormal3bEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3bEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormal3bEXT(byte bx, byte by, byte bz)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3bEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormal3bEXT(sbyte bx, byte by, byte bz)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3bEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormal3bEXT(byte bx, sbyte by, byte bz)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3bEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormal3bEXT(sbyte bx, sbyte by, byte bz)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3bEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormal3bEXT(byte bx, byte by, sbyte bz)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3bEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormal3bEXT(sbyte bx, byte by, sbyte bz)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3bEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormal3bEXT(byte bx, sbyte by, sbyte bz)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3bEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormal3bEXT(sbyte bx, sbyte by, sbyte bz)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3bvEXT")]
        public static IntPtr ext__GL_EXT_coordinate_frame__glBinormal3bvEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3bvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormal3bvEXT(ref byte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3bvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormal3bvEXT(byte[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3bvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormal3bvEXT(ref sbyte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3bvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormal3bvEXT(sbyte[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3dEXT")]
        public static IntPtr ext__GL_EXT_coordinate_frame__glBinormal3dEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3dEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormal3dEXT(double bx, double by, double bz)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3dvEXT")]
        public static IntPtr ext__GL_EXT_coordinate_frame__glBinormal3dvEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3dvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormal3dvEXT(ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3dvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormal3dvEXT(double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3fEXT")]
        public static IntPtr ext__GL_EXT_coordinate_frame__glBinormal3fEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3fEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormal3fEXT(float bx, float by, float bz)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3fvEXT")]
        public static IntPtr ext__GL_EXT_coordinate_frame__glBinormal3fvEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3fvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormal3fvEXT(ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3fvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormal3fvEXT(float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3iEXT")]
        public static IntPtr ext__GL_EXT_coordinate_frame__glBinormal3iEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3iEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormal3iEXT(int bx, int by, int bz)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3ivEXT")]
        public static IntPtr ext__GL_EXT_coordinate_frame__glBinormal3ivEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3ivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormal3ivEXT(ref int v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3ivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormal3ivEXT(int[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3sEXT")]
        public static IntPtr ext__GL_EXT_coordinate_frame__glBinormal3sEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3sEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormal3sEXT(short bx, short by, short bz)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3svEXT")]
        public static IntPtr ext__GL_EXT_coordinate_frame__glBinormal3svEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3svEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormal3svEXT(ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3svEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormal3svEXT(short[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT")]
        public static IntPtr ext__GL_EXT_coordinate_frame__glTangentPointerEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, string pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, ref sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, sbyte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, sbyte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, ref ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, ushort[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, ushort[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, ref uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, uint[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, uint[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, uint[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, ref bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, bool[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, bool[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, ref byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, byte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, byte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, ref short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, short[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, short[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, ref int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, int[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, int[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, ref float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, float[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, float[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, ref double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, double[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTangentPointerEXT(int type, int stride, double[, ,] pointer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT")]
        public static IntPtr ext__GL_EXT_coordinate_frame__glBinormalPointerEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, string pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, ref sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, sbyte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, sbyte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, ref ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, ushort[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, ushort[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, ref uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, uint[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, uint[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, uint[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, ref bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, bool[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, bool[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, ref byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, byte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, byte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, ref short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, short[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, short[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, ref int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, int[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, int[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, ref float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, float[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, float[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, ref double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, double[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBinormalPointerEXT(int type, int stride, double[, ,] pointer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_copy_texture", "glCopyTexImage1DEXT")]
        public static IntPtr ext__GL_EXT_copy_texture__glCopyTexImage1DEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_copy_texture", "glCopyTexImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glCopyTexImage1DEXT(int target, int level, int internalformat, int x, int y, int width, int border)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_copy_texture", "glCopyTexImage2DEXT")]
        public static IntPtr ext__GL_EXT_copy_texture__glCopyTexImage2DEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_copy_texture", "glCopyTexImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glCopyTexImage2DEXT(int target, int level, int internalformat, int x, int y, int width, int height, int border)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_copy_texture", "glCopyTexSubImage1DEXT")]
        public static IntPtr ext__GL_EXT_copy_texture__glCopyTexSubImage1DEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_copy_texture", "glCopyTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glCopyTexSubImage1DEXT(int target, int level, int xoffset, int x, int y, int width)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_copy_texture", "glCopyTexSubImage2DEXT")]
        public static IntPtr ext__GL_EXT_copy_texture__glCopyTexSubImage2DEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_copy_texture", "glCopyTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glCopyTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_copy_texture", "glCopyTexSubImage3DEXT")]
        public static IntPtr ext__GL_EXT_copy_texture__glCopyTexSubImage3DEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_copy_texture", "glCopyTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glCopyTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_cull_vertex", "glCullParameterdvEXT")]
        public static IntPtr ext__GL_EXT_cull_vertex__glCullParameterdvEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_cull_vertex", "glCullParameterdvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glCullParameterdvEXT(int pname, out double arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_cull_vertex", "glCullParameterdvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glCullParameterdvEXT(int pname, [Out] double[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_cull_vertex", "glCullParameterfvEXT")]
        public static IntPtr ext__GL_EXT_cull_vertex__glCullParameterfvEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_cull_vertex", "glCullParameterfvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glCullParameterfvEXT(int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_cull_vertex", "glCullParameterfvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glCullParameterfvEXT(int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_depth_bounds_test", "glDepthBoundsEXT")]
        public static IntPtr ext__GL_EXT_depth_bounds_test__glDepthBoundsEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_depth_bounds_test", "glDepthBoundsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDepthBoundsEXT(double zmin, double zmax)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT")]
        public static IntPtr ext__GL_EXT_draw_range_elements__glDrawRangeElementsEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, bool[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, bool[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, bool[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, bool[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, byte[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, byte[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, byte[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, byte[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, short[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, short[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, short[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, short[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, int[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, int[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, int[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, int[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, float[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, float[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, float[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, float[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, double[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, double[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, double[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, double[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, string indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, string indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, string indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, string indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, IntPtr indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, IntPtr indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, IntPtr indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, IntPtr indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, ref sbyte indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, ref sbyte indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, ref sbyte indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, ref sbyte indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, sbyte[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, sbyte[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, sbyte[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, sbyte[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, sbyte[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, sbyte[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, sbyte[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, sbyte[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, sbyte[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, sbyte[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, sbyte[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, sbyte[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, ref ushort indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, ref ushort indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, ref ushort indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, ref ushort indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, ushort[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, ushort[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, ushort[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, ushort[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, ushort[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, ushort[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, ushort[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, ushort[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, ushort[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, ushort[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, ushort[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, ushort[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, ref uint indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, ref uint indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, ref uint indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, ref uint indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, uint[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, uint[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, uint[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, uint[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, uint[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, uint[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, uint[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, uint[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, uint[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, uint[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, uint[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, uint[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, ref bool indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, ref bool indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, ref bool indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, ref bool indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, bool[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, bool[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, bool[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, bool[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, bool[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, bool[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, bool[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, bool[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, ref byte indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, ref byte indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, ref byte indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, ref byte indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, byte[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, byte[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, byte[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, byte[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, byte[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, byte[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, byte[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, byte[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, ref short indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, ref short indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, ref short indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, ref short indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, short[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, short[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, short[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, short[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, short[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, short[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, short[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, short[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, ref int indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, ref int indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, ref int indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, ref int indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, int[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, int[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, int[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, int[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, int[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, int[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, int[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, int[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, ref float indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, ref float indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, ref float indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, ref float indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, float[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, float[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, float[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, float[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, float[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, float[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, float[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, float[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, ref double indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, ref double indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, ref double indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, ref double indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, double[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, double[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, double[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, double[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, double[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, int end, int count, int type, double[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, int start, uint end, int count, int type, double[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElementsEXT(int mode, uint start, uint end, int count, int type, double[, ,] indices)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordfEXT")]
        public static IntPtr ext__GL_EXT_fog_coord__glFogCoordfEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordfEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordfEXT(float coord)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordfvEXT")]
        public static IntPtr ext__GL_EXT_fog_coord__glFogCoordfvEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordfvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordfvEXT(ref float coord)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordfvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordfvEXT(float[] coord)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoorddEXT")]
        public static IntPtr ext__GL_EXT_fog_coord__glFogCoorddEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoorddEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoorddEXT(double coord)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoorddvEXT")]
        public static IntPtr ext__GL_EXT_fog_coord__glFogCoorddvEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoorddvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoorddvEXT(ref double coord)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoorddvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoorddvEXT(double[] coord)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT")]
        public static IntPtr ext__GL_EXT_fog_coord__glFogCoordPointerEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, string pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, ref sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, sbyte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, sbyte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, ref ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, ushort[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, ushort[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, ref uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, uint[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, uint[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, uint[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, ref bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, bool[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, bool[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, ref byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, byte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, byte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, ref short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, short[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, short[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, ref int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, int[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, int[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, ref float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, float[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, float[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, ref double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, double[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerEXT(int type, int stride, double[, ,] pointer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glIsRenderbufferEXT")]
        public static IntPtr ext__GL_EXT_framebuffer_object__glIsRenderbufferEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glIsRenderbufferEXT"), SuppressUnmanagedCodeSecurity]
        public static int glIsRenderbufferEXT(int renderbuffer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glIsRenderbufferEXT"), SuppressUnmanagedCodeSecurity]
        public static int glIsRenderbufferEXT(uint renderbuffer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glBindRenderbufferEXT")]
        public static IntPtr ext__GL_EXT_framebuffer_object__glBindRenderbufferEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glBindRenderbufferEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBindRenderbufferEXT(int target, int renderbuffer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glBindRenderbufferEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBindRenderbufferEXT(int target, uint renderbuffer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glDeleteRenderbuffersEXT")]
        public static IntPtr ext__GL_EXT_framebuffer_object__glDeleteRenderbuffersEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glDeleteRenderbuffersEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteRenderbuffersEXT(int n, ref int renderbuffers)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glDeleteRenderbuffersEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteRenderbuffersEXT(int n, int[] renderbuffers)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glDeleteRenderbuffersEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteRenderbuffersEXT(int n, ref uint renderbuffers)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glDeleteRenderbuffersEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteRenderbuffersEXT(int n, uint[] renderbuffers)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glGenRenderbuffersEXT")]
        public static IntPtr ext__GL_EXT_framebuffer_object__glGenRenderbuffersEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glGenRenderbuffersEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGenRenderbuffersEXT(int n, out int renderbuffers)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glGenRenderbuffersEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGenRenderbuffersEXT(int n, [Out] int[] renderbuffers)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glGenRenderbuffersEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGenRenderbuffersEXT(int n, out uint renderbuffers)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glGenRenderbuffersEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGenRenderbuffersEXT(int n, [Out] uint[] renderbuffers)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glRenderbufferStorageEXT")]
        public static IntPtr ext__GL_EXT_framebuffer_object__glRenderbufferStorageEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glRenderbufferStorageEXT"), SuppressUnmanagedCodeSecurity]
        public static void glRenderbufferStorageEXT(int target, int internalformat, int width, int height)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glGetRenderbufferParameterivEXT")]
        public static IntPtr ext__GL_EXT_framebuffer_object__glGetRenderbufferParameterivEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glGetRenderbufferParameterivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetRenderbufferParameterivEXT(int target, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glGetRenderbufferParameterivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetRenderbufferParameterivEXT(int target, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glIsFramebufferEXT")]
        public static IntPtr ext__GL_EXT_framebuffer_object__glIsFramebufferEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glIsFramebufferEXT"), SuppressUnmanagedCodeSecurity]
        public static int glIsFramebufferEXT(int framebuffer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glIsFramebufferEXT"), SuppressUnmanagedCodeSecurity]
        public static int glIsFramebufferEXT(uint framebuffer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glBindFramebufferEXT")]
        public static IntPtr ext__GL_EXT_framebuffer_object__glBindFramebufferEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glBindFramebufferEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBindFramebufferEXT(int target, int framebuffer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glBindFramebufferEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBindFramebufferEXT(int target, uint framebuffer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glDeleteFramebuffersEXT")]
        public static IntPtr ext__GL_EXT_framebuffer_object__glDeleteFramebuffersEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glDeleteFramebuffersEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteFramebuffersEXT(int n, ref int framebuffers)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glDeleteFramebuffersEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteFramebuffersEXT(int n, int[] framebuffers)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glDeleteFramebuffersEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteFramebuffersEXT(int n, ref uint framebuffers)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glDeleteFramebuffersEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteFramebuffersEXT(int n, uint[] framebuffers)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glGenFramebuffersEXT")]
        public static IntPtr ext__GL_EXT_framebuffer_object__glGenFramebuffersEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glGenFramebuffersEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGenFramebuffersEXT(int n, out int framebuffers)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glGenFramebuffersEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGenFramebuffersEXT(int n, [Out] int[] framebuffers)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glGenFramebuffersEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGenFramebuffersEXT(int n, out uint framebuffers)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glGenFramebuffersEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGenFramebuffersEXT(int n, [Out] uint[] framebuffers)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glCheckFramebufferStatusEXT")]
        public static IntPtr ext__GL_EXT_framebuffer_object__glCheckFramebufferStatusEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glCheckFramebufferStatusEXT"), SuppressUnmanagedCodeSecurity]
        public static int glCheckFramebufferStatusEXT(int target)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glFramebufferTexture1DEXT")]
        public static IntPtr ext__GL_EXT_framebuffer_object__glFramebufferTexture1DEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glFramebufferTexture1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFramebufferTexture1DEXT(int target, int attachment, int textarget, int texture, int level)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glFramebufferTexture1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFramebufferTexture1DEXT(int target, int attachment, int textarget, uint texture, int level)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glFramebufferTexture2DEXT")]
        public static IntPtr ext__GL_EXT_framebuffer_object__glFramebufferTexture2DEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glFramebufferTexture2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFramebufferTexture2DEXT(int target, int attachment, int textarget, int texture, int level)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glFramebufferTexture2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFramebufferTexture2DEXT(int target, int attachment, int textarget, uint texture, int level)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glFramebufferTexture3DEXT")]
        public static IntPtr ext__GL_EXT_framebuffer_object__glFramebufferTexture3DEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glFramebufferTexture3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFramebufferTexture3DEXT(int target, int attachment, int textarget, int texture, int level, int zoffset)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glFramebufferTexture3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFramebufferTexture3DEXT(int target, int attachment, int textarget, uint texture, int level, int zoffset)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glFramebufferRenderbufferEXT")]
        public static IntPtr ext__GL_EXT_framebuffer_object__glFramebufferRenderbufferEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glFramebufferRenderbufferEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFramebufferRenderbufferEXT(int target, int attachment, int renderbuffertarget, int renderbuffer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glFramebufferRenderbufferEXT"), SuppressUnmanagedCodeSecurity]
        public static void glFramebufferRenderbufferEXT(int target, int attachment, int renderbuffertarget, uint renderbuffer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glGetFramebufferAttachmentParameterivEXT")]
        public static IntPtr ext__GL_EXT_framebuffer_object__glGetFramebufferAttachmentParameterivEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glGetFramebufferAttachmentParameterivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetFramebufferAttachmentParameterivEXT(int target, int attachment, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glGetFramebufferAttachmentParameterivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetFramebufferAttachmentParameterivEXT(int target, int attachment, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glGenerateMipmapEXT")]
        public static IntPtr ext__GL_EXT_framebuffer_object__glGenerateMipmapEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glGenerateMipmapEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGenerateMipmapEXT(int target)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT")]
        public static IntPtr ext__GL_EXT_histogram__glGetHistogramEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, int reset, int format, int type, [Out] bool[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, bool reset, int format, int type, [Out] bool[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, int reset, int format, int type, [Out] byte[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, bool reset, int format, int type, [Out] byte[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, int reset, int format, int type, [Out] short[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, bool reset, int format, int type, [Out] short[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, int reset, int format, int type, [Out] int[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, bool reset, int format, int type, [Out] int[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, int reset, int format, int type, [Out] float[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, bool reset, int format, int type, [Out] float[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, int reset, int format, int type, [Out] double[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, bool reset, int format, int type, [Out] double[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, int reset, int format, int type, IntPtr values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, bool reset, int format, int type, IntPtr values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, int reset, int format, int type, out bool values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, bool reset, int format, int type, out bool values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, int reset, int format, int type, out byte values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, bool reset, int format, int type, out byte values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, int reset, int format, int type, out short values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, bool reset, int format, int type, out short values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, int reset, int format, int type, out int values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, bool reset, int format, int type, out int values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, int reset, int format, int type, out float values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, bool reset, int format, int type, out float values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, int reset, int format, int type, out double values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, bool reset, int format, int type, out double values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, int reset, int format, int type, out sbyte values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, bool reset, int format, int type, out sbyte values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, int reset, int format, int type, [Out] sbyte[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, bool reset, int format, int type, [Out] sbyte[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, int reset, int format, int type, out ushort values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, bool reset, int format, int type, out ushort values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, int reset, int format, int type, [Out] ushort[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, bool reset, int format, int type, [Out] ushort[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, int reset, int format, int type, out uint values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, bool reset, int format, int type, out uint values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, int reset, int format, int type, [Out] uint[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramEXT(int target, bool reset, int format, int type, [Out] uint[] values)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramParameterfvEXT")]
        public static IntPtr ext__GL_EXT_histogram__glGetHistogramParameterfvEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramParameterfvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramParameterfvEXT(int target, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramParameterfvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramParameterfvEXT(int target, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramParameterivEXT")]
        public static IntPtr ext__GL_EXT_histogram__glGetHistogramParameterivEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramParameterivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramParameterivEXT(int target, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramParameterivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramParameterivEXT(int target, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT")]
        public static IntPtr ext__GL_EXT_histogram__glGetMinmaxEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, int reset, int format, int type, [Out] bool[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, bool reset, int format, int type, [Out] bool[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, int reset, int format, int type, [Out] byte[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, bool reset, int format, int type, [Out] byte[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, int reset, int format, int type, [Out] short[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, bool reset, int format, int type, [Out] short[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, int reset, int format, int type, [Out] int[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, bool reset, int format, int type, [Out] int[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, int reset, int format, int type, [Out] float[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, bool reset, int format, int type, [Out] float[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, int reset, int format, int type, [Out] double[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, bool reset, int format, int type, [Out] double[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, int reset, int format, int type, IntPtr values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, bool reset, int format, int type, IntPtr values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, int reset, int format, int type, out bool values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, bool reset, int format, int type, out bool values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, int reset, int format, int type, out byte values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, bool reset, int format, int type, out byte values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, int reset, int format, int type, out short values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, bool reset, int format, int type, out short values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, int reset, int format, int type, out int values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, bool reset, int format, int type, out int values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, int reset, int format, int type, out float values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, bool reset, int format, int type, out float values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, int reset, int format, int type, out double values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, bool reset, int format, int type, out double values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, int reset, int format, int type, out sbyte values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, bool reset, int format, int type, out sbyte values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, int reset, int format, int type, [Out] sbyte[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, bool reset, int format, int type, [Out] sbyte[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, int reset, int format, int type, out ushort values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, bool reset, int format, int type, out ushort values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, int reset, int format, int type, [Out] ushort[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, bool reset, int format, int type, [Out] ushort[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, int reset, int format, int type, out uint values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, bool reset, int format, int type, out uint values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, int reset, int format, int type, [Out] uint[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxEXT(int target, bool reset, int format, int type, [Out] uint[] values)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxParameterfvEXT")]
        public static IntPtr ext__GL_EXT_histogram__glGetMinmaxParameterfvEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxParameterfvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxParameterfvEXT(int target, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxParameterfvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxParameterfvEXT(int target, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxParameterivEXT")]
        public static IntPtr ext__GL_EXT_histogram__glGetMinmaxParameterivEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxParameterivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxParameterivEXT(int target, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxParameterivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxParameterivEXT(int target, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_histogram", "glHistogramEXT")]
        public static IntPtr ext__GL_EXT_histogram__glHistogramEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_histogram", "glHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glHistogramEXT(int target, int width, int internalformat, int sink)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glHistogramEXT(int target, int width, int internalformat, bool sink)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_histogram", "glMinmaxEXT")]
        public static IntPtr ext__GL_EXT_histogram__glMinmaxEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_histogram", "glMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMinmaxEXT(int target, int internalformat, int sink)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_histogram", "glMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMinmaxEXT(int target, int internalformat, bool sink)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_histogram", "glResetHistogramEXT")]
        public static IntPtr ext__GL_EXT_histogram__glResetHistogramEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_histogram", "glResetHistogramEXT"), SuppressUnmanagedCodeSecurity]
        public static void glResetHistogramEXT(int target)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_histogram", "glResetMinmaxEXT")]
        public static IntPtr ext__GL_EXT_histogram__glResetMinmaxEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_histogram", "glResetMinmaxEXT"), SuppressUnmanagedCodeSecurity]
        public static void glResetMinmaxEXT(int target)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_index_func", "glIndexFuncEXT")]
        public static IntPtr ext__GL_EXT_index_func__glIndexFuncEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_index_func", "glIndexFuncEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexFuncEXT(int func, float arg_ref)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_index_material", "glIndexMaterialEXT")]
        public static IntPtr ext__GL_EXT_index_material__glIndexMaterialEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_index_material", "glIndexMaterialEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexMaterialEXT(int face, int mode)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_light_texture", "glApplyTextureEXT")]
        public static IntPtr ext__GL_EXT_light_texture__glApplyTextureEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_light_texture", "glApplyTextureEXT"), SuppressUnmanagedCodeSecurity]
        public static void glApplyTextureEXT(int mode)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_light_texture", "glTextureLightEXT")]
        public static IntPtr ext__GL_EXT_light_texture__glTextureLightEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_light_texture", "glTextureLightEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTextureLightEXT(int pname)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_light_texture", "glTextureMaterialEXT")]
        public static IntPtr ext__GL_EXT_light_texture__glTextureMaterialEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_light_texture", "glTextureMaterialEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTextureMaterialEXT(int face, int mode)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawArraysEXT")]
        public static IntPtr ext__GL_EXT_multi_draw_arrays__glMultiDrawArraysEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawArraysEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawArraysEXT(int mode, out int first, out int count, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawArraysEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawArraysEXT(int mode, [Out] int[] first, out int count, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawArraysEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawArraysEXT(int mode, out int first, [Out] int[] count, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawArraysEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawArraysEXT(int mode, [Out] int[] first, [Out] int[] count, int primcount)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT")]
        public static IntPtr ext__GL_EXT_multi_draw_arrays__glMultiDrawElementsEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, bool[] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, bool[] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, byte[] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, byte[] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, short[] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, short[] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, int[] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, int[] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, float[] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, float[] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, double[] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, double[] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, string indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, string indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, IntPtr indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, IntPtr indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, ref sbyte indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, ref sbyte indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, sbyte[] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, sbyte[] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, sbyte[,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, sbyte[,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, sbyte[, ,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, sbyte[, ,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, ref ushort indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, ref ushort indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, ushort[] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, ushort[] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, ushort[,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, ushort[,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, ushort[, ,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, ushort[, ,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, ref uint indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, ref uint indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, uint[] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, uint[] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, uint[,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, uint[,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, uint[, ,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, uint[, ,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, ref bool indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, ref bool indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, bool[,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, bool[,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, bool[, ,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, bool[, ,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, ref byte indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, ref byte indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, byte[,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, byte[,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, byte[, ,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, byte[, ,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, ref short indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, ref short indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, short[,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, short[,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, short[, ,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, short[, ,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, ref int indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, ref int indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, int[,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, int[,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, int[, ,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, int[, ,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, ref float indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, ref float indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, float[,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, float[,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, float[, ,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, float[, ,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, ref double indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, ref double indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, double[,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, double[,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, ref int count, int type, double[, ,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElementsEXT(int mode, int[] count, int type, double[, ,] indices, int primcount)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_multisample", "glSampleMaskEXT")]
        public static IntPtr ext__GL_EXT_multisample__glSampleMaskEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_multisample", "glSampleMaskEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSampleMaskEXT(float value, int invert)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_multisample", "glSampleMaskEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSampleMaskEXT(float value, bool invert)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_multisample", "glSamplePatternEXT")]
        public static IntPtr ext__GL_EXT_multisample__glSamplePatternEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_multisample", "glSamplePatternEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSamplePatternEXT(int pattern)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT")]
        public static IntPtr ext__GL_EXT_paletted_texture__glColorTableEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, bool[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, byte[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, short[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, int[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, float[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, double[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, string table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, IntPtr table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, ref sbyte table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, sbyte[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, sbyte[,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, sbyte[, ,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, ref ushort table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, ushort[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, ushort[,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, ushort[, ,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, ref uint table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, uint[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, uint[,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, uint[, ,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, ref bool table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, bool[,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, bool[, ,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, ref byte table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, byte[,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, byte[, ,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, ref short table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, short[,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, short[, ,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, ref int table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, int[,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, int[, ,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, ref float table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, float[,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, float[, ,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, ref double table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, double[,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableEXT(int target, int internalFormat, int width, int format, int type, double[, ,] table)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT")]
        public static IntPtr ext__GL_EXT_paletted_texture__glGetColorTableEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableEXT(int target, int format, int type, [Out] bool[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableEXT(int target, int format, int type, [Out] byte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableEXT(int target, int format, int type, [Out] short[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableEXT(int target, int format, int type, [Out] int[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableEXT(int target, int format, int type, [Out] float[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableEXT(int target, int format, int type, [Out] double[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableEXT(int target, int format, int type, IntPtr data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableEXT(int target, int format, int type, out bool data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableEXT(int target, int format, int type, out byte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableEXT(int target, int format, int type, out short data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableEXT(int target, int format, int type, out int data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableEXT(int target, int format, int type, out float data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableEXT(int target, int format, int type, out double data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableEXT(int target, int format, int type, out sbyte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableEXT(int target, int format, int type, [Out] sbyte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableEXT(int target, int format, int type, out ushort data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableEXT(int target, int format, int type, [Out] ushort[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableEXT(int target, int format, int type, out uint data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableEXT(int target, int format, int type, [Out] uint[] data)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableParameterivEXT")]
        public static IntPtr ext__GL_EXT_paletted_texture__glGetColorTableParameterivEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableParameterivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableParameterivEXT(int target, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableParameterivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableParameterivEXT(int target, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableParameterfvEXT")]
        public static IntPtr ext__GL_EXT_paletted_texture__glGetColorTableParameterfvEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableParameterfvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableParameterfvEXT(int target, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableParameterfvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableParameterfvEXT(int target, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_pixel_transform", "glPixelTransformParameteriEXT")]
        public static IntPtr ext__GL_EXT_pixel_transform__glPixelTransformParameteriEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_pixel_transform", "glPixelTransformParameteriEXT"), SuppressUnmanagedCodeSecurity]
        public static void glPixelTransformParameteriEXT(int target, int pname, int param)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_pixel_transform", "glPixelTransformParameterfEXT")]
        public static IntPtr ext__GL_EXT_pixel_transform__glPixelTransformParameterfEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_pixel_transform", "glPixelTransformParameterfEXT"), SuppressUnmanagedCodeSecurity]
        public static void glPixelTransformParameterfEXT(int target, int pname, float param)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_pixel_transform", "glPixelTransformParameterivEXT")]
        public static IntPtr ext__GL_EXT_pixel_transform__glPixelTransformParameterivEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_pixel_transform", "glPixelTransformParameterivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glPixelTransformParameterivEXT(int target, int pname, ref int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_pixel_transform", "glPixelTransformParameterivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glPixelTransformParameterivEXT(int target, int pname, int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_pixel_transform", "glPixelTransformParameterfvEXT")]
        public static IntPtr ext__GL_EXT_pixel_transform__glPixelTransformParameterfvEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_pixel_transform", "glPixelTransformParameterfvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glPixelTransformParameterfvEXT(int target, int pname, ref float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_pixel_transform", "glPixelTransformParameterfvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glPixelTransformParameterfvEXT(int target, int pname, float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_point_parameters", "glPointParameterfEXT")]
        public static IntPtr ext__GL_EXT_point_parameters__glPointParameterfEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_point_parameters", "glPointParameterfEXT"), SuppressUnmanagedCodeSecurity]
        public static void glPointParameterfEXT(int pname, float param)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_point_parameters", "glPointParameterfvEXT")]
        public static IntPtr ext__GL_EXT_point_parameters__glPointParameterfvEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_point_parameters", "glPointParameterfvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glPointParameterfvEXT(int pname, ref float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_point_parameters", "glPointParameterfvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glPointParameterfvEXT(int pname, float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_polygon_offset", "glPolygonOffsetEXT")]
        public static IntPtr ext__GL_EXT_polygon_offset__glPolygonOffsetEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_polygon_offset", "glPolygonOffsetEXT"), SuppressUnmanagedCodeSecurity]
        public static void glPolygonOffsetEXT(float factor, float bias)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3bEXT")]
        public static IntPtr ext__GL_EXT_secondary_color__glSecondaryColor3bEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3bEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3bEXT(byte red, byte green, byte blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3bEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3bEXT(sbyte red, byte green, byte blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3bEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3bEXT(byte red, sbyte green, byte blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3bEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3bEXT(sbyte red, sbyte green, byte blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3bEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3bEXT(byte red, byte green, sbyte blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3bEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3bEXT(sbyte red, byte green, sbyte blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3bEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3bEXT(byte red, sbyte green, sbyte blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3bEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3bEXT(sbyte red, sbyte green, sbyte blue)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3bvEXT")]
        public static IntPtr ext__GL_EXT_secondary_color__glSecondaryColor3bvEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3bvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3bvEXT(ref byte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3bvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3bvEXT(byte[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3bvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3bvEXT(ref sbyte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3bvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3bvEXT(sbyte[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3dEXT")]
        public static IntPtr ext__GL_EXT_secondary_color__glSecondaryColor3dEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3dEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3dEXT(double red, double green, double blue)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3dvEXT")]
        public static IntPtr ext__GL_EXT_secondary_color__glSecondaryColor3dvEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3dvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3dvEXT(ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3dvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3dvEXT(double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3fEXT")]
        public static IntPtr ext__GL_EXT_secondary_color__glSecondaryColor3fEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3fEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3fEXT(float red, float green, float blue)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3fvEXT")]
        public static IntPtr ext__GL_EXT_secondary_color__glSecondaryColor3fvEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3fvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3fvEXT(ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3fvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3fvEXT(float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3iEXT")]
        public static IntPtr ext__GL_EXT_secondary_color__glSecondaryColor3iEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3iEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3iEXT(int red, int green, int blue)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3ivEXT")]
        public static IntPtr ext__GL_EXT_secondary_color__glSecondaryColor3ivEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3ivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3ivEXT(ref int v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3ivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3ivEXT(int[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3sEXT")]
        public static IntPtr ext__GL_EXT_secondary_color__glSecondaryColor3sEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3sEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3sEXT(short red, short green, short blue)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3svEXT")]
        public static IntPtr ext__GL_EXT_secondary_color__glSecondaryColor3svEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3svEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3svEXT(ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3svEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3svEXT(short[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3ubEXT")]
        public static IntPtr ext__GL_EXT_secondary_color__glSecondaryColor3ubEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3ubEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3ubEXT(byte red, byte green, byte blue)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3ubvEXT")]
        public static IntPtr ext__GL_EXT_secondary_color__glSecondaryColor3ubvEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3ubvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3ubvEXT(ref byte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3ubvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3ubvEXT(byte[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3uiEXT")]
        public static IntPtr ext__GL_EXT_secondary_color__glSecondaryColor3uiEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3uiEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3uiEXT(int red, int green, int blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3uiEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3uiEXT(uint red, int green, int blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3uiEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3uiEXT(int red, uint green, int blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3uiEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3uiEXT(uint red, uint green, int blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3uiEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3uiEXT(int red, int green, uint blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3uiEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3uiEXT(uint red, int green, uint blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3uiEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3uiEXT(int red, uint green, uint blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3uiEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3uiEXT(uint red, uint green, uint blue)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3uivEXT")]
        public static IntPtr ext__GL_EXT_secondary_color__glSecondaryColor3uivEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3uivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3uivEXT(ref int v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3uivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3uivEXT(int[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3uivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3uivEXT(ref uint v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3uivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3uivEXT(uint[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3usEXT")]
        public static IntPtr ext__GL_EXT_secondary_color__glSecondaryColor3usEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3usEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3usEXT(short red, short green, short blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3usEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3usEXT(ushort red, short green, short blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3usEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3usEXT(short red, ushort green, short blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3usEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3usEXT(ushort red, ushort green, short blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3usEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3usEXT(short red, short green, ushort blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3usEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3usEXT(ushort red, short green, ushort blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3usEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3usEXT(short red, ushort green, ushort blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3usEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3usEXT(ushort red, ushort green, ushort blue)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3usvEXT")]
        public static IntPtr ext__GL_EXT_secondary_color__glSecondaryColor3usvEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3usvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3usvEXT(ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3usvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3usvEXT(short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3usvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3usvEXT(ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3usvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3usvEXT(ushort[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT")]
        public static IntPtr ext__GL_EXT_secondary_color__glSecondaryColorPointerEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, string pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, ref sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, sbyte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, sbyte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, ref ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, ushort[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, ushort[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, ref uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, uint[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, uint[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, uint[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, ref bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, bool[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, bool[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, ref byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, byte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, byte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, ref short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, short[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, short[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, ref int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, int[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, int[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, ref float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, float[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, float[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, ref double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, double[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerEXT(int size, int type, int stride, double[, ,] pointer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_stencil_two_side", "glActiveStencilFaceEXT")]
        public static IntPtr ext__GL_EXT_stencil_two_side__glActiveStencilFaceEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_stencil_two_side", "glActiveStencilFaceEXT"), SuppressUnmanagedCodeSecurity]
        public static void glActiveStencilFaceEXT(int face)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT")]
        public static IntPtr ext__GL_EXT_subtexture__glTexSubImage1DEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, bool[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, byte[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, short[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, int[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, float[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, double[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, string pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, IntPtr pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, ref sbyte pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, sbyte[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, sbyte[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, sbyte[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, ref ushort pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, ushort[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, ushort[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, ushort[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, ref uint pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, uint[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, uint[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, uint[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, ref bool pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, bool[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, bool[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, ref byte pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, byte[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, byte[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, ref short pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, short[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, short[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, ref int pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, int[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, int[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, ref float pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, float[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, float[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, ref double pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, double[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, double[, ,] pixels)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT")]
        public static IntPtr ext__GL_EXT_subtexture__glTexSubImage2DEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, bool[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, byte[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, short[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, int[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, float[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, double[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, string pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, IntPtr pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ref sbyte pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, sbyte[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, sbyte[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, sbyte[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ref ushort pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ushort[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ushort[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ushort[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ref uint pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, uint[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, uint[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, uint[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ref bool pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, bool[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, bool[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ref byte pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, byte[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, byte[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ref short pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, short[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, short[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ref int pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, int[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, int[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ref float pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, float[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, float[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ref double pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, double[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, double[, ,] pixels)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT")]
        public static IntPtr ext__GL_EXT_texture3D__glTexImage3DEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, bool[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, byte[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, short[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, int[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, float[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, double[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, string pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, IntPtr pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ref sbyte pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, sbyte[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, sbyte[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, sbyte[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ref ushort pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ushort[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ushort[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ushort[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ref uint pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, uint[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, uint[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, uint[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ref bool pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, bool[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, bool[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ref byte pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, byte[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, byte[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ref short pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, short[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, short[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ref int pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, int[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, int[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ref float pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, float[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, float[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ref double pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, double[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, double[, ,] pixels)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT")]
        public static IntPtr ext__GL_EXT_texture3D__glTexSubImage3DEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, bool[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, byte[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, short[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, int[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, float[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, double[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, string pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, IntPtr pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ref sbyte pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, sbyte[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, sbyte[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, sbyte[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ref ushort pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ushort[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ushort[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ushort[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ref uint pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, uint[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, uint[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, uint[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ref bool pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, bool[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, bool[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ref byte pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, byte[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, byte[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ref short pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, short[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, short[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ref int pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, int[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, int[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ref float pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, float[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, float[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ref double pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, double[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, double[, ,] pixels)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_texture_object", "glAreTexturesResidentEXT")]
        public static IntPtr ext__GL_EXT_texture_object__glAreTexturesResidentEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_texture_object", "glAreTexturesResidentEXT"), SuppressUnmanagedCodeSecurity]
        public static int glAreTexturesResidentEXT(int n, ref int textures, out int residences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture_object", "glAreTexturesResidentEXT"), SuppressUnmanagedCodeSecurity]
        public static int glAreTexturesResidentEXT(int n, int[] textures, out int residences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture_object", "glAreTexturesResidentEXT"), SuppressUnmanagedCodeSecurity]
        public static int glAreTexturesResidentEXT(int n, ref uint textures, out int residences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture_object", "glAreTexturesResidentEXT"), SuppressUnmanagedCodeSecurity]
        public static int glAreTexturesResidentEXT(int n, uint[] textures, out int residences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture_object", "glAreTexturesResidentEXT"), SuppressUnmanagedCodeSecurity]
        public static int glAreTexturesResidentEXT(int n, ref int textures, [Out] int[] residences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture_object", "glAreTexturesResidentEXT"), SuppressUnmanagedCodeSecurity]
        public static int glAreTexturesResidentEXT(int n, int[] textures, [Out] int[] residences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture_object", "glAreTexturesResidentEXT"), SuppressUnmanagedCodeSecurity]
        public static int glAreTexturesResidentEXT(int n, ref uint textures, [Out] int[] residences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture_object", "glAreTexturesResidentEXT"), SuppressUnmanagedCodeSecurity]
        public static int glAreTexturesResidentEXT(int n, uint[] textures, [Out] int[] residences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture_object", "glAreTexturesResidentEXT"), SuppressUnmanagedCodeSecurity]
        public static int glAreTexturesResidentEXT(int n, ref int textures, out bool residences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture_object", "glAreTexturesResidentEXT"), SuppressUnmanagedCodeSecurity]
        public static int glAreTexturesResidentEXT(int n, int[] textures, out bool residences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture_object", "glAreTexturesResidentEXT"), SuppressUnmanagedCodeSecurity]
        public static int glAreTexturesResidentEXT(int n, ref uint textures, out bool residences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture_object", "glAreTexturesResidentEXT"), SuppressUnmanagedCodeSecurity]
        public static int glAreTexturesResidentEXT(int n, uint[] textures, out bool residences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture_object", "glAreTexturesResidentEXT"), SuppressUnmanagedCodeSecurity]
        public static int glAreTexturesResidentEXT(int n, ref int textures, [Out] bool[] residences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture_object", "glAreTexturesResidentEXT"), SuppressUnmanagedCodeSecurity]
        public static int glAreTexturesResidentEXT(int n, int[] textures, [Out] bool[] residences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture_object", "glAreTexturesResidentEXT"), SuppressUnmanagedCodeSecurity]
        public static int glAreTexturesResidentEXT(int n, ref uint textures, [Out] bool[] residences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture_object", "glAreTexturesResidentEXT"), SuppressUnmanagedCodeSecurity]
        public static int glAreTexturesResidentEXT(int n, uint[] textures, [Out] bool[] residences)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_texture_object", "glBindTextureEXT")]
        public static IntPtr ext__GL_EXT_texture_object__glBindTextureEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_texture_object", "glBindTextureEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBindTextureEXT(int target, int texture)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture_object", "glBindTextureEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBindTextureEXT(int target, uint texture)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_texture_object", "glDeleteTexturesEXT")]
        public static IntPtr ext__GL_EXT_texture_object__glDeleteTexturesEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_texture_object", "glDeleteTexturesEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteTexturesEXT(int n, ref int textures)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture_object", "glDeleteTexturesEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteTexturesEXT(int n, int[] textures)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture_object", "glDeleteTexturesEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteTexturesEXT(int n, ref uint textures)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture_object", "glDeleteTexturesEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteTexturesEXT(int n, uint[] textures)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_texture_object", "glGenTexturesEXT")]
        public static IntPtr ext__GL_EXT_texture_object__glGenTexturesEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_texture_object", "glGenTexturesEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGenTexturesEXT(int n, out int textures)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture_object", "glGenTexturesEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGenTexturesEXT(int n, [Out] int[] textures)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture_object", "glGenTexturesEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGenTexturesEXT(int n, out uint textures)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture_object", "glGenTexturesEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGenTexturesEXT(int n, [Out] uint[] textures)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_texture_object", "glIsTextureEXT")]
        public static IntPtr ext__GL_EXT_texture_object__glIsTextureEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_texture_object", "glIsTextureEXT"), SuppressUnmanagedCodeSecurity]
        public static int glIsTextureEXT(int texture)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture_object", "glIsTextureEXT"), SuppressUnmanagedCodeSecurity]
        public static int glIsTextureEXT(uint texture)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_texture_object", "glPrioritizeTexturesEXT")]
        public static IntPtr ext__GL_EXT_texture_object__glPrioritizeTexturesEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_texture_object", "glPrioritizeTexturesEXT"), SuppressUnmanagedCodeSecurity]
        public static void glPrioritizeTexturesEXT(int n, ref int textures, ref float priorities)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture_object", "glPrioritizeTexturesEXT"), SuppressUnmanagedCodeSecurity]
        public static void glPrioritizeTexturesEXT(int n, int[] textures, ref float priorities)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture_object", "glPrioritizeTexturesEXT"), SuppressUnmanagedCodeSecurity]
        public static void glPrioritizeTexturesEXT(int n, ref uint textures, ref float priorities)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture_object", "glPrioritizeTexturesEXT"), SuppressUnmanagedCodeSecurity]
        public static void glPrioritizeTexturesEXT(int n, uint[] textures, ref float priorities)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture_object", "glPrioritizeTexturesEXT"), SuppressUnmanagedCodeSecurity]
        public static void glPrioritizeTexturesEXT(int n, ref int textures, float[] priorities)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture_object", "glPrioritizeTexturesEXT"), SuppressUnmanagedCodeSecurity]
        public static void glPrioritizeTexturesEXT(int n, int[] textures, float[] priorities)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture_object", "glPrioritizeTexturesEXT"), SuppressUnmanagedCodeSecurity]
        public static void glPrioritizeTexturesEXT(int n, ref uint textures, float[] priorities)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_texture_object", "glPrioritizeTexturesEXT"), SuppressUnmanagedCodeSecurity]
        public static void glPrioritizeTexturesEXT(int n, uint[] textures, float[] priorities)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_texture_perturb_normal", "glTextureNormalEXT")]
        public static IntPtr ext__GL_EXT_texture_perturb_normal__glTextureNormalEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_texture_perturb_normal", "glTextureNormalEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTextureNormalEXT(int mode)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_array", "glArrayElementEXT")]
        public static IntPtr ext__GL_EXT_vertex_array__glArrayElementEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_array", "glArrayElementEXT"), SuppressUnmanagedCodeSecurity]
        public static void glArrayElementEXT(int i)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT")]
        public static IntPtr ext__GL_EXT_vertex_array__glColorPointerEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, string pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, ref sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, sbyte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, sbyte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, ref ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, ushort[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, ushort[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, ref uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, uint[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, uint[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, uint[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, ref bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, bool[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, bool[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, ref byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, byte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, byte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, ref short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, short[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, short[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, ref int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, int[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, int[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, ref float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, float[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, float[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, ref double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, double[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerEXT(int size, int type, int stride, int count, double[, ,] pointer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_array", "glDrawArraysEXT")]
        public static IntPtr ext__GL_EXT_vertex_array__glDrawArraysEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_array", "glDrawArraysEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDrawArraysEXT(int mode, int first, int count)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_array", "glEdgeFlagPointerEXT")]
        public static IntPtr ext__GL_EXT_vertex_array__glEdgeFlagPointerEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_array", "glEdgeFlagPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glEdgeFlagPointerEXT(int stride, int count, ref int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glEdgeFlagPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glEdgeFlagPointerEXT(int stride, int count, int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glEdgeFlagPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glEdgeFlagPointerEXT(int stride, int count, ref bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glEdgeFlagPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glEdgeFlagPointerEXT(int stride, int count, bool[] pointer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT")]
        public static IntPtr ext__GL_EXT_vertex_array__glGetPointervEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetPointervEXT(int pname, [Out] bool[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetPointervEXT(int pname, [Out] byte[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetPointervEXT(int pname, [Out] short[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetPointervEXT(int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetPointervEXT(int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetPointervEXT(int pname, [Out] double[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetPointervEXT(int pname, IntPtr arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetPointervEXT(int pname, out bool arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetPointervEXT(int pname, out byte arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetPointervEXT(int pname, out short arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetPointervEXT(int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetPointervEXT(int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetPointervEXT(int pname, out double arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetPointervEXT(int pname, out sbyte arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetPointervEXT(int pname, [Out] sbyte[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetPointervEXT(int pname, out ushort arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetPointervEXT(int pname, [Out] ushort[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetPointervEXT(int pname, out uint arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetPointervEXT(int pname, [Out] uint[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT")]
        public static IntPtr ext__GL_EXT_vertex_array__glIndexPointerEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, string pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, ref sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, sbyte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, sbyte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, ref ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, ushort[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, ushort[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, ref uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, uint[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, uint[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, uint[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, ref bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, bool[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, bool[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, ref byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, byte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, byte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, ref short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, short[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, short[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, ref int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, int[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, int[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, ref float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, float[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, float[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, ref double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, double[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerEXT(int type, int stride, int count, double[, ,] pointer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT")]
        public static IntPtr ext__GL_EXT_vertex_array__glNormalPointerEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, string pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, ref sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, sbyte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, sbyte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, ref ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, ushort[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, ushort[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, ref uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, uint[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, uint[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, uint[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, ref bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, bool[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, bool[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, ref byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, byte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, byte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, ref short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, short[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, short[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, ref int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, int[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, int[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, ref float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, float[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, float[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, ref double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, double[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerEXT(int type, int stride, int count, double[, ,] pointer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT")]
        public static IntPtr ext__GL_EXT_vertex_array__glTexCoordPointerEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, string pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, ref sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, sbyte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, sbyte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, ref ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, ushort[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, ushort[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, ref uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, uint[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, uint[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, uint[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, ref bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, bool[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, bool[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, ref byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, byte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, byte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, ref short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, short[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, short[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, ref int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, int[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, int[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, ref float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, float[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, float[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, ref double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, double[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerEXT(int size, int type, int stride, int count, double[, ,] pointer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT")]
        public static IntPtr ext__GL_EXT_vertex_array__glVertexPointerEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, string pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, ref sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, sbyte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, sbyte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, ref ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, ushort[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, ushort[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, ref uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, uint[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, uint[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, uint[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, ref bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, bool[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, bool[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, ref byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, byte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, byte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, ref short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, short[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, short[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, ref int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, int[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, int[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, ref float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, float[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, float[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, ref double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, double[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerEXT(int size, int type, int stride, int count, double[, ,] pointer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glBeginVertexShaderEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glBeginVertexShaderEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glBeginVertexShaderEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBeginVertexShaderEXT()
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glEndVertexShaderEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glEndVertexShaderEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glEndVertexShaderEXT"), SuppressUnmanagedCodeSecurity]
        public static void glEndVertexShaderEXT()
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glBindVertexShaderEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glBindVertexShaderEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glBindVertexShaderEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBindVertexShaderEXT(int id)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glBindVertexShaderEXT"), SuppressUnmanagedCodeSecurity]
        public static void glBindVertexShaderEXT(uint id)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGenVertexShadersEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glGenVertexShadersEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGenVertexShadersEXT"), SuppressUnmanagedCodeSecurity]
        public static int glGenVertexShadersEXT(int range)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGenVertexShadersEXT"), SuppressUnmanagedCodeSecurity]
        public static int glGenVertexShadersEXT(uint range)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glDeleteVertexShaderEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glDeleteVertexShaderEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glDeleteVertexShaderEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteVertexShaderEXT(int id)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glDeleteVertexShaderEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteVertexShaderEXT(uint id)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp1EXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glShaderOp1EXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp1EXT"), SuppressUnmanagedCodeSecurity]
        public static void glShaderOp1EXT(int op, int res, int arg1)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp1EXT"), SuppressUnmanagedCodeSecurity]
        public static void glShaderOp1EXT(int op, uint res, int arg1)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp1EXT"), SuppressUnmanagedCodeSecurity]
        public static void glShaderOp1EXT(int op, int res, uint arg1)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp1EXT"), SuppressUnmanagedCodeSecurity]
        public static void glShaderOp1EXT(int op, uint res, uint arg1)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp2EXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glShaderOp2EXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp2EXT"), SuppressUnmanagedCodeSecurity]
        public static void glShaderOp2EXT(int op, int res, int arg1, int arg2)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp2EXT"), SuppressUnmanagedCodeSecurity]
        public static void glShaderOp2EXT(int op, uint res, int arg1, int arg2)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp2EXT"), SuppressUnmanagedCodeSecurity]
        public static void glShaderOp2EXT(int op, int res, uint arg1, int arg2)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp2EXT"), SuppressUnmanagedCodeSecurity]
        public static void glShaderOp2EXT(int op, uint res, uint arg1, int arg2)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp2EXT"), SuppressUnmanagedCodeSecurity]
        public static void glShaderOp2EXT(int op, int res, int arg1, uint arg2)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp2EXT"), SuppressUnmanagedCodeSecurity]
        public static void glShaderOp2EXT(int op, uint res, int arg1, uint arg2)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp2EXT"), SuppressUnmanagedCodeSecurity]
        public static void glShaderOp2EXT(int op, int res, uint arg1, uint arg2)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp2EXT"), SuppressUnmanagedCodeSecurity]
        public static void glShaderOp2EXT(int op, uint res, uint arg1, uint arg2)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp3EXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glShaderOp3EXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp3EXT"), SuppressUnmanagedCodeSecurity]
        public static void glShaderOp3EXT(int op, int res, int arg1, int arg2, int arg3)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp3EXT"), SuppressUnmanagedCodeSecurity]
        public static void glShaderOp3EXT(int op, uint res, int arg1, int arg2, int arg3)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp3EXT"), SuppressUnmanagedCodeSecurity]
        public static void glShaderOp3EXT(int op, int res, uint arg1, int arg2, int arg3)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp3EXT"), SuppressUnmanagedCodeSecurity]
        public static void glShaderOp3EXT(int op, uint res, uint arg1, int arg2, int arg3)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp3EXT"), SuppressUnmanagedCodeSecurity]
        public static void glShaderOp3EXT(int op, int res, int arg1, uint arg2, int arg3)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp3EXT"), SuppressUnmanagedCodeSecurity]
        public static void glShaderOp3EXT(int op, uint res, int arg1, uint arg2, int arg3)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp3EXT"), SuppressUnmanagedCodeSecurity]
        public static void glShaderOp3EXT(int op, int res, uint arg1, uint arg2, int arg3)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp3EXT"), SuppressUnmanagedCodeSecurity]
        public static void glShaderOp3EXT(int op, uint res, uint arg1, uint arg2, int arg3)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp3EXT"), SuppressUnmanagedCodeSecurity]
        public static void glShaderOp3EXT(int op, int res, int arg1, int arg2, uint arg3)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp3EXT"), SuppressUnmanagedCodeSecurity]
        public static void glShaderOp3EXT(int op, uint res, int arg1, int arg2, uint arg3)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp3EXT"), SuppressUnmanagedCodeSecurity]
        public static void glShaderOp3EXT(int op, int res, uint arg1, int arg2, uint arg3)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp3EXT"), SuppressUnmanagedCodeSecurity]
        public static void glShaderOp3EXT(int op, uint res, uint arg1, int arg2, uint arg3)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp3EXT"), SuppressUnmanagedCodeSecurity]
        public static void glShaderOp3EXT(int op, int res, int arg1, uint arg2, uint arg3)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp3EXT"), SuppressUnmanagedCodeSecurity]
        public static void glShaderOp3EXT(int op, uint res, int arg1, uint arg2, uint arg3)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp3EXT"), SuppressUnmanagedCodeSecurity]
        public static void glShaderOp3EXT(int op, int res, uint arg1, uint arg2, uint arg3)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp3EXT"), SuppressUnmanagedCodeSecurity]
        public static void glShaderOp3EXT(int op, uint res, uint arg1, uint arg2, uint arg3)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSwizzleEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glSwizzleEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSwizzleEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSwizzleEXT(int res, int arg_in, int outX, int outY, int outZ, int outW)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSwizzleEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSwizzleEXT(uint res, int arg_in, int outX, int outY, int outZ, int outW)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSwizzleEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSwizzleEXT(int res, uint arg_in, int outX, int outY, int outZ, int outW)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSwizzleEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSwizzleEXT(uint res, uint arg_in, int outX, int outY, int outZ, int outW)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glWriteMaskEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glWriteMaskEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glWriteMaskEXT"), SuppressUnmanagedCodeSecurity]
        public static void glWriteMaskEXT(int res, int arg_in, int outX, int outY, int outZ, int outW)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glWriteMaskEXT"), SuppressUnmanagedCodeSecurity]
        public static void glWriteMaskEXT(uint res, int arg_in, int outX, int outY, int outZ, int outW)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glWriteMaskEXT"), SuppressUnmanagedCodeSecurity]
        public static void glWriteMaskEXT(int res, uint arg_in, int outX, int outY, int outZ, int outW)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glWriteMaskEXT"), SuppressUnmanagedCodeSecurity]
        public static void glWriteMaskEXT(uint res, uint arg_in, int outX, int outY, int outZ, int outW)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glInsertComponentEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glInsertComponentEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glInsertComponentEXT"), SuppressUnmanagedCodeSecurity]
        public static void glInsertComponentEXT(int res, int src, int num)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glInsertComponentEXT"), SuppressUnmanagedCodeSecurity]
        public static void glInsertComponentEXT(uint res, int src, int num)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glInsertComponentEXT"), SuppressUnmanagedCodeSecurity]
        public static void glInsertComponentEXT(int res, uint src, int num)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glInsertComponentEXT"), SuppressUnmanagedCodeSecurity]
        public static void glInsertComponentEXT(uint res, uint src, int num)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glInsertComponentEXT"), SuppressUnmanagedCodeSecurity]
        public static void glInsertComponentEXT(int res, int src, uint num)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glInsertComponentEXT"), SuppressUnmanagedCodeSecurity]
        public static void glInsertComponentEXT(uint res, int src, uint num)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glInsertComponentEXT"), SuppressUnmanagedCodeSecurity]
        public static void glInsertComponentEXT(int res, uint src, uint num)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glInsertComponentEXT"), SuppressUnmanagedCodeSecurity]
        public static void glInsertComponentEXT(uint res, uint src, uint num)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glExtractComponentEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glExtractComponentEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glExtractComponentEXT"), SuppressUnmanagedCodeSecurity]
        public static void glExtractComponentEXT(int res, int src, int num)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glExtractComponentEXT"), SuppressUnmanagedCodeSecurity]
        public static void glExtractComponentEXT(uint res, int src, int num)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glExtractComponentEXT"), SuppressUnmanagedCodeSecurity]
        public static void glExtractComponentEXT(int res, uint src, int num)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glExtractComponentEXT"), SuppressUnmanagedCodeSecurity]
        public static void glExtractComponentEXT(uint res, uint src, int num)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glExtractComponentEXT"), SuppressUnmanagedCodeSecurity]
        public static void glExtractComponentEXT(int res, int src, uint num)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glExtractComponentEXT"), SuppressUnmanagedCodeSecurity]
        public static void glExtractComponentEXT(uint res, int src, uint num)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glExtractComponentEXT"), SuppressUnmanagedCodeSecurity]
        public static void glExtractComponentEXT(int res, uint src, uint num)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glExtractComponentEXT"), SuppressUnmanagedCodeSecurity]
        public static void glExtractComponentEXT(uint res, uint src, uint num)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGenSymbolsEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glGenSymbolsEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGenSymbolsEXT"), SuppressUnmanagedCodeSecurity]
        public static int glGenSymbolsEXT(int datatype, int storagetype, int range, int components)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGenSymbolsEXT"), SuppressUnmanagedCodeSecurity]
        public static int glGenSymbolsEXT(int datatype, int storagetype, int range, uint components)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glSetInvariantEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, bool[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, bool[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, byte[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, byte[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, short[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, short[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, int[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, int[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, float[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, float[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, double[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, double[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, string addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, string addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, IntPtr addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, IntPtr addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, ref sbyte addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, ref sbyte addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, sbyte[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, sbyte[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, sbyte[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, sbyte[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, sbyte[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, sbyte[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, ref ushort addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, ref ushort addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, ushort[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, ushort[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, ushort[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, ushort[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, ushort[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, ushort[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, ref uint addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, ref uint addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, uint[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, uint[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, uint[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, uint[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, uint[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, uint[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, ref bool addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, ref bool addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, bool[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, bool[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, bool[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, bool[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, ref byte addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, ref byte addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, byte[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, byte[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, byte[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, byte[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, ref short addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, ref short addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, short[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, short[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, short[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, short[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, ref int addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, ref int addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, int[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, int[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, int[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, int[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, ref float addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, ref float addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, float[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, float[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, float[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, float[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, ref double addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, ref double addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, double[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, double[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(int id, int type, double[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetInvariantEXT(uint id, int type, double[, ,] addr)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glSetLocalConstantEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, bool[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, bool[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, byte[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, byte[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, short[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, short[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, int[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, int[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, float[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, float[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, double[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, double[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, string addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, string addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, IntPtr addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, IntPtr addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, ref sbyte addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, ref sbyte addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, sbyte[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, sbyte[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, sbyte[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, sbyte[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, sbyte[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, sbyte[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, ref ushort addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, ref ushort addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, ushort[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, ushort[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, ushort[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, ushort[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, ushort[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, ushort[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, ref uint addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, ref uint addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, uint[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, uint[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, uint[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, uint[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, uint[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, uint[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, ref bool addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, ref bool addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, bool[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, bool[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, bool[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, bool[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, ref byte addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, ref byte addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, byte[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, byte[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, byte[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, byte[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, ref short addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, ref short addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, short[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, short[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, short[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, short[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, ref int addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, ref int addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, int[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, int[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, int[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, int[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, ref float addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, ref float addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, float[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, float[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, float[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, float[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, ref double addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, ref double addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, double[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, double[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(int id, int type, double[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity]
        public static void glSetLocalConstantEXT(uint id, int type, double[, ,] addr)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantbvEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glVariantbvEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantbvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantbvEXT(int id, ref byte addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantbvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantbvEXT(uint id, ref byte addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantbvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantbvEXT(int id, byte[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantbvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantbvEXT(uint id, byte[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantbvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantbvEXT(int id, ref sbyte addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantbvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantbvEXT(uint id, ref sbyte addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantbvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantbvEXT(int id, sbyte[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantbvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantbvEXT(uint id, sbyte[] addr)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantsvEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glVariantsvEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantsvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantsvEXT(int id, ref short addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantsvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantsvEXT(uint id, ref short addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantsvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantsvEXT(int id, short[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantsvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantsvEXT(uint id, short[] addr)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantivEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glVariantivEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantivEXT(int id, ref int addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantivEXT(uint id, ref int addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantivEXT(int id, int[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantivEXT(uint id, int[] addr)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantfvEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glVariantfvEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantfvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantfvEXT(int id, ref float addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantfvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantfvEXT(uint id, ref float addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantfvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantfvEXT(int id, float[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantfvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantfvEXT(uint id, float[] addr)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantdvEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glVariantdvEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantdvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantdvEXT(int id, ref double addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantdvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantdvEXT(uint id, ref double addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantdvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantdvEXT(int id, double[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantdvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantdvEXT(uint id, double[] addr)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantubvEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glVariantubvEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantubvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantubvEXT(int id, ref byte addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantubvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantubvEXT(uint id, ref byte addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantubvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantubvEXT(int id, byte[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantubvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantubvEXT(uint id, byte[] addr)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantusvEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glVariantusvEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantusvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantusvEXT(int id, ref short addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantusvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantusvEXT(uint id, ref short addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantusvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantusvEXT(int id, short[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantusvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantusvEXT(uint id, short[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantusvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantusvEXT(int id, ref ushort addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantusvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantusvEXT(uint id, ref ushort addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantusvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantusvEXT(int id, ushort[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantusvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantusvEXT(uint id, ushort[] addr)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantuivEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glVariantuivEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantuivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantuivEXT(int id, ref int addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantuivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantuivEXT(uint id, ref int addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantuivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantuivEXT(int id, int[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantuivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantuivEXT(uint id, int[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantuivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantuivEXT(int id, ref uint addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantuivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantuivEXT(uint id, ref uint addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantuivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantuivEXT(int id, uint[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantuivEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantuivEXT(uint id, uint[] addr)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glVariantPointerEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, bool[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, bool[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, bool[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, bool[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, byte[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, byte[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, byte[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, byte[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, short[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, short[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, short[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, short[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, int[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, int[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, int[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, int[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, float[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, float[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, float[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, float[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, double[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, double[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, double[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, double[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, string addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, string addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, string addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, string addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, IntPtr addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, IntPtr addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, IntPtr addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, IntPtr addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, ref sbyte addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, ref sbyte addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, ref sbyte addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, ref sbyte addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, sbyte[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, sbyte[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, sbyte[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, sbyte[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, sbyte[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, sbyte[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, sbyte[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, sbyte[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, sbyte[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, sbyte[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, sbyte[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, sbyte[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, ref ushort addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, ref ushort addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, ref ushort addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, ref ushort addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, ushort[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, ushort[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, ushort[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, ushort[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, ushort[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, ushort[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, ushort[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, ushort[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, ushort[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, ushort[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, ushort[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, ushort[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, ref uint addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, ref uint addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, ref uint addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, ref uint addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, uint[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, uint[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, uint[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, uint[] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, uint[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, uint[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, uint[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, uint[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, uint[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, uint[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, uint[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, uint[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, ref bool addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, ref bool addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, ref bool addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, ref bool addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, bool[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, bool[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, bool[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, bool[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, bool[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, bool[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, bool[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, bool[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, ref byte addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, ref byte addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, ref byte addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, ref byte addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, byte[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, byte[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, byte[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, byte[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, byte[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, byte[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, byte[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, byte[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, ref short addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, ref short addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, ref short addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, ref short addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, short[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, short[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, short[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, short[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, short[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, short[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, short[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, short[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, ref int addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, ref int addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, ref int addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, ref int addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, int[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, int[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, int[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, int[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, int[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, int[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, int[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, int[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, ref float addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, ref float addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, ref float addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, ref float addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, float[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, float[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, float[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, float[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, float[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, float[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, float[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, float[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, ref double addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, ref double addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, ref double addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, ref double addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, double[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, double[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, double[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, double[,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, int stride, double[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, int stride, double[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(int id, int type, uint stride, double[, ,] addr)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVariantPointerEXT(uint id, int type, uint stride, double[, ,] addr)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glEnableVariantClientStateEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glEnableVariantClientStateEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glEnableVariantClientStateEXT"), SuppressUnmanagedCodeSecurity]
        public static void glEnableVariantClientStateEXT(int id)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glEnableVariantClientStateEXT"), SuppressUnmanagedCodeSecurity]
        public static void glEnableVariantClientStateEXT(uint id)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glDisableVariantClientStateEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glDisableVariantClientStateEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glDisableVariantClientStateEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDisableVariantClientStateEXT(int id)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glDisableVariantClientStateEXT"), SuppressUnmanagedCodeSecurity]
        public static void glDisableVariantClientStateEXT(uint id)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glBindLightParameterEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glBindLightParameterEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glBindLightParameterEXT"), SuppressUnmanagedCodeSecurity]
        public static int glBindLightParameterEXT(int light, int value)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glBindMaterialParameterEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glBindMaterialParameterEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glBindMaterialParameterEXT"), SuppressUnmanagedCodeSecurity]
        public static int glBindMaterialParameterEXT(int face, int value)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glBindTexGenParameterEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glBindTexGenParameterEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glBindTexGenParameterEXT"), SuppressUnmanagedCodeSecurity]
        public static int glBindTexGenParameterEXT(int unit, int coord, int value)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glBindTextureUnitParameterEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glBindTextureUnitParameterEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glBindTextureUnitParameterEXT"), SuppressUnmanagedCodeSecurity]
        public static int glBindTextureUnitParameterEXT(int unit, int value)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glBindParameterEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glBindParameterEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glBindParameterEXT"), SuppressUnmanagedCodeSecurity]
        public static int glBindParameterEXT(int value)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glIsVariantEnabledEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glIsVariantEnabledEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glIsVariantEnabledEXT"), SuppressUnmanagedCodeSecurity]
        public static int glIsVariantEnabledEXT(int id, int cap)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glIsVariantEnabledEXT"), SuppressUnmanagedCodeSecurity]
        public static int glIsVariantEnabledEXT(uint id, int cap)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantBooleanvEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glGetVariantBooleanvEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantBooleanvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantBooleanvEXT(int id, int value, out int data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantBooleanvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantBooleanvEXT(uint id, int value, out int data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantBooleanvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantBooleanvEXT(int id, int value, [Out] int[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantBooleanvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantBooleanvEXT(uint id, int value, [Out] int[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantBooleanvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantBooleanvEXT(int id, int value, out bool data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantBooleanvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantBooleanvEXT(uint id, int value, out bool data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantBooleanvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantBooleanvEXT(int id, int value, [Out] bool[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantBooleanvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantBooleanvEXT(uint id, int value, [Out] bool[] data)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantIntegervEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glGetVariantIntegervEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantIntegervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantIntegervEXT(int id, int value, out int data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantIntegervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantIntegervEXT(uint id, int value, out int data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantIntegervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantIntegervEXT(int id, int value, [Out] int[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantIntegervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantIntegervEXT(uint id, int value, [Out] int[] data)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantFloatvEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glGetVariantFloatvEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantFloatvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantFloatvEXT(int id, int value, out float data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantFloatvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantFloatvEXT(uint id, int value, out float data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantFloatvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantFloatvEXT(int id, int value, [Out] float[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantFloatvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantFloatvEXT(uint id, int value, [Out] float[] data)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glGetVariantPointervEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(int id, int value, [Out] bool[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(uint id, int value, [Out] bool[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(int id, int value, [Out] byte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(uint id, int value, [Out] byte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(int id, int value, [Out] short[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(uint id, int value, [Out] short[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(int id, int value, [Out] int[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(uint id, int value, [Out] int[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(int id, int value, [Out] float[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(uint id, int value, [Out] float[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(int id, int value, [Out] double[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(uint id, int value, [Out] double[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(int id, int value, IntPtr data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(uint id, int value, IntPtr data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(int id, int value, out bool data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(uint id, int value, out bool data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(int id, int value, out byte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(uint id, int value, out byte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(int id, int value, out short data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(uint id, int value, out short data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(int id, int value, out int data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(uint id, int value, out int data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(int id, int value, out float data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(uint id, int value, out float data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(int id, int value, out double data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(uint id, int value, out double data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(int id, int value, out sbyte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(uint id, int value, out sbyte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(int id, int value, [Out] sbyte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(uint id, int value, [Out] sbyte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(int id, int value, out ushort data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(uint id, int value, out ushort data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(int id, int value, [Out] ushort[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(uint id, int value, [Out] ushort[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(int id, int value, out uint data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(uint id, int value, out uint data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(int id, int value, [Out] uint[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetVariantPointervEXT(uint id, int value, [Out] uint[] data)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantBooleanvEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glGetInvariantBooleanvEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantBooleanvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetInvariantBooleanvEXT(int id, int value, out int data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantBooleanvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetInvariantBooleanvEXT(uint id, int value, out int data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantBooleanvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetInvariantBooleanvEXT(int id, int value, [Out] int[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantBooleanvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetInvariantBooleanvEXT(uint id, int value, [Out] int[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantBooleanvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetInvariantBooleanvEXT(int id, int value, out bool data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantBooleanvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetInvariantBooleanvEXT(uint id, int value, out bool data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantBooleanvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetInvariantBooleanvEXT(int id, int value, [Out] bool[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantBooleanvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetInvariantBooleanvEXT(uint id, int value, [Out] bool[] data)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantIntegervEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glGetInvariantIntegervEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantIntegervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetInvariantIntegervEXT(int id, int value, out int data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantIntegervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetInvariantIntegervEXT(uint id, int value, out int data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantIntegervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetInvariantIntegervEXT(int id, int value, [Out] int[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantIntegervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetInvariantIntegervEXT(uint id, int value, [Out] int[] data)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantFloatvEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glGetInvariantFloatvEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantFloatvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetInvariantFloatvEXT(int id, int value, out float data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantFloatvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetInvariantFloatvEXT(uint id, int value, out float data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantFloatvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetInvariantFloatvEXT(int id, int value, [Out] float[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantFloatvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetInvariantFloatvEXT(uint id, int value, [Out] float[] data)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantBooleanvEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glGetLocalConstantBooleanvEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantBooleanvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetLocalConstantBooleanvEXT(int id, int value, out int data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantBooleanvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetLocalConstantBooleanvEXT(uint id, int value, out int data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantBooleanvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetLocalConstantBooleanvEXT(int id, int value, [Out] int[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantBooleanvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetLocalConstantBooleanvEXT(uint id, int value, [Out] int[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantBooleanvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetLocalConstantBooleanvEXT(int id, int value, out bool data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantBooleanvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetLocalConstantBooleanvEXT(uint id, int value, out bool data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantBooleanvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetLocalConstantBooleanvEXT(int id, int value, [Out] bool[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantBooleanvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetLocalConstantBooleanvEXT(uint id, int value, [Out] bool[] data)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantIntegervEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glGetLocalConstantIntegervEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantIntegervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetLocalConstantIntegervEXT(int id, int value, out int data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantIntegervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetLocalConstantIntegervEXT(uint id, int value, out int data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantIntegervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetLocalConstantIntegervEXT(int id, int value, [Out] int[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantIntegervEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetLocalConstantIntegervEXT(uint id, int value, [Out] int[] data)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantFloatvEXT")]
        public static IntPtr ext__GL_EXT_vertex_shader__glGetLocalConstantFloatvEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantFloatvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetLocalConstantFloatvEXT(int id, int value, out float data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantFloatvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetLocalConstantFloatvEXT(uint id, int value, out float data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantFloatvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetLocalConstantFloatvEXT(int id, int value, [Out] float[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantFloatvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glGetLocalConstantFloatvEXT(uint id, int value, [Out] float[] data)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightfEXT")]
        public static IntPtr ext__GL_EXT_vertex_weighting__glVertexWeightfEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightfEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightfEXT(float weight)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightfvEXT")]
        public static IntPtr ext__GL_EXT_vertex_weighting__glVertexWeightfvEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightfvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightfvEXT(ref float weight)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightfvEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightfvEXT(float[] weight)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT")]
        public static IntPtr ext__GL_EXT_vertex_weighting__glVertexWeightPointerEXT = IntPtr.Zero;

        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, string pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, ref sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, sbyte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, sbyte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, ref ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, ushort[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, ushort[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, ref uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, uint[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, uint[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, uint[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, ref bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, bool[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, bool[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, ref byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, byte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, byte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, ref short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, short[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, short[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, ref int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, int[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, int[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, ref float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, float[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, float[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, ref double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, double[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeightPointerEXT(int size, int type, int stride, double[, ,] pointer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY")]
        public static IntPtr ext__GL_GREMEDY_string_marker__glStringMarkerGREMEDY = IntPtr.Zero;

        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, bool[] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, byte[] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, short[] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, int[] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, float[] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, double[] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, string arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, IntPtr arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, ref sbyte arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, sbyte[] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, sbyte[,] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, sbyte[, ,] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, ref ushort arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, ushort[] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, ushort[,] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, ushort[, ,] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, ref uint arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, uint[] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, uint[,] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, uint[, ,] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, ref bool arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, bool[,] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, bool[, ,] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, ref byte arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, byte[,] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, byte[, ,] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, ref short arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, short[,] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, short[, ,] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, ref int arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, int[,] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, int[, ,] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, ref float arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, float[,] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, float[, ,] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, ref double arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, double[,] arg_string)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity]
        public static void glStringMarkerGREMEDY(int len, double[, ,] arg_string)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_HP_image_transform", "glImageTransformParameteriHP")]
        public static IntPtr ext__GL_HP_image_transform__glImageTransformParameteriHP = IntPtr.Zero;

        [OpenGLExtensionImport("GL_HP_image_transform", "glImageTransformParameteriHP"), SuppressUnmanagedCodeSecurity]
        public static void glImageTransformParameteriHP(int target, int pname, int param)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_HP_image_transform", "glImageTransformParameterfHP")]
        public static IntPtr ext__GL_HP_image_transform__glImageTransformParameterfHP = IntPtr.Zero;

        [OpenGLExtensionImport("GL_HP_image_transform", "glImageTransformParameterfHP"), SuppressUnmanagedCodeSecurity]
        public static void glImageTransformParameterfHP(int target, int pname, float param)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_HP_image_transform", "glImageTransformParameterivHP")]
        public static IntPtr ext__GL_HP_image_transform__glImageTransformParameterivHP = IntPtr.Zero;

        [OpenGLExtensionImport("GL_HP_image_transform", "glImageTransformParameterivHP"), SuppressUnmanagedCodeSecurity]
        public static void glImageTransformParameterivHP(int target, int pname, ref int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_HP_image_transform", "glImageTransformParameterivHP"), SuppressUnmanagedCodeSecurity]
        public static void glImageTransformParameterivHP(int target, int pname, int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_HP_image_transform", "glImageTransformParameterfvHP")]
        public static IntPtr ext__GL_HP_image_transform__glImageTransformParameterfvHP = IntPtr.Zero;

        [OpenGLExtensionImport("GL_HP_image_transform", "glImageTransformParameterfvHP"), SuppressUnmanagedCodeSecurity]
        public static void glImageTransformParameterfvHP(int target, int pname, ref float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_HP_image_transform", "glImageTransformParameterfvHP"), SuppressUnmanagedCodeSecurity]
        public static void glImageTransformParameterfvHP(int target, int pname, float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_HP_image_transform", "glGetImageTransformParameterivHP")]
        public static IntPtr ext__GL_HP_image_transform__glGetImageTransformParameterivHP = IntPtr.Zero;

        [OpenGLExtensionImport("GL_HP_image_transform", "glGetImageTransformParameterivHP"), SuppressUnmanagedCodeSecurity]
        public static void glGetImageTransformParameterivHP(int target, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_HP_image_transform", "glGetImageTransformParameterivHP"), SuppressUnmanagedCodeSecurity]
        public static void glGetImageTransformParameterivHP(int target, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_HP_image_transform", "glGetImageTransformParameterfvHP")]
        public static IntPtr ext__GL_HP_image_transform__glGetImageTransformParameterfvHP = IntPtr.Zero;

        [OpenGLExtensionImport("GL_HP_image_transform", "glGetImageTransformParameterfvHP"), SuppressUnmanagedCodeSecurity]
        public static void glGetImageTransformParameterfvHP(int target, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_HP_image_transform", "glGetImageTransformParameterfvHP"), SuppressUnmanagedCodeSecurity]
        public static void glGetImageTransformParameterfvHP(int target, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawArraysIBM")]
        public static IntPtr ext__GL_IBM_multimode_draw_arrays__glMultiModeDrawArraysIBM = IntPtr.Zero;

        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawArraysIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawArraysIBM(ref int mode, ref int first, ref int count, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawArraysIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawArraysIBM(int[] mode, ref int first, ref int count, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawArraysIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawArraysIBM(ref int mode, int[] first, ref int count, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawArraysIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawArraysIBM(int[] mode, int[] first, ref int count, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawArraysIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawArraysIBM(ref int mode, ref int first, int[] count, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawArraysIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawArraysIBM(int[] mode, ref int first, int[] count, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawArraysIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawArraysIBM(ref int mode, int[] first, int[] count, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawArraysIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawArraysIBM(int[] mode, int[] first, int[] count, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM")]
        public static IntPtr ext__GL_IBM_multimode_draw_arrays__glMultiModeDrawElementsIBM = IntPtr.Zero;

        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, bool[] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, bool[] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, bool[] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, bool[] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, byte[] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, byte[] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, byte[] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, byte[] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, short[] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, short[] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, short[] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, short[] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, int[] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, int[] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, int[] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, int[] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, float[] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, float[] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, float[] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, float[] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, double[] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, double[] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, double[] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, double[] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, string indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, string indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, string indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, string indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, IntPtr indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, IntPtr indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, IntPtr indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, IntPtr indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, ref sbyte indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, ref sbyte indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, ref sbyte indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, ref sbyte indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, sbyte[] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, sbyte[] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, sbyte[] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, sbyte[] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, sbyte[,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, sbyte[,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, sbyte[,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, sbyte[,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, sbyte[, ,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, sbyte[, ,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, sbyte[, ,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, sbyte[, ,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, ref ushort indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, ref ushort indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, ref ushort indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, ref ushort indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, ushort[] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, ushort[] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, ushort[] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, ushort[] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, ushort[,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, ushort[,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, ushort[,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, ushort[,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, ushort[, ,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, ushort[, ,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, ushort[, ,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, ushort[, ,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, ref uint indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, ref uint indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, ref uint indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, ref uint indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, uint[] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, uint[] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, uint[] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, uint[] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, uint[,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, uint[,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, uint[,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, uint[,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, uint[, ,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, uint[, ,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, uint[, ,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, uint[, ,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, ref bool indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, ref bool indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, ref bool indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, ref bool indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, bool[,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, bool[,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, bool[,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, bool[,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, bool[, ,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, bool[, ,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, bool[, ,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, bool[, ,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, ref byte indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, ref byte indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, ref byte indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, ref byte indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, byte[,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, byte[,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, byte[,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, byte[,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, byte[, ,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, byte[, ,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, byte[, ,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, byte[, ,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, ref short indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, ref short indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, ref short indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, ref short indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, short[,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, short[,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, short[,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, short[,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, short[, ,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, short[, ,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, short[, ,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, short[, ,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, ref int indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, ref int indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, ref int indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, ref int indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, int[,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, int[,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, int[,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, int[,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, int[, ,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, int[, ,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, int[, ,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, int[, ,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, ref float indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, ref float indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, ref float indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, ref float indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, float[,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, float[,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, float[,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, float[,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, float[, ,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, float[, ,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, float[, ,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, float[, ,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, ref double indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, ref double indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, ref double indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, ref double indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, double[,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, double[,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, double[,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, double[,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, ref int count, int type, double[, ,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, ref int count, int type, double[, ,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(ref int mode, int[] count, int type, double[, ,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity]
        public static void glMultiModeDrawElementsIBM(int[] mode, int[] count, int type, double[, ,] indices, int primcount, int modestride)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM")]
        public static IntPtr ext__GL_IBM_vertex_array_lists__glColorPointerListIBM = IntPtr.Zero;

        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, bool[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, byte[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, short[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, int[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, float[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, double[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, string pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, IntPtr pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, ref sbyte pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, sbyte[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, sbyte[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, sbyte[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, ref ushort pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, ushort[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, ushort[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, ushort[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, ref uint pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, uint[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, uint[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, uint[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, ref bool pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, bool[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, bool[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, ref byte pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, byte[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, byte[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, ref short pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, short[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, short[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, ref int pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, int[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, int[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, ref float pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, float[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, float[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, ref double pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, double[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointerListIBM(int size, int type, int stride, double[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM")]
        public static IntPtr ext__GL_IBM_vertex_array_lists__glSecondaryColorPointerListIBM = IntPtr.Zero;

        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, bool[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, byte[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, short[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, int[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, float[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, double[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, string pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, IntPtr pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, ref sbyte pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, sbyte[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, sbyte[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, sbyte[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, ref ushort pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, ushort[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, ushort[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, ushort[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, ref uint pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, uint[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, uint[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, uint[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, ref bool pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, bool[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, bool[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, ref byte pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, byte[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, byte[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, ref short pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, short[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, short[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, ref int pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, int[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, int[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, ref float pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, float[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, float[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, ref double pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, double[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointerListIBM(int size, int type, int stride, double[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glEdgeFlagPointerListIBM")]
        public static IntPtr ext__GL_IBM_vertex_array_lists__glEdgeFlagPointerListIBM = IntPtr.Zero;

        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glEdgeFlagPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glEdgeFlagPointerListIBM(int stride, ref bool pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glEdgeFlagPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glEdgeFlagPointerListIBM(int stride, bool[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM")]
        public static IntPtr ext__GL_IBM_vertex_array_lists__glFogCoordPointerListIBM = IntPtr.Zero;

        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, bool[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, byte[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, short[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, int[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, float[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, double[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, string pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, IntPtr pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, ref sbyte pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, sbyte[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, sbyte[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, sbyte[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, ref ushort pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, ushort[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, ushort[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, ushort[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, ref uint pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, uint[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, uint[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, uint[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, ref bool pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, bool[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, bool[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, ref byte pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, byte[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, byte[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, ref short pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, short[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, short[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, ref int pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, int[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, int[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, ref float pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, float[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, float[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, ref double pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, double[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointerListIBM(int type, int stride, double[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM")]
        public static IntPtr ext__GL_IBM_vertex_array_lists__glIndexPointerListIBM = IntPtr.Zero;

        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, bool[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, byte[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, short[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, int[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, float[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, double[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, string pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, IntPtr pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, ref sbyte pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, sbyte[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, sbyte[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, sbyte[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, ref ushort pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, ushort[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, ushort[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, ushort[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, ref uint pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, uint[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, uint[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, uint[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, ref bool pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, bool[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, bool[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, ref byte pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, byte[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, byte[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, ref short pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, short[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, short[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, ref int pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, int[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, int[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, ref float pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, float[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, float[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, ref double pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, double[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glIndexPointerListIBM(int type, int stride, double[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM")]
        public static IntPtr ext__GL_IBM_vertex_array_lists__glNormalPointerListIBM = IntPtr.Zero;

        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, bool[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, byte[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, short[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, int[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, float[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, double[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, string pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, IntPtr pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, ref sbyte pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, sbyte[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, sbyte[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, sbyte[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, ref ushort pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, ushort[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, ushort[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, ushort[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, ref uint pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, uint[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, uint[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, uint[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, ref bool pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, bool[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, bool[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, ref byte pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, byte[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, byte[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, ref short pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, short[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, short[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, ref int pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, int[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, int[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, ref float pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, float[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, float[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, ref double pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, double[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointerListIBM(int type, int stride, double[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM")]
        public static IntPtr ext__GL_IBM_vertex_array_lists__glTexCoordPointerListIBM = IntPtr.Zero;

        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, bool[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, byte[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, short[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, int[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, float[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, double[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, string pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, IntPtr pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, ref sbyte pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, sbyte[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, sbyte[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, sbyte[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, ref ushort pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, ushort[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, ushort[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, ushort[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, ref uint pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, uint[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, uint[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, uint[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, ref bool pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, bool[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, bool[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, ref byte pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, byte[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, byte[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, ref short pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, short[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, short[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, ref int pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, int[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, int[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, ref float pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, float[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, float[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, ref double pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, double[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointerListIBM(int size, int type, int stride, double[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM")]
        public static IntPtr ext__GL_IBM_vertex_array_lists__glVertexPointerListIBM = IntPtr.Zero;

        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, bool[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, byte[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, short[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, int[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, float[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, double[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, string pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, IntPtr pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, ref sbyte pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, sbyte[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, sbyte[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, sbyte[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, ref ushort pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, ushort[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, ushort[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, ushort[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, ref uint pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, uint[] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, uint[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, uint[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, ref bool pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, bool[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, bool[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, ref byte pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, byte[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, byte[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, ref short pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, short[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, short[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, ref int pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, int[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, int[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, ref float pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, float[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, float[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, ref double pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, double[,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointerListIBM(int size, int type, int stride, double[, ,] pointer, int ptrstride)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_INGR_blend_func_separate", "glBlendFuncSeparateINGR")]
        public static IntPtr ext__GL_INGR_blend_func_separate__glBlendFuncSeparateINGR = IntPtr.Zero;

        [OpenGLExtensionImport("GL_INGR_blend_func_separate", "glBlendFuncSeparateINGR"), SuppressUnmanagedCodeSecurity]
        public static void glBlendFuncSeparateINGR(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL")]
        public static IntPtr ext__GL_INTEL_parallel_arrays__glVertexPointervINTEL = IntPtr.Zero;

        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, string pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, ref sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, sbyte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, sbyte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, ref ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, ushort[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, ushort[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, ref uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, uint[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, uint[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, uint[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, ref bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, bool[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, bool[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, ref byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, byte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, byte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, ref short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, short[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, short[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, ref int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, int[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, int[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, ref float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, float[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, float[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, ref double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, double[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glVertexPointervINTEL(int size, int type, double[, ,] pointer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL")]
        public static IntPtr ext__GL_INTEL_parallel_arrays__glNormalPointervINTEL = IntPtr.Zero;

        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, string pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, ref sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, sbyte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, sbyte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, ref ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, ushort[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, ushort[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, ref uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, uint[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, uint[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, uint[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, ref bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, bool[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, bool[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, ref byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, byte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, byte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, ref short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, short[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, short[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, ref int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, int[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, int[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, ref float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, float[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, float[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, ref double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, double[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glNormalPointervINTEL(int type, double[, ,] pointer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL")]
        public static IntPtr ext__GL_INTEL_parallel_arrays__glColorPointervINTEL = IntPtr.Zero;

        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, string pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, ref sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, sbyte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, sbyte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, ref ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, ushort[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, ushort[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, ref uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, uint[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, uint[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, uint[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, ref bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, bool[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, bool[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, ref byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, byte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, byte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, ref short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, short[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, short[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, ref int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, int[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, int[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, ref float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, float[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, float[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, ref double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, double[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glColorPointervINTEL(int size, int type, double[, ,] pointer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL")]
        public static IntPtr ext__GL_INTEL_parallel_arrays__glTexCoordPointervINTEL = IntPtr.Zero;

        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, string pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, ref sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, sbyte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, sbyte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, ref ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, ushort[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, ushort[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, ref uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, uint[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, uint[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, uint[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, ref bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, bool[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, bool[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, ref byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, byte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, byte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, ref short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, short[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, short[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, ref int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, int[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, int[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, ref float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, float[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, float[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, ref double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, double[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoordPointervINTEL(int size, int type, double[, ,] pointer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_MESA_resize_buffers", "glResizeBuffersMESA")]
        public static IntPtr ext__GL_MESA_resize_buffers__glResizeBuffersMESA = IntPtr.Zero;

        [OpenGLExtensionImport("GL_MESA_resize_buffers", "glResizeBuffersMESA"), SuppressUnmanagedCodeSecurity]
        public static void glResizeBuffersMESA()
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2dMESA")]
        public static IntPtr ext__GL_MESA_window_pos__glWindowPos2dMESA = IntPtr.Zero;

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2dMESA"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos2dMESA(double x, double y)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2dvMESA")]
        public static IntPtr ext__GL_MESA_window_pos__glWindowPos2dvMESA = IntPtr.Zero;

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2dvMESA"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos2dvMESA(ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2dvMESA"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos2dvMESA(double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2fMESA")]
        public static IntPtr ext__GL_MESA_window_pos__glWindowPos2fMESA = IntPtr.Zero;

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2fMESA"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos2fMESA(float x, float y)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2fvMESA")]
        public static IntPtr ext__GL_MESA_window_pos__glWindowPos2fvMESA = IntPtr.Zero;

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2fvMESA"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos2fvMESA(ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2fvMESA"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos2fvMESA(float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2iMESA")]
        public static IntPtr ext__GL_MESA_window_pos__glWindowPos2iMESA = IntPtr.Zero;

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2iMESA"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos2iMESA(int x, int y)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2ivMESA")]
        public static IntPtr ext__GL_MESA_window_pos__glWindowPos2ivMESA = IntPtr.Zero;

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2ivMESA"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos2ivMESA(ref int v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2ivMESA"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos2ivMESA(int[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2sMESA")]
        public static IntPtr ext__GL_MESA_window_pos__glWindowPos2sMESA = IntPtr.Zero;

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2sMESA"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos2sMESA(short x, short y)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2svMESA")]
        public static IntPtr ext__GL_MESA_window_pos__glWindowPos2svMESA = IntPtr.Zero;

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2svMESA"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos2svMESA(ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2svMESA"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos2svMESA(short[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3dMESA")]
        public static IntPtr ext__GL_MESA_window_pos__glWindowPos3dMESA = IntPtr.Zero;

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3dMESA"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos3dMESA(double x, double y, double z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3dvMESA")]
        public static IntPtr ext__GL_MESA_window_pos__glWindowPos3dvMESA = IntPtr.Zero;

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3dvMESA"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos3dvMESA(ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3dvMESA"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos3dvMESA(double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3fMESA")]
        public static IntPtr ext__GL_MESA_window_pos__glWindowPos3fMESA = IntPtr.Zero;

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3fMESA"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos3fMESA(float x, float y, float z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3fvMESA")]
        public static IntPtr ext__GL_MESA_window_pos__glWindowPos3fvMESA = IntPtr.Zero;

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3fvMESA"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos3fvMESA(ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3fvMESA"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos3fvMESA(float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3iMESA")]
        public static IntPtr ext__GL_MESA_window_pos__glWindowPos3iMESA = IntPtr.Zero;

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3iMESA"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos3iMESA(int x, int y, int z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3ivMESA")]
        public static IntPtr ext__GL_MESA_window_pos__glWindowPos3ivMESA = IntPtr.Zero;

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3ivMESA"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos3ivMESA(ref int v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3ivMESA"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos3ivMESA(int[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3sMESA")]
        public static IntPtr ext__GL_MESA_window_pos__glWindowPos3sMESA = IntPtr.Zero;

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3sMESA"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos3sMESA(short x, short y, short z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3svMESA")]
        public static IntPtr ext__GL_MESA_window_pos__glWindowPos3svMESA = IntPtr.Zero;

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3svMESA"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos3svMESA(ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3svMESA"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos3svMESA(short[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4dMESA")]
        public static IntPtr ext__GL_MESA_window_pos__glWindowPos4dMESA = IntPtr.Zero;

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4dMESA"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos4dMESA(double x, double y, double z, double w)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4dvMESA")]
        public static IntPtr ext__GL_MESA_window_pos__glWindowPos4dvMESA = IntPtr.Zero;

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4dvMESA"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos4dvMESA(ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4dvMESA"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos4dvMESA(double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4fMESA")]
        public static IntPtr ext__GL_MESA_window_pos__glWindowPos4fMESA = IntPtr.Zero;

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4fMESA"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos4fMESA(float x, float y, float z, float w)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4fvMESA")]
        public static IntPtr ext__GL_MESA_window_pos__glWindowPos4fvMESA = IntPtr.Zero;

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4fvMESA"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos4fvMESA(ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4fvMESA"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos4fvMESA(float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4iMESA")]
        public static IntPtr ext__GL_MESA_window_pos__glWindowPos4iMESA = IntPtr.Zero;

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4iMESA"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos4iMESA(int x, int y, int z, int w)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4ivMESA")]
        public static IntPtr ext__GL_MESA_window_pos__glWindowPos4ivMESA = IntPtr.Zero;

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4ivMESA"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos4ivMESA(ref int v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4ivMESA"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos4ivMESA(int[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4sMESA")]
        public static IntPtr ext__GL_MESA_window_pos__glWindowPos4sMESA = IntPtr.Zero;

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4sMESA"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos4sMESA(short x, short y, short z, short w)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4svMESA")]
        public static IntPtr ext__GL_MESA_window_pos__glWindowPos4svMESA = IntPtr.Zero;

        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4svMESA"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos4svMESA(ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4svMESA"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos4svMESA(short[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV")]
        public static IntPtr ext__GL_NV_evaluators__glMapControlPointsNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, bool[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, bool[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, bool[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, bool[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, byte[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, byte[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, byte[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, byte[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, short[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, short[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, short[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, short[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, int[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, int[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, int[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, int[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, float[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, float[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, float[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, float[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, double[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, double[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, double[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, double[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, string points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, string points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, string points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, string points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, IntPtr points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, IntPtr points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, IntPtr points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, IntPtr points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ref sbyte points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ref sbyte points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ref sbyte points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ref sbyte points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, sbyte[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, sbyte[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, sbyte[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, sbyte[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, sbyte[,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, sbyte[,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, sbyte[,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, sbyte[,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, sbyte[, ,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, sbyte[, ,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, sbyte[, ,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, sbyte[, ,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ref ushort points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ref ushort points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ref ushort points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ref ushort points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ushort[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ushort[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ushort[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ushort[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ushort[,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ushort[,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ushort[,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ushort[,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ushort[, ,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ushort[, ,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ushort[, ,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ushort[, ,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ref uint points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ref uint points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ref uint points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ref uint points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, uint[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, uint[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, uint[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, uint[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, uint[,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, uint[,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, uint[,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, uint[,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, uint[, ,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, uint[, ,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, uint[, ,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, uint[, ,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ref bool points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ref bool points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ref bool points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ref bool points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, bool[,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, bool[,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, bool[,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, bool[,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, bool[, ,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, bool[, ,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, bool[, ,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, bool[, ,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ref byte points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ref byte points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ref byte points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ref byte points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, byte[,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, byte[,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, byte[,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, byte[,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, byte[, ,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, byte[, ,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, byte[, ,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, byte[, ,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ref short points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ref short points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ref short points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ref short points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, short[,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, short[,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, short[,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, short[,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, short[, ,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, short[, ,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, short[, ,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, short[, ,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ref int points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ref int points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ref int points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ref int points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, int[,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, int[,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, int[,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, int[,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, int[, ,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, int[, ,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, int[, ,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, int[, ,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ref float points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ref float points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ref float points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ref float points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, float[,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, float[,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, float[,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, float[,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, float[, ,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, float[, ,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, float[, ,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, float[, ,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ref double points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ref double points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ref double points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ref double points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, double[,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, double[,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, double[,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, double[,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, double[, ,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, double[, ,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, double[, ,] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, double[, ,] points)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_evaluators", "glMapParameterivNV")]
        public static IntPtr ext__GL_NV_evaluators__glMapParameterivNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_evaluators", "glMapParameterivNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapParameterivNV(int target, int pname, ref int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapParameterivNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapParameterivNV(int target, int pname, int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_evaluators", "glMapParameterfvNV")]
        public static IntPtr ext__GL_NV_evaluators__glMapParameterfvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_evaluators", "glMapParameterfvNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapParameterfvNV(int target, int pname, ref float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glMapParameterfvNV"), SuppressUnmanagedCodeSecurity]
        public static void glMapParameterfvNV(int target, int pname, float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV")]
        public static IntPtr ext__GL_NV_evaluators__glGetMapControlPointsNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int packed, [Out] bool[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int packed, [Out] bool[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, bool packed, [Out] bool[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, bool packed, [Out] bool[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int packed, [Out] byte[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int packed, [Out] byte[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, bool packed, [Out] byte[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, bool packed, [Out] byte[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int packed, [Out] short[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int packed, [Out] short[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, bool packed, [Out] short[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, bool packed, [Out] short[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int packed, [Out] int[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int packed, [Out] int[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, bool packed, [Out] int[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, bool packed, [Out] int[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int packed, [Out] float[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int packed, [Out] float[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, bool packed, [Out] float[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, bool packed, [Out] float[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int packed, [Out] double[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int packed, [Out] double[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, bool packed, [Out] double[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, bool packed, [Out] double[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int packed, IntPtr points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int packed, IntPtr points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, bool packed, IntPtr points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, bool packed, IntPtr points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int packed, out bool points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int packed, out bool points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, bool packed, out bool points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, bool packed, out bool points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int packed, out byte points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int packed, out byte points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, bool packed, out byte points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, bool packed, out byte points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int packed, out short points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int packed, out short points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, bool packed, out short points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, bool packed, out short points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int packed, out int points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int packed, out int points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, bool packed, out int points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, bool packed, out int points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int packed, out float points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int packed, out float points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, bool packed, out float points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, bool packed, out float points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int packed, out double points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int packed, out double points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, bool packed, out double points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, bool packed, out double points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int packed, out sbyte points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int packed, out sbyte points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, bool packed, out sbyte points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, bool packed, out sbyte points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int packed, [Out] sbyte[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int packed, [Out] sbyte[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, bool packed, [Out] sbyte[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, bool packed, [Out] sbyte[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int packed, out ushort points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int packed, out ushort points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, bool packed, out ushort points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, bool packed, out ushort points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int packed, [Out] ushort[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int packed, [Out] ushort[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, bool packed, [Out] ushort[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, bool packed, [Out] ushort[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int packed, out uint points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int packed, out uint points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, bool packed, out uint points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, bool packed, out uint points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int packed, [Out] uint[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int packed, [Out] uint[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, bool packed, [Out] uint[] points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, bool packed, [Out] uint[] points)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapParameterivNV")]
        public static IntPtr ext__GL_NV_evaluators__glGetMapParameterivNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapParameterivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapParameterivNV(int target, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapParameterivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapParameterivNV(int target, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapParameterfvNV")]
        public static IntPtr ext__GL_NV_evaluators__glGetMapParameterfvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapParameterfvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapParameterfvNV(int target, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapParameterfvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapParameterfvNV(int target, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapAttribParameterivNV")]
        public static IntPtr ext__GL_NV_evaluators__glGetMapAttribParameterivNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapAttribParameterivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapAttribParameterivNV(int target, int index, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapAttribParameterivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapAttribParameterivNV(int target, uint index, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapAttribParameterivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapAttribParameterivNV(int target, int index, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapAttribParameterivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapAttribParameterivNV(int target, uint index, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapAttribParameterfvNV")]
        public static IntPtr ext__GL_NV_evaluators__glGetMapAttribParameterfvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapAttribParameterfvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapAttribParameterfvNV(int target, int index, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapAttribParameterfvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapAttribParameterfvNV(int target, uint index, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapAttribParameterfvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapAttribParameterfvNV(int target, int index, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapAttribParameterfvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetMapAttribParameterfvNV(int target, uint index, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_evaluators", "glEvalMapsNV")]
        public static IntPtr ext__GL_NV_evaluators__glEvalMapsNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_evaluators", "glEvalMapsNV"), SuppressUnmanagedCodeSecurity]
        public static void glEvalMapsNV(int target, int mode)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_fence", "glDeleteFencesNV")]
        public static IntPtr ext__GL_NV_fence__glDeleteFencesNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_fence", "glDeleteFencesNV"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteFencesNV(int n, ref int fences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_fence", "glDeleteFencesNV"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteFencesNV(int n, int[] fences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_fence", "glDeleteFencesNV"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteFencesNV(int n, ref uint fences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_fence", "glDeleteFencesNV"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteFencesNV(int n, uint[] fences)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_fence", "glGenFencesNV")]
        public static IntPtr ext__GL_NV_fence__glGenFencesNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_fence", "glGenFencesNV"), SuppressUnmanagedCodeSecurity]
        public static void glGenFencesNV(int n, out int fences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_fence", "glGenFencesNV"), SuppressUnmanagedCodeSecurity]
        public static void glGenFencesNV(int n, [Out] int[] fences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_fence", "glGenFencesNV"), SuppressUnmanagedCodeSecurity]
        public static void glGenFencesNV(int n, out uint fences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_fence", "glGenFencesNV"), SuppressUnmanagedCodeSecurity]
        public static void glGenFencesNV(int n, [Out] uint[] fences)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_fence", "glIsFenceNV")]
        public static IntPtr ext__GL_NV_fence__glIsFenceNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_fence", "glIsFenceNV"), SuppressUnmanagedCodeSecurity]
        public static int glIsFenceNV(int fence)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_fence", "glIsFenceNV"), SuppressUnmanagedCodeSecurity]
        public static int glIsFenceNV(uint fence)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_fence", "glTestFenceNV")]
        public static IntPtr ext__GL_NV_fence__glTestFenceNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_fence", "glTestFenceNV"), SuppressUnmanagedCodeSecurity]
        public static int glTestFenceNV(int fence)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_fence", "glTestFenceNV"), SuppressUnmanagedCodeSecurity]
        public static int glTestFenceNV(uint fence)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_fence", "glGetFenceivNV")]
        public static IntPtr ext__GL_NV_fence__glGetFenceivNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_fence", "glGetFenceivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetFenceivNV(int fence, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_fence", "glGetFenceivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetFenceivNV(uint fence, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_fence", "glGetFenceivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetFenceivNV(int fence, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_fence", "glGetFenceivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetFenceivNV(uint fence, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_fence", "glFinishFenceNV")]
        public static IntPtr ext__GL_NV_fence__glFinishFenceNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_fence", "glFinishFenceNV"), SuppressUnmanagedCodeSecurity]
        public static void glFinishFenceNV(int fence)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_fence", "glFinishFenceNV"), SuppressUnmanagedCodeSecurity]
        public static void glFinishFenceNV(uint fence)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_fence", "glSetFenceNV")]
        public static IntPtr ext__GL_NV_fence__glSetFenceNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_fence", "glSetFenceNV"), SuppressUnmanagedCodeSecurity]
        public static void glSetFenceNV(int fence, int condition)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_fence", "glSetFenceNV"), SuppressUnmanagedCodeSecurity]
        public static void glSetFenceNV(uint fence, int condition)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_fragment_program", "glProgramNamedParameter4fNV")]
        public static IntPtr ext__GL_NV_fragment_program__glProgramNamedParameter4fNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_fragment_program", "glProgramNamedParameter4fNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramNamedParameter4fNV(int id, int len, string name, float x, float y, float z, float w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_fragment_program", "glProgramNamedParameter4fNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramNamedParameter4fNV(uint id, int len, string name, float x, float y, float z, float w)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_fragment_program", "glProgramNamedParameter4dNV")]
        public static IntPtr ext__GL_NV_fragment_program__glProgramNamedParameter4dNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_fragment_program", "glProgramNamedParameter4dNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramNamedParameter4dNV(int id, int len, string name, double x, double y, double z, double w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_fragment_program", "glProgramNamedParameter4dNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramNamedParameter4dNV(uint id, int len, string name, double x, double y, double z, double w)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_fragment_program", "glProgramNamedParameter4fvNV")]
        public static IntPtr ext__GL_NV_fragment_program__glProgramNamedParameter4fvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_fragment_program", "glProgramNamedParameter4fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramNamedParameter4fvNV(int id, int len, string name, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_fragment_program", "glProgramNamedParameter4fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramNamedParameter4fvNV(uint id, int len, string name, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_fragment_program", "glProgramNamedParameter4fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramNamedParameter4fvNV(int id, int len, string name, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_fragment_program", "glProgramNamedParameter4fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramNamedParameter4fvNV(uint id, int len, string name, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_fragment_program", "glProgramNamedParameter4dvNV")]
        public static IntPtr ext__GL_NV_fragment_program__glProgramNamedParameter4dvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_fragment_program", "glProgramNamedParameter4dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramNamedParameter4dvNV(int id, int len, string name, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_fragment_program", "glProgramNamedParameter4dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramNamedParameter4dvNV(uint id, int len, string name, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_fragment_program", "glProgramNamedParameter4dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramNamedParameter4dvNV(int id, int len, string name, double[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_fragment_program", "glProgramNamedParameter4dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramNamedParameter4dvNV(uint id, int len, string name, double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_fragment_program", "glGetProgramNamedParameterfvNV")]
        public static IntPtr ext__GL_NV_fragment_program__glGetProgramNamedParameterfvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_fragment_program", "glGetProgramNamedParameterfvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramNamedParameterfvNV(int id, int len, string name, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_fragment_program", "glGetProgramNamedParameterfvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramNamedParameterfvNV(uint id, int len, string name, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_fragment_program", "glGetProgramNamedParameterfvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramNamedParameterfvNV(int id, int len, string name, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_fragment_program", "glGetProgramNamedParameterfvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramNamedParameterfvNV(uint id, int len, string name, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_fragment_program", "glGetProgramNamedParameterdvNV")]
        public static IntPtr ext__GL_NV_fragment_program__glGetProgramNamedParameterdvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_fragment_program", "glGetProgramNamedParameterdvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramNamedParameterdvNV(int id, int len, string name, out double arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_fragment_program", "glGetProgramNamedParameterdvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramNamedParameterdvNV(uint id, int len, string name, out double arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_fragment_program", "glGetProgramNamedParameterdvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramNamedParameterdvNV(int id, int len, string name, [Out] double[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_fragment_program", "glGetProgramNamedParameterdvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramNamedParameterdvNV(uint id, int len, string name, [Out] double[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glVertex2hNV")]
        public static IntPtr ext__GL_NV_half_float__glVertex2hNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glVertex2hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex2hNV(short x, short y)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertex2hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex2hNV(ushort x, short y)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertex2hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex2hNV(short x, ushort y)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertex2hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex2hNV(ushort x, ushort y)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glVertex2hvNV")]
        public static IntPtr ext__GL_NV_half_float__glVertex2hvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glVertex2hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex2hvNV(ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertex2hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex2hvNV(short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertex2hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex2hvNV(ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertex2hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex2hvNV(ushort[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glVertex3hNV")]
        public static IntPtr ext__GL_NV_half_float__glVertex3hNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glVertex3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex3hNV(short x, short y, short z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertex3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex3hNV(ushort x, short y, short z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertex3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex3hNV(short x, ushort y, short z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertex3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex3hNV(ushort x, ushort y, short z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertex3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex3hNV(short x, short y, ushort z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertex3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex3hNV(ushort x, short y, ushort z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertex3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex3hNV(short x, ushort y, ushort z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertex3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex3hNV(ushort x, ushort y, ushort z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glVertex3hvNV")]
        public static IntPtr ext__GL_NV_half_float__glVertex3hvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glVertex3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex3hvNV(ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertex3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex3hvNV(short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertex3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex3hvNV(ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertex3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex3hvNV(ushort[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hNV")]
        public static IntPtr ext__GL_NV_half_float__glVertex4hNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex4hNV(short x, short y, short z, short w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex4hNV(ushort x, short y, short z, short w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex4hNV(short x, ushort y, short z, short w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex4hNV(ushort x, ushort y, short z, short w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex4hNV(short x, short y, ushort z, short w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex4hNV(ushort x, short y, ushort z, short w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex4hNV(short x, ushort y, ushort z, short w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex4hNV(ushort x, ushort y, ushort z, short w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex4hNV(short x, short y, short z, ushort w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex4hNV(ushort x, short y, short z, ushort w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex4hNV(short x, ushort y, short z, ushort w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex4hNV(ushort x, ushort y, short z, ushort w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex4hNV(short x, short y, ushort z, ushort w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex4hNV(ushort x, short y, ushort z, ushort w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex4hNV(short x, ushort y, ushort z, ushort w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex4hNV(ushort x, ushort y, ushort z, ushort w)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hvNV")]
        public static IntPtr ext__GL_NV_half_float__glVertex4hvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex4hvNV(ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex4hvNV(short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex4hvNV(ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertex4hvNV(ushort[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glNormal3hNV")]
        public static IntPtr ext__GL_NV_half_float__glNormal3hNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glNormal3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glNormal3hNV(short nx, short ny, short nz)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glNormal3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glNormal3hNV(ushort nx, short ny, short nz)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glNormal3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glNormal3hNV(short nx, ushort ny, short nz)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glNormal3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glNormal3hNV(ushort nx, ushort ny, short nz)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glNormal3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glNormal3hNV(short nx, short ny, ushort nz)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glNormal3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glNormal3hNV(ushort nx, short ny, ushort nz)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glNormal3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glNormal3hNV(short nx, ushort ny, ushort nz)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glNormal3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glNormal3hNV(ushort nx, ushort ny, ushort nz)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glNormal3hvNV")]
        public static IntPtr ext__GL_NV_half_float__glNormal3hvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glNormal3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glNormal3hvNV(ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glNormal3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glNormal3hvNV(short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glNormal3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glNormal3hvNV(ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glNormal3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glNormal3hvNV(ushort[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glColor3hNV")]
        public static IntPtr ext__GL_NV_half_float__glColor3hNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glColor3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glColor3hNV(short red, short green, short blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glColor3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glColor3hNV(ushort red, short green, short blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glColor3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glColor3hNV(short red, ushort green, short blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glColor3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glColor3hNV(ushort red, ushort green, short blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glColor3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glColor3hNV(short red, short green, ushort blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glColor3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glColor3hNV(ushort red, short green, ushort blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glColor3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glColor3hNV(short red, ushort green, ushort blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glColor3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glColor3hNV(ushort red, ushort green, ushort blue)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glColor3hvNV")]
        public static IntPtr ext__GL_NV_half_float__glColor3hvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glColor3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glColor3hvNV(ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glColor3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glColor3hvNV(short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glColor3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glColor3hvNV(ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glColor3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glColor3hvNV(ushort[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glColor4hNV")]
        public static IntPtr ext__GL_NV_half_float__glColor4hNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glColor4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glColor4hNV(short red, short green, short blue, short alpha)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glColor4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glColor4hNV(ushort red, short green, short blue, short alpha)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glColor4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glColor4hNV(short red, ushort green, short blue, short alpha)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glColor4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glColor4hNV(ushort red, ushort green, short blue, short alpha)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glColor4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glColor4hNV(short red, short green, ushort blue, short alpha)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glColor4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glColor4hNV(ushort red, short green, ushort blue, short alpha)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glColor4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glColor4hNV(short red, ushort green, ushort blue, short alpha)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glColor4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glColor4hNV(ushort red, ushort green, ushort blue, short alpha)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glColor4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glColor4hNV(short red, short green, short blue, ushort alpha)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glColor4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glColor4hNV(ushort red, short green, short blue, ushort alpha)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glColor4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glColor4hNV(short red, ushort green, short blue, ushort alpha)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glColor4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glColor4hNV(ushort red, ushort green, short blue, ushort alpha)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glColor4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glColor4hNV(short red, short green, ushort blue, ushort alpha)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glColor4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glColor4hNV(ushort red, short green, ushort blue, ushort alpha)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glColor4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glColor4hNV(short red, ushort green, ushort blue, ushort alpha)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glColor4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glColor4hNV(ushort red, ushort green, ushort blue, ushort alpha)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glColor4hvNV")]
        public static IntPtr ext__GL_NV_half_float__glColor4hvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glColor4hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glColor4hvNV(ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glColor4hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glColor4hvNV(short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glColor4hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glColor4hvNV(ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glColor4hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glColor4hvNV(ushort[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord1hNV")]
        public static IntPtr ext__GL_NV_half_float__glTexCoord1hNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord1hNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord1hNV(short s)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord1hNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord1hNV(ushort s)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord1hvNV")]
        public static IntPtr ext__GL_NV_half_float__glTexCoord1hvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord1hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord1hvNV(ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord1hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord1hvNV(short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord1hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord1hvNV(ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord1hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord1hvNV(ushort[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord2hNV")]
        public static IntPtr ext__GL_NV_half_float__glTexCoord2hNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord2hNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2hNV(short s, short t)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord2hNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2hNV(ushort s, short t)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord2hNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2hNV(short s, ushort t)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord2hNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2hNV(ushort s, ushort t)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord2hvNV")]
        public static IntPtr ext__GL_NV_half_float__glTexCoord2hvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord2hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2hvNV(ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord2hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2hvNV(short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord2hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2hvNV(ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord2hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2hvNV(ushort[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord3hNV")]
        public static IntPtr ext__GL_NV_half_float__glTexCoord3hNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord3hNV(short s, short t, short r)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord3hNV(ushort s, short t, short r)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord3hNV(short s, ushort t, short r)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord3hNV(ushort s, ushort t, short r)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord3hNV(short s, short t, ushort r)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord3hNV(ushort s, short t, ushort r)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord3hNV(short s, ushort t, ushort r)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord3hNV(ushort s, ushort t, ushort r)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord3hvNV")]
        public static IntPtr ext__GL_NV_half_float__glTexCoord3hvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord3hvNV(ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord3hvNV(short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord3hvNV(ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord3hvNV(ushort[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hNV")]
        public static IntPtr ext__GL_NV_half_float__glTexCoord4hNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4hNV(short s, short t, short r, short q)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4hNV(ushort s, short t, short r, short q)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4hNV(short s, ushort t, short r, short q)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4hNV(ushort s, ushort t, short r, short q)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4hNV(short s, short t, ushort r, short q)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4hNV(ushort s, short t, ushort r, short q)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4hNV(short s, ushort t, ushort r, short q)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4hNV(ushort s, ushort t, ushort r, short q)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4hNV(short s, short t, short r, ushort q)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4hNV(ushort s, short t, short r, ushort q)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4hNV(short s, ushort t, short r, ushort q)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4hNV(ushort s, ushort t, short r, ushort q)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4hNV(short s, short t, ushort r, ushort q)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4hNV(ushort s, short t, ushort r, ushort q)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4hNV(short s, ushort t, ushort r, ushort q)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4hNV(ushort s, ushort t, ushort r, ushort q)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hvNV")]
        public static IntPtr ext__GL_NV_half_float__glTexCoord4hvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4hvNV(ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4hvNV(short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4hvNV(ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4hvNV(ushort[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord1hNV")]
        public static IntPtr ext__GL_NV_half_float__glMultiTexCoord1hNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord1hNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord1hNV(int target, short s)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord1hNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord1hNV(int target, ushort s)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord1hvNV")]
        public static IntPtr ext__GL_NV_half_float__glMultiTexCoord1hvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord1hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord1hvNV(int target, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord1hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord1hvNV(int target, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord1hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord1hvNV(int target, ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord1hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord1hvNV(int target, ushort[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord2hNV")]
        public static IntPtr ext__GL_NV_half_float__glMultiTexCoord2hNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord2hNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord2hNV(int target, short s, short t)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord2hNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord2hNV(int target, ushort s, short t)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord2hNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord2hNV(int target, short s, ushort t)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord2hNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord2hNV(int target, ushort s, ushort t)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord2hvNV")]
        public static IntPtr ext__GL_NV_half_float__glMultiTexCoord2hvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord2hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord2hvNV(int target, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord2hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord2hvNV(int target, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord2hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord2hvNV(int target, ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord2hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord2hvNV(int target, ushort[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord3hNV")]
        public static IntPtr ext__GL_NV_half_float__glMultiTexCoord3hNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord3hNV(int target, short s, short t, short r)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord3hNV(int target, ushort s, short t, short r)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord3hNV(int target, short s, ushort t, short r)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord3hNV(int target, ushort s, ushort t, short r)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord3hNV(int target, short s, short t, ushort r)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord3hNV(int target, ushort s, short t, ushort r)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord3hNV(int target, short s, ushort t, ushort r)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord3hNV(int target, ushort s, ushort t, ushort r)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord3hvNV")]
        public static IntPtr ext__GL_NV_half_float__glMultiTexCoord3hvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord3hvNV(int target, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord3hvNV(int target, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord3hvNV(int target, ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord3hvNV(int target, ushort[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hNV")]
        public static IntPtr ext__GL_NV_half_float__glMultiTexCoord4hNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4hNV(int target, short s, short t, short r, short q)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4hNV(int target, ushort s, short t, short r, short q)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4hNV(int target, short s, ushort t, short r, short q)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4hNV(int target, ushort s, ushort t, short r, short q)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4hNV(int target, short s, short t, ushort r, short q)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4hNV(int target, ushort s, short t, ushort r, short q)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4hNV(int target, short s, ushort t, ushort r, short q)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4hNV(int target, ushort s, ushort t, ushort r, short q)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4hNV(int target, short s, short t, short r, ushort q)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4hNV(int target, ushort s, short t, short r, ushort q)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4hNV(int target, short s, ushort t, short r, ushort q)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4hNV(int target, ushort s, ushort t, short r, ushort q)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4hNV(int target, short s, short t, ushort r, ushort q)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4hNV(int target, ushort s, short t, ushort r, ushort q)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4hNV(int target, short s, ushort t, ushort r, ushort q)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4hNV(int target, ushort s, ushort t, ushort r, ushort q)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hvNV")]
        public static IntPtr ext__GL_NV_half_float__glMultiTexCoord4hvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4hvNV(int target, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4hvNV(int target, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4hvNV(int target, ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4hvNV(int target, ushort[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glFogCoordhNV")]
        public static IntPtr ext__GL_NV_half_float__glFogCoordhNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glFogCoordhNV"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordhNV(short fog)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glFogCoordhNV"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordhNV(ushort fog)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glFogCoordhvNV")]
        public static IntPtr ext__GL_NV_half_float__glFogCoordhvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glFogCoordhvNV"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordhvNV(ref short fog)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glFogCoordhvNV"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordhvNV(short[] fog)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glFogCoordhvNV"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordhvNV(ref ushort fog)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glFogCoordhvNV"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordhvNV(ushort[] fog)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glSecondaryColor3hNV")]
        public static IntPtr ext__GL_NV_half_float__glSecondaryColor3hNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glSecondaryColor3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3hNV(short red, short green, short blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glSecondaryColor3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3hNV(ushort red, short green, short blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glSecondaryColor3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3hNV(short red, ushort green, short blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glSecondaryColor3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3hNV(ushort red, ushort green, short blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glSecondaryColor3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3hNV(short red, short green, ushort blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glSecondaryColor3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3hNV(ushort red, short green, ushort blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glSecondaryColor3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3hNV(short red, ushort green, ushort blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glSecondaryColor3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3hNV(ushort red, ushort green, ushort blue)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glSecondaryColor3hvNV")]
        public static IntPtr ext__GL_NV_half_float__glSecondaryColor3hvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glSecondaryColor3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3hvNV(ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glSecondaryColor3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3hvNV(short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glSecondaryColor3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3hvNV(ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glSecondaryColor3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3hvNV(ushort[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glVertexWeighthNV")]
        public static IntPtr ext__GL_NV_half_float__glVertexWeighthNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glVertexWeighthNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeighthNV(short weight)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexWeighthNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeighthNV(ushort weight)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glVertexWeighthvNV")]
        public static IntPtr ext__GL_NV_half_float__glVertexWeighthvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glVertexWeighthvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeighthvNV(ref short weight)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexWeighthvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeighthvNV(short[] weight)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexWeighthvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeighthvNV(ref ushort weight)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexWeighthvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexWeighthvNV(ushort[] weight)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib1hNV")]
        public static IntPtr ext__GL_NV_half_float__glVertexAttrib1hNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib1hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1hNV(int index, short x)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib1hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1hNV(uint index, short x)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib1hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1hNV(int index, ushort x)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib1hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1hNV(uint index, ushort x)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib1hvNV")]
        public static IntPtr ext__GL_NV_half_float__glVertexAttrib1hvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib1hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1hvNV(int index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib1hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1hvNV(uint index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib1hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1hvNV(int index, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib1hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1hvNV(uint index, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib1hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1hvNV(int index, ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib1hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1hvNV(uint index, ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib1hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1hvNV(int index, ushort[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib1hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1hvNV(uint index, ushort[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib2hNV")]
        public static IntPtr ext__GL_NV_half_float__glVertexAttrib2hNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib2hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2hNV(int index, short x, short y)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib2hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2hNV(uint index, short x, short y)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib2hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2hNV(int index, ushort x, short y)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib2hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2hNV(uint index, ushort x, short y)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib2hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2hNV(int index, short x, ushort y)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib2hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2hNV(uint index, short x, ushort y)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib2hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2hNV(int index, ushort x, ushort y)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib2hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2hNV(uint index, ushort x, ushort y)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib2hvNV")]
        public static IntPtr ext__GL_NV_half_float__glVertexAttrib2hvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib2hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2hvNV(int index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib2hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2hvNV(uint index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib2hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2hvNV(int index, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib2hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2hvNV(uint index, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib2hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2hvNV(int index, ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib2hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2hvNV(uint index, ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib2hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2hvNV(int index, ushort[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib2hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2hvNV(uint index, ushort[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hNV")]
        public static IntPtr ext__GL_NV_half_float__glVertexAttrib3hNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3hNV(int index, short x, short y, short z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3hNV(uint index, short x, short y, short z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3hNV(int index, ushort x, short y, short z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3hNV(uint index, ushort x, short y, short z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3hNV(int index, short x, ushort y, short z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3hNV(uint index, short x, ushort y, short z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3hNV(int index, ushort x, ushort y, short z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3hNV(uint index, ushort x, ushort y, short z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3hNV(int index, short x, short y, ushort z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3hNV(uint index, short x, short y, ushort z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3hNV(int index, ushort x, short y, ushort z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3hNV(uint index, ushort x, short y, ushort z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3hNV(int index, short x, ushort y, ushort z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3hNV(uint index, short x, ushort y, ushort z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3hNV(int index, ushort x, ushort y, ushort z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3hNV(uint index, ushort x, ushort y, ushort z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hvNV")]
        public static IntPtr ext__GL_NV_half_float__glVertexAttrib3hvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3hvNV(int index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3hvNV(uint index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3hvNV(int index, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3hvNV(uint index, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3hvNV(int index, ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3hvNV(uint index, ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3hvNV(int index, ushort[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3hvNV(uint index, ushort[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV")]
        public static IntPtr ext__GL_NV_half_float__glVertexAttrib4hNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hNV(int index, short x, short y, short z, short w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hNV(uint index, short x, short y, short z, short w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hNV(int index, ushort x, short y, short z, short w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hNV(uint index, ushort x, short y, short z, short w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hNV(int index, short x, ushort y, short z, short w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hNV(uint index, short x, ushort y, short z, short w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hNV(int index, ushort x, ushort y, short z, short w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hNV(uint index, ushort x, ushort y, short z, short w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hNV(int index, short x, short y, ushort z, short w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hNV(uint index, short x, short y, ushort z, short w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hNV(int index, ushort x, short y, ushort z, short w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hNV(uint index, ushort x, short y, ushort z, short w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hNV(int index, short x, ushort y, ushort z, short w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hNV(uint index, short x, ushort y, ushort z, short w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hNV(int index, ushort x, ushort y, ushort z, short w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hNV(uint index, ushort x, ushort y, ushort z, short w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hNV(int index, short x, short y, short z, ushort w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hNV(uint index, short x, short y, short z, ushort w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hNV(int index, ushort x, short y, short z, ushort w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hNV(uint index, ushort x, short y, short z, ushort w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hNV(int index, short x, ushort y, short z, ushort w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hNV(uint index, short x, ushort y, short z, ushort w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hNV(int index, ushort x, ushort y, short z, ushort w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hNV(uint index, ushort x, ushort y, short z, ushort w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hNV(int index, short x, short y, ushort z, ushort w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hNV(uint index, short x, short y, ushort z, ushort w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hNV(int index, ushort x, short y, ushort z, ushort w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hNV(uint index, ushort x, short y, ushort z, ushort w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hNV(int index, short x, ushort y, ushort z, ushort w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hNV(uint index, short x, ushort y, ushort z, ushort w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hNV(int index, ushort x, ushort y, ushort z, ushort w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hNV(uint index, ushort x, ushort y, ushort z, ushort w)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hvNV")]
        public static IntPtr ext__GL_NV_half_float__glVertexAttrib4hvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hvNV(int index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hvNV(uint index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hvNV(int index, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hvNV(uint index, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hvNV(int index, ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hvNV(uint index, ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hvNV(int index, ushort[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4hvNV(uint index, ushort[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs1hvNV")]
        public static IntPtr ext__GL_NV_half_float__glVertexAttribs1hvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs1hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs1hvNV(int index, int n, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs1hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs1hvNV(uint index, int n, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs1hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs1hvNV(int index, int n, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs1hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs1hvNV(uint index, int n, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs1hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs1hvNV(int index, int n, ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs1hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs1hvNV(uint index, int n, ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs1hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs1hvNV(int index, int n, ushort[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs1hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs1hvNV(uint index, int n, ushort[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs2hvNV")]
        public static IntPtr ext__GL_NV_half_float__glVertexAttribs2hvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs2hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs2hvNV(int index, int n, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs2hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs2hvNV(uint index, int n, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs2hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs2hvNV(int index, int n, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs2hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs2hvNV(uint index, int n, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs2hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs2hvNV(int index, int n, ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs2hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs2hvNV(uint index, int n, ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs2hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs2hvNV(int index, int n, ushort[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs2hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs2hvNV(uint index, int n, ushort[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs3hvNV")]
        public static IntPtr ext__GL_NV_half_float__glVertexAttribs3hvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs3hvNV(int index, int n, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs3hvNV(uint index, int n, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs3hvNV(int index, int n, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs3hvNV(uint index, int n, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs3hvNV(int index, int n, ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs3hvNV(uint index, int n, ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs3hvNV(int index, int n, ushort[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs3hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs3hvNV(uint index, int n, ushort[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs4hvNV")]
        public static IntPtr ext__GL_NV_half_float__glVertexAttribs4hvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs4hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs4hvNV(int index, int n, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs4hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs4hvNV(uint index, int n, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs4hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs4hvNV(int index, int n, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs4hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs4hvNV(uint index, int n, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs4hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs4hvNV(int index, int n, ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs4hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs4hvNV(uint index, int n, ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs4hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs4hvNV(int index, int n, ushort[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs4hvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs4hvNV(uint index, int n, ushort[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_occlusion_query", "glGenOcclusionQueriesNV")]
        public static IntPtr ext__GL_NV_occlusion_query__glGenOcclusionQueriesNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_occlusion_query", "glGenOcclusionQueriesNV"), SuppressUnmanagedCodeSecurity]
        public static void glGenOcclusionQueriesNV(int n, out int ids)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_occlusion_query", "glGenOcclusionQueriesNV"), SuppressUnmanagedCodeSecurity]
        public static void glGenOcclusionQueriesNV(int n, [Out] int[] ids)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_occlusion_query", "glGenOcclusionQueriesNV"), SuppressUnmanagedCodeSecurity]
        public static void glGenOcclusionQueriesNV(int n, out uint ids)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_occlusion_query", "glGenOcclusionQueriesNV"), SuppressUnmanagedCodeSecurity]
        public static void glGenOcclusionQueriesNV(int n, [Out] uint[] ids)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_occlusion_query", "glDeleteOcclusionQueriesNV")]
        public static IntPtr ext__GL_NV_occlusion_query__glDeleteOcclusionQueriesNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_occlusion_query", "glDeleteOcclusionQueriesNV"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteOcclusionQueriesNV(int n, ref int ids)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_occlusion_query", "glDeleteOcclusionQueriesNV"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteOcclusionQueriesNV(int n, int[] ids)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_occlusion_query", "glDeleteOcclusionQueriesNV"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteOcclusionQueriesNV(int n, ref uint ids)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_occlusion_query", "glDeleteOcclusionQueriesNV"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteOcclusionQueriesNV(int n, uint[] ids)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_occlusion_query", "glIsOcclusionQueryNV")]
        public static IntPtr ext__GL_NV_occlusion_query__glIsOcclusionQueryNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_occlusion_query", "glIsOcclusionQueryNV"), SuppressUnmanagedCodeSecurity]
        public static int glIsOcclusionQueryNV(int id)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_occlusion_query", "glIsOcclusionQueryNV"), SuppressUnmanagedCodeSecurity]
        public static int glIsOcclusionQueryNV(uint id)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_occlusion_query", "glBeginOcclusionQueryNV")]
        public static IntPtr ext__GL_NV_occlusion_query__glBeginOcclusionQueryNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_occlusion_query", "glBeginOcclusionQueryNV"), SuppressUnmanagedCodeSecurity]
        public static void glBeginOcclusionQueryNV(int id)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_occlusion_query", "glBeginOcclusionQueryNV"), SuppressUnmanagedCodeSecurity]
        public static void glBeginOcclusionQueryNV(uint id)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_occlusion_query", "glEndOcclusionQueryNV")]
        public static IntPtr ext__GL_NV_occlusion_query__glEndOcclusionQueryNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_occlusion_query", "glEndOcclusionQueryNV"), SuppressUnmanagedCodeSecurity]
        public static void glEndOcclusionQueryNV()
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_occlusion_query", "glGetOcclusionQueryivNV")]
        public static IntPtr ext__GL_NV_occlusion_query__glGetOcclusionQueryivNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_occlusion_query", "glGetOcclusionQueryivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetOcclusionQueryivNV(int id, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_occlusion_query", "glGetOcclusionQueryivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetOcclusionQueryivNV(uint id, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_occlusion_query", "glGetOcclusionQueryivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetOcclusionQueryivNV(int id, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_occlusion_query", "glGetOcclusionQueryivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetOcclusionQueryivNV(uint id, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_occlusion_query", "glGetOcclusionQueryuivNV")]
        public static IntPtr ext__GL_NV_occlusion_query__glGetOcclusionQueryuivNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_occlusion_query", "glGetOcclusionQueryuivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetOcclusionQueryuivNV(int id, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_occlusion_query", "glGetOcclusionQueryuivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetOcclusionQueryuivNV(uint id, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_occlusion_query", "glGetOcclusionQueryuivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetOcclusionQueryuivNV(int id, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_occlusion_query", "glGetOcclusionQueryuivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetOcclusionQueryuivNV(uint id, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_occlusion_query", "glGetOcclusionQueryuivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetOcclusionQueryuivNV(int id, int pname, out uint arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_occlusion_query", "glGetOcclusionQueryuivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetOcclusionQueryuivNV(uint id, int pname, out uint arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_occlusion_query", "glGetOcclusionQueryuivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetOcclusionQueryuivNV(int id, int pname, [Out] uint[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_occlusion_query", "glGetOcclusionQueryuivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetOcclusionQueryuivNV(uint id, int pname, [Out] uint[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV")]
        public static IntPtr ext__GL_NV_pixel_data_range__glPixelDataRangeNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glPixelDataRangeNV(int target, int length, [Out] bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glPixelDataRangeNV(int target, int length, [Out] byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glPixelDataRangeNV(int target, int length, [Out] short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glPixelDataRangeNV(int target, int length, [Out] int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glPixelDataRangeNV(int target, int length, [Out] float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glPixelDataRangeNV(int target, int length, [Out] double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glPixelDataRangeNV(int target, int length, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glPixelDataRangeNV(int target, int length, out bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glPixelDataRangeNV(int target, int length, out byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glPixelDataRangeNV(int target, int length, out short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glPixelDataRangeNV(int target, int length, out int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glPixelDataRangeNV(int target, int length, out float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glPixelDataRangeNV(int target, int length, out double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glPixelDataRangeNV(int target, int length, out sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glPixelDataRangeNV(int target, int length, [Out] sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glPixelDataRangeNV(int target, int length, out ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glPixelDataRangeNV(int target, int length, [Out] ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glPixelDataRangeNV(int target, int length, out uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glPixelDataRangeNV(int target, int length, [Out] uint[] pointer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_pixel_data_range", "glFlushPixelDataRangeNV")]
        public static IntPtr ext__GL_NV_pixel_data_range__glFlushPixelDataRangeNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_pixel_data_range", "glFlushPixelDataRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glFlushPixelDataRangeNV(int target)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_point_sprite", "glPointParameteriNV")]
        public static IntPtr ext__GL_NV_point_sprite__glPointParameteriNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_point_sprite", "glPointParameteriNV"), SuppressUnmanagedCodeSecurity]
        public static void glPointParameteriNV(int pname, int param)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_point_sprite", "glPointParameterivNV")]
        public static IntPtr ext__GL_NV_point_sprite__glPointParameterivNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_point_sprite", "glPointParameterivNV"), SuppressUnmanagedCodeSecurity]
        public static void glPointParameterivNV(int pname, ref int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_point_sprite", "glPointParameterivNV"), SuppressUnmanagedCodeSecurity]
        public static void glPointParameterivNV(int pname, int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_primitive_restart", "glPrimitiveRestartNV")]
        public static IntPtr ext__GL_NV_primitive_restart__glPrimitiveRestartNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_primitive_restart", "glPrimitiveRestartNV"), SuppressUnmanagedCodeSecurity]
        public static void glPrimitiveRestartNV()
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_primitive_restart", "glPrimitiveRestartIndexNV")]
        public static IntPtr ext__GL_NV_primitive_restart__glPrimitiveRestartIndexNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_primitive_restart", "glPrimitiveRestartIndexNV"), SuppressUnmanagedCodeSecurity]
        public static void glPrimitiveRestartIndexNV(int index)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_primitive_restart", "glPrimitiveRestartIndexNV"), SuppressUnmanagedCodeSecurity]
        public static void glPrimitiveRestartIndexNV(uint index)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerParameterfvNV")]
        public static IntPtr ext__GL_NV_register_combiners__glCombinerParameterfvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerParameterfvNV"), SuppressUnmanagedCodeSecurity]
        public static void glCombinerParameterfvNV(int pname, ref float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerParameterfvNV"), SuppressUnmanagedCodeSecurity]
        public static void glCombinerParameterfvNV(int pname, float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerParameterfNV")]
        public static IntPtr ext__GL_NV_register_combiners__glCombinerParameterfNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerParameterfNV"), SuppressUnmanagedCodeSecurity]
        public static void glCombinerParameterfNV(int pname, float param)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerParameterivNV")]
        public static IntPtr ext__GL_NV_register_combiners__glCombinerParameterivNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerParameterivNV"), SuppressUnmanagedCodeSecurity]
        public static void glCombinerParameterivNV(int pname, ref int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerParameterivNV"), SuppressUnmanagedCodeSecurity]
        public static void glCombinerParameterivNV(int pname, int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerParameteriNV")]
        public static IntPtr ext__GL_NV_register_combiners__glCombinerParameteriNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerParameteriNV"), SuppressUnmanagedCodeSecurity]
        public static void glCombinerParameteriNV(int pname, int param)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerInputNV")]
        public static IntPtr ext__GL_NV_register_combiners__glCombinerInputNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerInputNV"), SuppressUnmanagedCodeSecurity]
        public static void glCombinerInputNV(int stage, int portion, int variable, int input, int mapping, int componentUsage)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerOutputNV")]
        public static IntPtr ext__GL_NV_register_combiners__glCombinerOutputNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerOutputNV"), SuppressUnmanagedCodeSecurity]
        public static void glCombinerOutputNV(int stage, int portion, int abOutput, int cdOutput, int sumOutput, int scale, int bias, int abDotProduct, int cdDotProduct, int muxSum)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerOutputNV"), SuppressUnmanagedCodeSecurity]
        public static void glCombinerOutputNV(int stage, int portion, int abOutput, int cdOutput, int sumOutput, int scale, int bias, bool abDotProduct, int cdDotProduct, int muxSum)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerOutputNV"), SuppressUnmanagedCodeSecurity]
        public static void glCombinerOutputNV(int stage, int portion, int abOutput, int cdOutput, int sumOutput, int scale, int bias, int abDotProduct, bool cdDotProduct, int muxSum)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerOutputNV"), SuppressUnmanagedCodeSecurity]
        public static void glCombinerOutputNV(int stage, int portion, int abOutput, int cdOutput, int sumOutput, int scale, int bias, bool abDotProduct, bool cdDotProduct, int muxSum)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerOutputNV"), SuppressUnmanagedCodeSecurity]
        public static void glCombinerOutputNV(int stage, int portion, int abOutput, int cdOutput, int sumOutput, int scale, int bias, int abDotProduct, int cdDotProduct, bool muxSum)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerOutputNV"), SuppressUnmanagedCodeSecurity]
        public static void glCombinerOutputNV(int stage, int portion, int abOutput, int cdOutput, int sumOutput, int scale, int bias, bool abDotProduct, int cdDotProduct, bool muxSum)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerOutputNV"), SuppressUnmanagedCodeSecurity]
        public static void glCombinerOutputNV(int stage, int portion, int abOutput, int cdOutput, int sumOutput, int scale, int bias, int abDotProduct, bool cdDotProduct, bool muxSum)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerOutputNV"), SuppressUnmanagedCodeSecurity]
        public static void glCombinerOutputNV(int stage, int portion, int abOutput, int cdOutput, int sumOutput, int scale, int bias, bool abDotProduct, bool cdDotProduct, bool muxSum)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_register_combiners", "glFinalCombinerInputNV")]
        public static IntPtr ext__GL_NV_register_combiners__glFinalCombinerInputNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_register_combiners", "glFinalCombinerInputNV"), SuppressUnmanagedCodeSecurity]
        public static void glFinalCombinerInputNV(int variable, int input, int mapping, int componentUsage)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_register_combiners", "glGetCombinerInputParameterfvNV")]
        public static IntPtr ext__GL_NV_register_combiners__glGetCombinerInputParameterfvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_register_combiners", "glGetCombinerInputParameterfvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetCombinerInputParameterfvNV(int stage, int portion, int variable, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_register_combiners", "glGetCombinerInputParameterfvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetCombinerInputParameterfvNV(int stage, int portion, int variable, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_register_combiners", "glGetCombinerInputParameterivNV")]
        public static IntPtr ext__GL_NV_register_combiners__glGetCombinerInputParameterivNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_register_combiners", "glGetCombinerInputParameterivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetCombinerInputParameterivNV(int stage, int portion, int variable, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_register_combiners", "glGetCombinerInputParameterivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetCombinerInputParameterivNV(int stage, int portion, int variable, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_register_combiners", "glGetCombinerOutputParameterfvNV")]
        public static IntPtr ext__GL_NV_register_combiners__glGetCombinerOutputParameterfvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_register_combiners", "glGetCombinerOutputParameterfvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetCombinerOutputParameterfvNV(int stage, int portion, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_register_combiners", "glGetCombinerOutputParameterfvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetCombinerOutputParameterfvNV(int stage, int portion, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_register_combiners", "glGetCombinerOutputParameterivNV")]
        public static IntPtr ext__GL_NV_register_combiners__glGetCombinerOutputParameterivNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_register_combiners", "glGetCombinerOutputParameterivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetCombinerOutputParameterivNV(int stage, int portion, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_register_combiners", "glGetCombinerOutputParameterivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetCombinerOutputParameterivNV(int stage, int portion, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_register_combiners", "glGetFinalCombinerInputParameterfvNV")]
        public static IntPtr ext__GL_NV_register_combiners__glGetFinalCombinerInputParameterfvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_register_combiners", "glGetFinalCombinerInputParameterfvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetFinalCombinerInputParameterfvNV(int variable, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_register_combiners", "glGetFinalCombinerInputParameterfvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetFinalCombinerInputParameterfvNV(int variable, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_register_combiners", "glGetFinalCombinerInputParameterivNV")]
        public static IntPtr ext__GL_NV_register_combiners__glGetFinalCombinerInputParameterivNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_register_combiners", "glGetFinalCombinerInputParameterivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetFinalCombinerInputParameterivNV(int variable, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_register_combiners", "glGetFinalCombinerInputParameterivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetFinalCombinerInputParameterivNV(int variable, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_register_combiners2", "glCombinerStageParameterfvNV")]
        public static IntPtr ext__GL_NV_register_combiners2__glCombinerStageParameterfvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_register_combiners2", "glCombinerStageParameterfvNV"), SuppressUnmanagedCodeSecurity]
        public static void glCombinerStageParameterfvNV(int stage, int pname, ref float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_register_combiners2", "glCombinerStageParameterfvNV"), SuppressUnmanagedCodeSecurity]
        public static void glCombinerStageParameterfvNV(int stage, int pname, float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_register_combiners2", "glGetCombinerStageParameterfvNV")]
        public static IntPtr ext__GL_NV_register_combiners2__glGetCombinerStageParameterfvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_register_combiners2", "glGetCombinerStageParameterfvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetCombinerStageParameterfvNV(int stage, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_register_combiners2", "glGetCombinerStageParameterfvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetCombinerStageParameterfvNV(int stage, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glFlushVertexArrayRangeNV")]
        public static IntPtr ext__GL_NV_vertex_array_range__glFlushVertexArrayRangeNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glFlushVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glFlushVertexArrayRangeNV()
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV")]
        public static IntPtr ext__GL_NV_vertex_array_range__glVertexArrayRangeNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, string pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, ref sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, sbyte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, sbyte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, ref ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, ushort[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, ushort[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, ref uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, uint[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, uint[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, uint[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, ref bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, bool[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, bool[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, ref byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, byte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, byte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, ref short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, short[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, short[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, ref int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, int[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, int[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, ref float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, float[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, float[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, ref double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, double[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexArrayRangeNV(int length, double[, ,] pointer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glAreProgramsResidentNV")]
        public static IntPtr ext__GL_NV_vertex_program__glAreProgramsResidentNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glAreProgramsResidentNV"), SuppressUnmanagedCodeSecurity]
        public static int glAreProgramsResidentNV(int n, ref int programs, out int residences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glAreProgramsResidentNV"), SuppressUnmanagedCodeSecurity]
        public static int glAreProgramsResidentNV(int n, int[] programs, out int residences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glAreProgramsResidentNV"), SuppressUnmanagedCodeSecurity]
        public static int glAreProgramsResidentNV(int n, ref uint programs, out int residences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glAreProgramsResidentNV"), SuppressUnmanagedCodeSecurity]
        public static int glAreProgramsResidentNV(int n, uint[] programs, out int residences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glAreProgramsResidentNV"), SuppressUnmanagedCodeSecurity]
        public static int glAreProgramsResidentNV(int n, ref int programs, [Out] int[] residences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glAreProgramsResidentNV"), SuppressUnmanagedCodeSecurity]
        public static int glAreProgramsResidentNV(int n, int[] programs, [Out] int[] residences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glAreProgramsResidentNV"), SuppressUnmanagedCodeSecurity]
        public static int glAreProgramsResidentNV(int n, ref uint programs, [Out] int[] residences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glAreProgramsResidentNV"), SuppressUnmanagedCodeSecurity]
        public static int glAreProgramsResidentNV(int n, uint[] programs, [Out] int[] residences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glAreProgramsResidentNV"), SuppressUnmanagedCodeSecurity]
        public static int glAreProgramsResidentNV(int n, ref int programs, out bool residences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glAreProgramsResidentNV"), SuppressUnmanagedCodeSecurity]
        public static int glAreProgramsResidentNV(int n, int[] programs, out bool residences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glAreProgramsResidentNV"), SuppressUnmanagedCodeSecurity]
        public static int glAreProgramsResidentNV(int n, ref uint programs, out bool residences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glAreProgramsResidentNV"), SuppressUnmanagedCodeSecurity]
        public static int glAreProgramsResidentNV(int n, uint[] programs, out bool residences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glAreProgramsResidentNV"), SuppressUnmanagedCodeSecurity]
        public static int glAreProgramsResidentNV(int n, ref int programs, [Out] bool[] residences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glAreProgramsResidentNV"), SuppressUnmanagedCodeSecurity]
        public static int glAreProgramsResidentNV(int n, int[] programs, [Out] bool[] residences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glAreProgramsResidentNV"), SuppressUnmanagedCodeSecurity]
        public static int glAreProgramsResidentNV(int n, ref uint programs, [Out] bool[] residences)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glAreProgramsResidentNV"), SuppressUnmanagedCodeSecurity]
        public static int glAreProgramsResidentNV(int n, uint[] programs, [Out] bool[] residences)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glBindProgramNV")]
        public static IntPtr ext__GL_NV_vertex_program__glBindProgramNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glBindProgramNV"), SuppressUnmanagedCodeSecurity]
        public static void glBindProgramNV(int target, int id)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glBindProgramNV"), SuppressUnmanagedCodeSecurity]
        public static void glBindProgramNV(int target, uint id)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glDeleteProgramsNV")]
        public static IntPtr ext__GL_NV_vertex_program__glDeleteProgramsNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glDeleteProgramsNV"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteProgramsNV(int n, ref int programs)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glDeleteProgramsNV"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteProgramsNV(int n, int[] programs)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glDeleteProgramsNV"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteProgramsNV(int n, ref uint programs)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glDeleteProgramsNV"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteProgramsNV(int n, uint[] programs)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glExecuteProgramNV")]
        public static IntPtr ext__GL_NV_vertex_program__glExecuteProgramNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glExecuteProgramNV"), SuppressUnmanagedCodeSecurity]
        public static void glExecuteProgramNV(int target, int id, ref float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glExecuteProgramNV"), SuppressUnmanagedCodeSecurity]
        public static void glExecuteProgramNV(int target, uint id, ref float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glExecuteProgramNV"), SuppressUnmanagedCodeSecurity]
        public static void glExecuteProgramNV(int target, int id, float[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glExecuteProgramNV"), SuppressUnmanagedCodeSecurity]
        public static void glExecuteProgramNV(int target, uint id, float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glGenProgramsNV")]
        public static IntPtr ext__GL_NV_vertex_program__glGenProgramsNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glGenProgramsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGenProgramsNV(int n, out int programs)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGenProgramsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGenProgramsNV(int n, [Out] int[] programs)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGenProgramsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGenProgramsNV(int n, out uint programs)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGenProgramsNV"), SuppressUnmanagedCodeSecurity]
        public static void glGenProgramsNV(int n, [Out] uint[] programs)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramParameterdvNV")]
        public static IntPtr ext__GL_NV_vertex_program__glGetProgramParameterdvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramParameterdvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramParameterdvNV(int target, int index, int pname, out double arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramParameterdvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramParameterdvNV(int target, uint index, int pname, out double arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramParameterdvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramParameterdvNV(int target, int index, int pname, [Out] double[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramParameterdvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramParameterdvNV(int target, uint index, int pname, [Out] double[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramParameterfvNV")]
        public static IntPtr ext__GL_NV_vertex_program__glGetProgramParameterfvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramParameterfvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramParameterfvNV(int target, int index, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramParameterfvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramParameterfvNV(int target, uint index, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramParameterfvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramParameterfvNV(int target, int index, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramParameterfvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramParameterfvNV(int target, uint index, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramivNV")]
        public static IntPtr ext__GL_NV_vertex_program__glGetProgramivNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramivNV(int id, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramivNV(uint id, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramivNV(int id, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramivNV(uint id, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramStringNV")]
        public static IntPtr ext__GL_NV_vertex_program__glGetProgramStringNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramStringNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramStringNV(int id, int pname, out byte program)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramStringNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramStringNV(uint id, int pname, out byte program)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramStringNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramStringNV(int id, int pname, [Out] byte[] program)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramStringNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramStringNV(uint id, int pname, [Out] byte[] program)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetTrackMatrixivNV")]
        public static IntPtr ext__GL_NV_vertex_program__glGetTrackMatrixivNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetTrackMatrixivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetTrackMatrixivNV(int target, int address, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetTrackMatrixivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetTrackMatrixivNV(int target, uint address, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetTrackMatrixivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetTrackMatrixivNV(int target, int address, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetTrackMatrixivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetTrackMatrixivNV(int target, uint address, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribdvNV")]
        public static IntPtr ext__GL_NV_vertex_program__glGetVertexAttribdvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribdvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribdvNV(int index, int pname, out double arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribdvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribdvNV(uint index, int pname, out double arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribdvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribdvNV(int index, int pname, [Out] double[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribdvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribdvNV(uint index, int pname, [Out] double[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribfvNV")]
        public static IntPtr ext__GL_NV_vertex_program__glGetVertexAttribfvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribfvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribfvNV(int index, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribfvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribfvNV(uint index, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribfvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribfvNV(int index, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribfvNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribfvNV(uint index, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribivNV")]
        public static IntPtr ext__GL_NV_vertex_program__glGetVertexAttribivNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribivNV(int index, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribivNV(uint index, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribivNV(int index, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribivNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribivNV(uint index, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV")]
        public static IntPtr ext__GL_NV_vertex_program__glGetVertexAttribPointervNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(int index, int pname, [Out] bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(uint index, int pname, [Out] bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(int index, int pname, [Out] byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(uint index, int pname, [Out] byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(int index, int pname, [Out] short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(uint index, int pname, [Out] short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(int index, int pname, [Out] int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(uint index, int pname, [Out] int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(int index, int pname, [Out] float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(uint index, int pname, [Out] float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(int index, int pname, [Out] double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(uint index, int pname, [Out] double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(int index, int pname, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(uint index, int pname, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(int index, int pname, out bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(uint index, int pname, out bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(int index, int pname, out byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(uint index, int pname, out byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(int index, int pname, out short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(uint index, int pname, out short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(int index, int pname, out int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(uint index, int pname, out int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(int index, int pname, out float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(uint index, int pname, out float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(int index, int pname, out double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(uint index, int pname, out double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(int index, int pname, out sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(uint index, int pname, out sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(int index, int pname, [Out] sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(uint index, int pname, [Out] sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(int index, int pname, out ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(uint index, int pname, out ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(int index, int pname, [Out] ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(uint index, int pname, [Out] ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(int index, int pname, out uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(uint index, int pname, out uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(int index, int pname, [Out] uint[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointervNV(uint index, int pname, [Out] uint[] pointer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glIsProgramNV")]
        public static IntPtr ext__GL_NV_vertex_program__glIsProgramNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glIsProgramNV"), SuppressUnmanagedCodeSecurity]
        public static int glIsProgramNV(int id)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glIsProgramNV"), SuppressUnmanagedCodeSecurity]
        public static int glIsProgramNV(uint id)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glLoadProgramNV")]
        public static IntPtr ext__GL_NV_vertex_program__glLoadProgramNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glLoadProgramNV"), SuppressUnmanagedCodeSecurity]
        public static void glLoadProgramNV(int target, int id, int len, string program)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glLoadProgramNV"), SuppressUnmanagedCodeSecurity]
        public static void glLoadProgramNV(int target, uint id, int len, string program)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameter4dNV")]
        public static IntPtr ext__GL_NV_vertex_program__glProgramParameter4dNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameter4dNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramParameter4dNV(int target, int index, double x, double y, double z, double w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameter4dNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramParameter4dNV(int target, uint index, double x, double y, double z, double w)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameter4dvNV")]
        public static IntPtr ext__GL_NV_vertex_program__glProgramParameter4dvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameter4dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramParameter4dvNV(int target, int index, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameter4dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramParameter4dvNV(int target, uint index, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameter4dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramParameter4dvNV(int target, int index, double[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameter4dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramParameter4dvNV(int target, uint index, double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameter4fNV")]
        public static IntPtr ext__GL_NV_vertex_program__glProgramParameter4fNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameter4fNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramParameter4fNV(int target, int index, float x, float y, float z, float w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameter4fNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramParameter4fNV(int target, uint index, float x, float y, float z, float w)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameter4fvNV")]
        public static IntPtr ext__GL_NV_vertex_program__glProgramParameter4fvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameter4fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramParameter4fvNV(int target, int index, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameter4fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramParameter4fvNV(int target, uint index, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameter4fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramParameter4fvNV(int target, int index, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameter4fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramParameter4fvNV(int target, uint index, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameters4dvNV")]
        public static IntPtr ext__GL_NV_vertex_program__glProgramParameters4dvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameters4dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramParameters4dvNV(int target, int index, int count, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameters4dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramParameters4dvNV(int target, uint index, int count, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameters4dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramParameters4dvNV(int target, int index, uint count, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameters4dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramParameters4dvNV(int target, uint index, uint count, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameters4dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramParameters4dvNV(int target, int index, int count, double[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameters4dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramParameters4dvNV(int target, uint index, int count, double[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameters4dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramParameters4dvNV(int target, int index, uint count, double[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameters4dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramParameters4dvNV(int target, uint index, uint count, double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameters4fvNV")]
        public static IntPtr ext__GL_NV_vertex_program__glProgramParameters4fvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameters4fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramParameters4fvNV(int target, int index, int count, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameters4fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramParameters4fvNV(int target, uint index, int count, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameters4fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramParameters4fvNV(int target, int index, uint count, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameters4fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramParameters4fvNV(int target, uint index, uint count, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameters4fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramParameters4fvNV(int target, int index, int count, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameters4fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramParameters4fvNV(int target, uint index, int count, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameters4fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramParameters4fvNV(int target, int index, uint count, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameters4fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glProgramParameters4fvNV(int target, uint index, uint count, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glRequestResidentProgramsNV")]
        public static IntPtr ext__GL_NV_vertex_program__glRequestResidentProgramsNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glRequestResidentProgramsNV"), SuppressUnmanagedCodeSecurity]
        public static void glRequestResidentProgramsNV(int n, ref int programs)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glRequestResidentProgramsNV"), SuppressUnmanagedCodeSecurity]
        public static void glRequestResidentProgramsNV(int n, int[] programs)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glRequestResidentProgramsNV"), SuppressUnmanagedCodeSecurity]
        public static void glRequestResidentProgramsNV(int n, ref uint programs)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glRequestResidentProgramsNV"), SuppressUnmanagedCodeSecurity]
        public static void glRequestResidentProgramsNV(int n, uint[] programs)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glTrackMatrixNV")]
        public static IntPtr ext__GL_NV_vertex_program__glTrackMatrixNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glTrackMatrixNV"), SuppressUnmanagedCodeSecurity]
        public static void glTrackMatrixNV(int target, int address, int matrix, int transform)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glTrackMatrixNV"), SuppressUnmanagedCodeSecurity]
        public static void glTrackMatrixNV(int target, uint address, int matrix, int transform)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttribPointerNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, string pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, string pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, ref sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, ref sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, sbyte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, sbyte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, sbyte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, sbyte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, ref ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, ref ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, ushort[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, ushort[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, ushort[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, ushort[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, ref uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, ref uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, uint[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, uint[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, uint[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, uint[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, uint[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, uint[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, ref bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, ref bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, bool[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, bool[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, bool[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, bool[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, ref byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, ref byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, byte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, byte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, byte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, byte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, ref short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, ref short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, short[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, short[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, short[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, short[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, ref int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, ref int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, int[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, int[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, int[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, int[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, ref float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, ref float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, float[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, float[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, float[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, float[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, ref double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, ref double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, double[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, double[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(int index, int fsize, int type, int stride, double[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointerNV(uint index, int fsize, int type, int stride, double[, ,] pointer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1dNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttrib1dNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1dNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1dNV(int index, double x)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1dNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1dNV(uint index, double x)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1dvNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttrib1dvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1dvNV(int index, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1dvNV(uint index, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1dvNV(int index, double[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1dvNV(uint index, double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1fNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttrib1fNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1fNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1fNV(int index, float x)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1fNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1fNV(uint index, float x)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1fvNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttrib1fvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1fvNV(int index, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1fvNV(uint index, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1fvNV(int index, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1fvNV(uint index, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1sNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttrib1sNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1sNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1sNV(int index, short x)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1sNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1sNV(uint index, short x)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1svNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttrib1svNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1svNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1svNV(int index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1svNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1svNV(uint index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1svNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1svNV(int index, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1svNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1svNV(uint index, short[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2dNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttrib2dNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2dNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2dNV(int index, double x, double y)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2dNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2dNV(uint index, double x, double y)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2dvNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttrib2dvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2dvNV(int index, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2dvNV(uint index, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2dvNV(int index, double[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2dvNV(uint index, double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2fNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttrib2fNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2fNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2fNV(int index, float x, float y)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2fNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2fNV(uint index, float x, float y)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2fvNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttrib2fvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2fvNV(int index, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2fvNV(uint index, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2fvNV(int index, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2fvNV(uint index, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2sNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttrib2sNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2sNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2sNV(int index, short x, short y)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2sNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2sNV(uint index, short x, short y)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2svNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttrib2svNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2svNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2svNV(int index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2svNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2svNV(uint index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2svNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2svNV(int index, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2svNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2svNV(uint index, short[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3dNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttrib3dNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3dNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3dNV(int index, double x, double y, double z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3dNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3dNV(uint index, double x, double y, double z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3dvNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttrib3dvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3dvNV(int index, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3dvNV(uint index, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3dvNV(int index, double[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3dvNV(uint index, double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3fNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttrib3fNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3fNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3fNV(int index, float x, float y, float z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3fNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3fNV(uint index, float x, float y, float z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3fvNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttrib3fvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3fvNV(int index, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3fvNV(uint index, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3fvNV(int index, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3fvNV(uint index, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3sNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttrib3sNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3sNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3sNV(int index, short x, short y, short z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3sNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3sNV(uint index, short x, short y, short z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3svNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttrib3svNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3svNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3svNV(int index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3svNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3svNV(uint index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3svNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3svNV(int index, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3svNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3svNV(uint index, short[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4dNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttrib4dNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4dNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4dNV(int index, double x, double y, double z, double w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4dNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4dNV(uint index, double x, double y, double z, double w)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4dvNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttrib4dvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4dvNV(int index, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4dvNV(uint index, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4dvNV(int index, double[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4dvNV(uint index, double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4fNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttrib4fNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4fNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4fNV(int index, float x, float y, float z, float w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4fNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4fNV(uint index, float x, float y, float z, float w)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4fvNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttrib4fvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4fvNV(int index, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4fvNV(uint index, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4fvNV(int index, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4fvNV(uint index, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4sNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttrib4sNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4sNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4sNV(int index, short x, short y, short z, short w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4sNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4sNV(uint index, short x, short y, short z, short w)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4svNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttrib4svNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4svNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4svNV(int index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4svNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4svNV(uint index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4svNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4svNV(int index, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4svNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4svNV(uint index, short[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4ubNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttrib4ubNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4ubNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4ubNV(int index, byte x, byte y, byte z, byte w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4ubNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4ubNV(uint index, byte x, byte y, byte z, byte w)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4ubvNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttrib4ubvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4ubvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4ubvNV(int index, ref byte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4ubvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4ubvNV(uint index, ref byte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4ubvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4ubvNV(int index, byte[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4ubvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4ubvNV(uint index, byte[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs1dvNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttribs1dvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs1dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs1dvNV(int index, int count, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs1dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs1dvNV(uint index, int count, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs1dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs1dvNV(int index, int count, double[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs1dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs1dvNV(uint index, int count, double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs1fvNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttribs1fvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs1fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs1fvNV(int index, int count, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs1fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs1fvNV(uint index, int count, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs1fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs1fvNV(int index, int count, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs1fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs1fvNV(uint index, int count, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs1svNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttribs1svNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs1svNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs1svNV(int index, int count, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs1svNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs1svNV(uint index, int count, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs1svNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs1svNV(int index, int count, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs1svNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs1svNV(uint index, int count, short[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs2dvNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttribs2dvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs2dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs2dvNV(int index, int count, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs2dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs2dvNV(uint index, int count, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs2dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs2dvNV(int index, int count, double[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs2dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs2dvNV(uint index, int count, double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs2fvNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttribs2fvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs2fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs2fvNV(int index, int count, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs2fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs2fvNV(uint index, int count, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs2fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs2fvNV(int index, int count, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs2fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs2fvNV(uint index, int count, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs2svNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttribs2svNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs2svNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs2svNV(int index, int count, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs2svNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs2svNV(uint index, int count, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs2svNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs2svNV(int index, int count, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs2svNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs2svNV(uint index, int count, short[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs3dvNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttribs3dvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs3dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs3dvNV(int index, int count, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs3dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs3dvNV(uint index, int count, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs3dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs3dvNV(int index, int count, double[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs3dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs3dvNV(uint index, int count, double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs3fvNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttribs3fvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs3fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs3fvNV(int index, int count, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs3fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs3fvNV(uint index, int count, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs3fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs3fvNV(int index, int count, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs3fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs3fvNV(uint index, int count, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs3svNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttribs3svNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs3svNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs3svNV(int index, int count, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs3svNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs3svNV(uint index, int count, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs3svNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs3svNV(int index, int count, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs3svNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs3svNV(uint index, int count, short[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4dvNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttribs4dvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs4dvNV(int index, int count, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs4dvNV(uint index, int count, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs4dvNV(int index, int count, double[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4dvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs4dvNV(uint index, int count, double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4fvNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttribs4fvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs4fvNV(int index, int count, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs4fvNV(uint index, int count, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs4fvNV(int index, int count, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4fvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs4fvNV(uint index, int count, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4svNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttribs4svNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4svNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs4svNV(int index, int count, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4svNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs4svNV(uint index, int count, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4svNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs4svNV(int index, int count, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4svNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs4svNV(uint index, int count, short[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4ubvNV")]
        public static IntPtr ext__GL_NV_vertex_program__glVertexAttribs4ubvNV = IntPtr.Zero;

        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4ubvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs4ubvNV(int index, int count, ref byte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4ubvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs4ubvNV(uint index, int count, ref byte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4ubvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs4ubvNV(int index, int count, byte[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4ubvNV"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribs4ubvNV(uint index, int count, byte[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_PGI_misc_hints", "glHintPGI")]
        public static IntPtr ext__GL_PGI_misc_hints__glHintPGI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_PGI_misc_hints", "glHintPGI"), SuppressUnmanagedCodeSecurity]
        public static void glHintPGI(int target, int mode)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIS_detail_texture", "glDetailTexFuncSGIS")]
        public static IntPtr ext__GL_SGIS_detail_texture__glDetailTexFuncSGIS = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIS_detail_texture", "glDetailTexFuncSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glDetailTexFuncSGIS(int target, int n, ref float points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_detail_texture", "glDetailTexFuncSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glDetailTexFuncSGIS(int target, int n, float[] points)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIS_detail_texture", "glGetDetailTexFuncSGIS")]
        public static IntPtr ext__GL_SGIS_detail_texture__glGetDetailTexFuncSGIS = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIS_detail_texture", "glGetDetailTexFuncSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glGetDetailTexFuncSGIS(int target, out float points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_detail_texture", "glGetDetailTexFuncSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glGetDetailTexFuncSGIS(int target, [Out] float[] points)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIS_fog_function", "glFogFuncSGIS")]
        public static IntPtr ext__GL_SGIS_fog_function__glFogFuncSGIS = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIS_fog_function", "glFogFuncSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glFogFuncSGIS(int n, ref float points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_fog_function", "glFogFuncSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glFogFuncSGIS(int n, float[] points)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIS_fog_function", "glGetFogFuncSGIS")]
        public static IntPtr ext__GL_SGIS_fog_function__glGetFogFuncSGIS = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIS_fog_function", "glGetFogFuncSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glGetFogFuncSGIS(out float points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_fog_function", "glGetFogFuncSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glGetFogFuncSGIS([Out] float[] points)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIS_multisample", "glSampleMaskSGIS")]
        public static IntPtr ext__GL_SGIS_multisample__glSampleMaskSGIS = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIS_multisample", "glSampleMaskSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glSampleMaskSGIS(float value, int invert)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_multisample", "glSampleMaskSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glSampleMaskSGIS(float value, bool invert)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIS_multisample", "glSamplePatternSGIS")]
        public static IntPtr ext__GL_SGIS_multisample__glSamplePatternSGIS = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIS_multisample", "glSamplePatternSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glSamplePatternSGIS(int pattern)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIS_pixel_texture", "glPixelTexGenParameteriSGIS")]
        public static IntPtr ext__GL_SGIS_pixel_texture__glPixelTexGenParameteriSGIS = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIS_pixel_texture", "glPixelTexGenParameteriSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glPixelTexGenParameteriSGIS(int pname, int param)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIS_pixel_texture", "glPixelTexGenParameterivSGIS")]
        public static IntPtr ext__GL_SGIS_pixel_texture__glPixelTexGenParameterivSGIS = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIS_pixel_texture", "glPixelTexGenParameterivSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glPixelTexGenParameterivSGIS(int pname, ref int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_pixel_texture", "glPixelTexGenParameterivSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glPixelTexGenParameterivSGIS(int pname, int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIS_pixel_texture", "glPixelTexGenParameterfSGIS")]
        public static IntPtr ext__GL_SGIS_pixel_texture__glPixelTexGenParameterfSGIS = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIS_pixel_texture", "glPixelTexGenParameterfSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glPixelTexGenParameterfSGIS(int pname, float param)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIS_pixel_texture", "glPixelTexGenParameterfvSGIS")]
        public static IntPtr ext__GL_SGIS_pixel_texture__glPixelTexGenParameterfvSGIS = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIS_pixel_texture", "glPixelTexGenParameterfvSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glPixelTexGenParameterfvSGIS(int pname, ref float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_pixel_texture", "glPixelTexGenParameterfvSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glPixelTexGenParameterfvSGIS(int pname, float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIS_pixel_texture", "glGetPixelTexGenParameterivSGIS")]
        public static IntPtr ext__GL_SGIS_pixel_texture__glGetPixelTexGenParameterivSGIS = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIS_pixel_texture", "glGetPixelTexGenParameterivSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glGetPixelTexGenParameterivSGIS(int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_pixel_texture", "glGetPixelTexGenParameterivSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glGetPixelTexGenParameterivSGIS(int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIS_pixel_texture", "glGetPixelTexGenParameterfvSGIS")]
        public static IntPtr ext__GL_SGIS_pixel_texture__glGetPixelTexGenParameterfvSGIS = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIS_pixel_texture", "glGetPixelTexGenParameterfvSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glGetPixelTexGenParameterfvSGIS(int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_pixel_texture", "glGetPixelTexGenParameterfvSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glGetPixelTexGenParameterfvSGIS(int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIS_point_parameters", "glPointParameterfSGIS")]
        public static IntPtr ext__GL_SGIS_point_parameters__glPointParameterfSGIS = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIS_point_parameters", "glPointParameterfSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glPointParameterfSGIS(int pname, float param)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIS_point_parameters", "glPointParameterfvSGIS")]
        public static IntPtr ext__GL_SGIS_point_parameters__glPointParameterfvSGIS = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIS_point_parameters", "glPointParameterfvSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glPointParameterfvSGIS(int pname, ref float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_point_parameters", "glPointParameterfvSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glPointParameterfvSGIS(int pname, float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIS_sharpen_texture", "glSharpenTexFuncSGIS")]
        public static IntPtr ext__GL_SGIS_sharpen_texture__glSharpenTexFuncSGIS = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIS_sharpen_texture", "glSharpenTexFuncSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glSharpenTexFuncSGIS(int target, int n, ref float points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_sharpen_texture", "glSharpenTexFuncSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glSharpenTexFuncSGIS(int target, int n, float[] points)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIS_sharpen_texture", "glGetSharpenTexFuncSGIS")]
        public static IntPtr ext__GL_SGIS_sharpen_texture__glGetSharpenTexFuncSGIS = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIS_sharpen_texture", "glGetSharpenTexFuncSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glGetSharpenTexFuncSGIS(int target, out float points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_sharpen_texture", "glGetSharpenTexFuncSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glGetSharpenTexFuncSGIS(int target, [Out] float[] points)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS")]
        public static IntPtr ext__GL_SGIS_texture4D__glTexImage4DSGIS = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, bool[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, byte[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, short[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, int[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, float[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, double[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, string pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, IntPtr pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, ref sbyte pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, sbyte[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, sbyte[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, sbyte[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, ref ushort pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, ushort[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, ushort[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, ushort[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, ref uint pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, uint[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, uint[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, uint[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, ref bool pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, bool[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, bool[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, ref byte pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, byte[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, byte[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, ref short pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, short[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, short[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, ref int pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, int[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, int[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, ref float pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, float[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, float[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, ref double pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, double[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, double[, ,] pixels)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS")]
        public static IntPtr ext__GL_SGIS_texture4D__glTexSubImage4DSGIS = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, bool[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, byte[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, short[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, int[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, float[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, double[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, string pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, IntPtr pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, ref sbyte pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, sbyte[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, sbyte[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, sbyte[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, ref ushort pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, ushort[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, ushort[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, ushort[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, ref uint pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, uint[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, uint[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, uint[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, ref bool pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, bool[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, bool[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, ref byte pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, byte[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, byte[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, ref short pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, short[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, short[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, ref int pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, int[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, int[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, ref float pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, float[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, float[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, ref double pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, double[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, double[, ,] pixels)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIS_texture_color_mask", "glTextureColorMaskSGIS")]
        public static IntPtr ext__GL_SGIS_texture_color_mask__glTextureColorMaskSGIS = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIS_texture_color_mask", "glTextureColorMaskSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTextureColorMaskSGIS(int red, int green, int blue, int alpha)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture_color_mask", "glTextureColorMaskSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTextureColorMaskSGIS(bool red, int green, int blue, int alpha)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture_color_mask", "glTextureColorMaskSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTextureColorMaskSGIS(int red, bool green, int blue, int alpha)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture_color_mask", "glTextureColorMaskSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTextureColorMaskSGIS(bool red, bool green, int blue, int alpha)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture_color_mask", "glTextureColorMaskSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTextureColorMaskSGIS(int red, int green, bool blue, int alpha)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture_color_mask", "glTextureColorMaskSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTextureColorMaskSGIS(bool red, int green, bool blue, int alpha)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture_color_mask", "glTextureColorMaskSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTextureColorMaskSGIS(int red, bool green, bool blue, int alpha)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture_color_mask", "glTextureColorMaskSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTextureColorMaskSGIS(bool red, bool green, bool blue, int alpha)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture_color_mask", "glTextureColorMaskSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTextureColorMaskSGIS(int red, int green, int blue, bool alpha)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture_color_mask", "glTextureColorMaskSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTextureColorMaskSGIS(bool red, int green, int blue, bool alpha)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture_color_mask", "glTextureColorMaskSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTextureColorMaskSGIS(int red, bool green, int blue, bool alpha)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture_color_mask", "glTextureColorMaskSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTextureColorMaskSGIS(bool red, bool green, int blue, bool alpha)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture_color_mask", "glTextureColorMaskSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTextureColorMaskSGIS(int red, int green, bool blue, bool alpha)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture_color_mask", "glTextureColorMaskSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTextureColorMaskSGIS(bool red, int green, bool blue, bool alpha)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture_color_mask", "glTextureColorMaskSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTextureColorMaskSGIS(int red, bool green, bool blue, bool alpha)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture_color_mask", "glTextureColorMaskSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTextureColorMaskSGIS(bool red, bool green, bool blue, bool alpha)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIS_texture_filter4", "glGetTexFilterFuncSGIS")]
        public static IntPtr ext__GL_SGIS_texture_filter4__glGetTexFilterFuncSGIS = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIS_texture_filter4", "glGetTexFilterFuncSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glGetTexFilterFuncSGIS(int target, int filter, out float weights)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture_filter4", "glGetTexFilterFuncSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glGetTexFilterFuncSGIS(int target, int filter, [Out] float[] weights)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIS_texture_filter4", "glTexFilterFuncSGIS")]
        public static IntPtr ext__GL_SGIS_texture_filter4__glTexFilterFuncSGIS = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIS_texture_filter4", "glTexFilterFuncSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexFilterFuncSGIS(int target, int filter, int n, ref float weights)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIS_texture_filter4", "glTexFilterFuncSGIS"), SuppressUnmanagedCodeSecurity]
        public static void glTexFilterFuncSGIS(int target, int filter, int n, float[] weights)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_async", "glAsyncMarkerSGIX")]
        public static IntPtr ext__GL_SGIX_async__glAsyncMarkerSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_async", "glAsyncMarkerSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glAsyncMarkerSGIX(int marker)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_async", "glAsyncMarkerSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glAsyncMarkerSGIX(uint marker)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_async", "glFinishAsyncSGIX")]
        public static IntPtr ext__GL_SGIX_async__glFinishAsyncSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_async", "glFinishAsyncSGIX"), SuppressUnmanagedCodeSecurity]
        public static int glFinishAsyncSGIX(out int markerp)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_async", "glFinishAsyncSGIX"), SuppressUnmanagedCodeSecurity]
        public static int glFinishAsyncSGIX([Out] int[] markerp)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_async", "glFinishAsyncSGIX"), SuppressUnmanagedCodeSecurity]
        public static int glFinishAsyncSGIX(out uint markerp)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_async", "glFinishAsyncSGIX"), SuppressUnmanagedCodeSecurity]
        public static int glFinishAsyncSGIX([Out] uint[] markerp)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_async", "glPollAsyncSGIX")]
        public static IntPtr ext__GL_SGIX_async__glPollAsyncSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_async", "glPollAsyncSGIX"), SuppressUnmanagedCodeSecurity]
        public static int glPollAsyncSGIX(out int markerp)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_async", "glPollAsyncSGIX"), SuppressUnmanagedCodeSecurity]
        public static int glPollAsyncSGIX([Out] int[] markerp)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_async", "glPollAsyncSGIX"), SuppressUnmanagedCodeSecurity]
        public static int glPollAsyncSGIX(out uint markerp)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_async", "glPollAsyncSGIX"), SuppressUnmanagedCodeSecurity]
        public static int glPollAsyncSGIX([Out] uint[] markerp)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_async", "glGenAsyncMarkersSGIX")]
        public static IntPtr ext__GL_SGIX_async__glGenAsyncMarkersSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_async", "glGenAsyncMarkersSGIX"), SuppressUnmanagedCodeSecurity]
        public static int glGenAsyncMarkersSGIX(int range)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_async", "glDeleteAsyncMarkersSGIX")]
        public static IntPtr ext__GL_SGIX_async__glDeleteAsyncMarkersSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_async", "glDeleteAsyncMarkersSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteAsyncMarkersSGIX(int marker, int range)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_async", "glDeleteAsyncMarkersSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteAsyncMarkersSGIX(uint marker, int range)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_async", "glIsAsyncMarkerSGIX")]
        public static IntPtr ext__GL_SGIX_async__glIsAsyncMarkerSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_async", "glIsAsyncMarkerSGIX"), SuppressUnmanagedCodeSecurity]
        public static int glIsAsyncMarkerSGIX(int marker)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_async", "glIsAsyncMarkerSGIX"), SuppressUnmanagedCodeSecurity]
        public static int glIsAsyncMarkerSGIX(uint marker)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_flush_raster", "glFlushRasterSGIX")]
        public static IntPtr ext__GL_SGIX_flush_raster__glFlushRasterSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_flush_raster", "glFlushRasterSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glFlushRasterSGIX()
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentColorMaterialSGIX")]
        public static IntPtr ext__GL_SGIX_fragment_lighting__glFragmentColorMaterialSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentColorMaterialSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glFragmentColorMaterialSGIX(int face, int mode)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightfSGIX")]
        public static IntPtr ext__GL_SGIX_fragment_lighting__glFragmentLightfSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightfSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glFragmentLightfSGIX(int light, int pname, float param)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightfvSGIX")]
        public static IntPtr ext__GL_SGIX_fragment_lighting__glFragmentLightfvSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightfvSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glFragmentLightfvSGIX(int light, int pname, ref float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightfvSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glFragmentLightfvSGIX(int light, int pname, float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightiSGIX")]
        public static IntPtr ext__GL_SGIX_fragment_lighting__glFragmentLightiSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightiSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glFragmentLightiSGIX(int light, int pname, int param)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightivSGIX")]
        public static IntPtr ext__GL_SGIX_fragment_lighting__glFragmentLightivSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightivSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glFragmentLightivSGIX(int light, int pname, ref int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightivSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glFragmentLightivSGIX(int light, int pname, int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightModelfSGIX")]
        public static IntPtr ext__GL_SGIX_fragment_lighting__glFragmentLightModelfSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightModelfSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glFragmentLightModelfSGIX(int pname, float param)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightModelfvSGIX")]
        public static IntPtr ext__GL_SGIX_fragment_lighting__glFragmentLightModelfvSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightModelfvSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glFragmentLightModelfvSGIX(int pname, ref float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightModelfvSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glFragmentLightModelfvSGIX(int pname, float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightModeliSGIX")]
        public static IntPtr ext__GL_SGIX_fragment_lighting__glFragmentLightModeliSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightModeliSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glFragmentLightModeliSGIX(int pname, int param)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightModelivSGIX")]
        public static IntPtr ext__GL_SGIX_fragment_lighting__glFragmentLightModelivSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightModelivSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glFragmentLightModelivSGIX(int pname, ref int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightModelivSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glFragmentLightModelivSGIX(int pname, int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentMaterialfSGIX")]
        public static IntPtr ext__GL_SGIX_fragment_lighting__glFragmentMaterialfSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentMaterialfSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glFragmentMaterialfSGIX(int face, int pname, float param)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentMaterialfvSGIX")]
        public static IntPtr ext__GL_SGIX_fragment_lighting__glFragmentMaterialfvSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentMaterialfvSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glFragmentMaterialfvSGIX(int face, int pname, ref float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentMaterialfvSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glFragmentMaterialfvSGIX(int face, int pname, float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentMaterialiSGIX")]
        public static IntPtr ext__GL_SGIX_fragment_lighting__glFragmentMaterialiSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentMaterialiSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glFragmentMaterialiSGIX(int face, int pname, int param)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentMaterialivSGIX")]
        public static IntPtr ext__GL_SGIX_fragment_lighting__glFragmentMaterialivSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentMaterialivSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glFragmentMaterialivSGIX(int face, int pname, ref int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentMaterialivSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glFragmentMaterialivSGIX(int face, int pname, int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glGetFragmentLightfvSGIX")]
        public static IntPtr ext__GL_SGIX_fragment_lighting__glGetFragmentLightfvSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glGetFragmentLightfvSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glGetFragmentLightfvSGIX(int light, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glGetFragmentLightfvSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glGetFragmentLightfvSGIX(int light, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glGetFragmentLightivSGIX")]
        public static IntPtr ext__GL_SGIX_fragment_lighting__glGetFragmentLightivSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glGetFragmentLightivSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glGetFragmentLightivSGIX(int light, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glGetFragmentLightivSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glGetFragmentLightivSGIX(int light, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glGetFragmentMaterialfvSGIX")]
        public static IntPtr ext__GL_SGIX_fragment_lighting__glGetFragmentMaterialfvSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glGetFragmentMaterialfvSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glGetFragmentMaterialfvSGIX(int face, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glGetFragmentMaterialfvSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glGetFragmentMaterialfvSGIX(int face, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glGetFragmentMaterialivSGIX")]
        public static IntPtr ext__GL_SGIX_fragment_lighting__glGetFragmentMaterialivSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glGetFragmentMaterialivSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glGetFragmentMaterialivSGIX(int face, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glGetFragmentMaterialivSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glGetFragmentMaterialivSGIX(int face, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glLightEnviSGIX")]
        public static IntPtr ext__GL_SGIX_fragment_lighting__glLightEnviSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glLightEnviSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glLightEnviSGIX(int pname, int param)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_framezoom", "glFrameZoomSGIX")]
        public static IntPtr ext__GL_SGIX_framezoom__glFrameZoomSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_framezoom", "glFrameZoomSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glFrameZoomSGIX(int factor)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_igloo_interface", "glIglooInterfaceSGIX")]
        public static IntPtr ext__GL_SGIX_igloo_interface__glIglooInterfaceSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_igloo_interface", "glIglooInterfaceSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glIglooInterfaceSGIX(int pname, ref IntPtr arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_igloo_interface", "glIglooInterfaceSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glIglooInterfaceSGIX(int pname, IntPtr[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_instruments", "glGetInstrumentsSGIX")]
        public static IntPtr ext__GL_SGIX_instruments__glGetInstrumentsSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_instruments", "glGetInstrumentsSGIX"), SuppressUnmanagedCodeSecurity]
        public static int glGetInstrumentsSGIX()
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_instruments", "glInstrumentsBufferSGIX")]
        public static IntPtr ext__GL_SGIX_instruments__glInstrumentsBufferSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_instruments", "glInstrumentsBufferSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glInstrumentsBufferSGIX(int size, out int buffer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_instruments", "glInstrumentsBufferSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glInstrumentsBufferSGIX(int size, [Out] int[] buffer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_instruments", "glPollInstrumentsSGIX")]
        public static IntPtr ext__GL_SGIX_instruments__glPollInstrumentsSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_instruments", "glPollInstrumentsSGIX"), SuppressUnmanagedCodeSecurity]
        public static int glPollInstrumentsSGIX(out int marker_p)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_instruments", "glPollInstrumentsSGIX"), SuppressUnmanagedCodeSecurity]
        public static int glPollInstrumentsSGIX([Out] int[] marker_p)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_instruments", "glReadInstrumentsSGIX")]
        public static IntPtr ext__GL_SGIX_instruments__glReadInstrumentsSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_instruments", "glReadInstrumentsSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glReadInstrumentsSGIX(int marker)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_instruments", "glStartInstrumentsSGIX")]
        public static IntPtr ext__GL_SGIX_instruments__glStartInstrumentsSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_instruments", "glStartInstrumentsSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glStartInstrumentsSGIX()
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_instruments", "glStopInstrumentsSGIX")]
        public static IntPtr ext__GL_SGIX_instruments__glStopInstrumentsSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_instruments", "glStopInstrumentsSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glStopInstrumentsSGIX(int marker)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_list_priority", "glGetListParameterfvSGIX")]
        public static IntPtr ext__GL_SGIX_list_priority__glGetListParameterfvSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_list_priority", "glGetListParameterfvSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glGetListParameterfvSGIX(int list, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_list_priority", "glGetListParameterfvSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glGetListParameterfvSGIX(uint list, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_list_priority", "glGetListParameterfvSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glGetListParameterfvSGIX(int list, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_list_priority", "glGetListParameterfvSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glGetListParameterfvSGIX(uint list, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_list_priority", "glGetListParameterivSGIX")]
        public static IntPtr ext__GL_SGIX_list_priority__glGetListParameterivSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_list_priority", "glGetListParameterivSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glGetListParameterivSGIX(int list, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_list_priority", "glGetListParameterivSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glGetListParameterivSGIX(uint list, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_list_priority", "glGetListParameterivSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glGetListParameterivSGIX(int list, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_list_priority", "glGetListParameterivSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glGetListParameterivSGIX(uint list, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_list_priority", "glListParameterfSGIX")]
        public static IntPtr ext__GL_SGIX_list_priority__glListParameterfSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_list_priority", "glListParameterfSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glListParameterfSGIX(int list, int pname, float param)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_list_priority", "glListParameterfSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glListParameterfSGIX(uint list, int pname, float param)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_list_priority", "glListParameterfvSGIX")]
        public static IntPtr ext__GL_SGIX_list_priority__glListParameterfvSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_list_priority", "glListParameterfvSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glListParameterfvSGIX(int list, int pname, ref float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_list_priority", "glListParameterfvSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glListParameterfvSGIX(uint list, int pname, ref float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_list_priority", "glListParameterfvSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glListParameterfvSGIX(int list, int pname, float[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_list_priority", "glListParameterfvSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glListParameterfvSGIX(uint list, int pname, float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_list_priority", "glListParameteriSGIX")]
        public static IntPtr ext__GL_SGIX_list_priority__glListParameteriSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_list_priority", "glListParameteriSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glListParameteriSGIX(int list, int pname, int param)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_list_priority", "glListParameteriSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glListParameteriSGIX(uint list, int pname, int param)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_list_priority", "glListParameterivSGIX")]
        public static IntPtr ext__GL_SGIX_list_priority__glListParameterivSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_list_priority", "glListParameterivSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glListParameterivSGIX(int list, int pname, ref int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_list_priority", "glListParameterivSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glListParameterivSGIX(uint list, int pname, ref int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_list_priority", "glListParameterivSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glListParameterivSGIX(int list, int pname, int[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_list_priority", "glListParameterivSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glListParameterivSGIX(uint list, int pname, int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_pixel_texture", "glPixelTexGenSGIX")]
        public static IntPtr ext__GL_SGIX_pixel_texture__glPixelTexGenSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_pixel_texture", "glPixelTexGenSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glPixelTexGenSGIX(int mode)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_polynomial_ffd", "glDeformationMap3dSGIX")]
        public static IntPtr ext__GL_SGIX_polynomial_ffd__glDeformationMap3dSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_polynomial_ffd", "glDeformationMap3dSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glDeformationMap3dSGIX(int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, ref double points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_polynomial_ffd", "glDeformationMap3dSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glDeformationMap3dSGIX(int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, double[] points)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_polynomial_ffd", "glDeformationMap3fSGIX")]
        public static IntPtr ext__GL_SGIX_polynomial_ffd__glDeformationMap3fSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_polynomial_ffd", "glDeformationMap3fSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glDeformationMap3fSGIX(int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, ref float points)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_polynomial_ffd", "glDeformationMap3fSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glDeformationMap3fSGIX(int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, float[] points)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_polynomial_ffd", "glDeformSGIX")]
        public static IntPtr ext__GL_SGIX_polynomial_ffd__glDeformSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_polynomial_ffd", "glDeformSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glDeformSGIX(int mask)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_polynomial_ffd", "glDeformSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glDeformSGIX(uint mask)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_polynomial_ffd", "glLoadIdentityDeformationMapSGIX")]
        public static IntPtr ext__GL_SGIX_polynomial_ffd__glLoadIdentityDeformationMapSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_polynomial_ffd", "glLoadIdentityDeformationMapSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glLoadIdentityDeformationMapSGIX(int mask)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_polynomial_ffd", "glLoadIdentityDeformationMapSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glLoadIdentityDeformationMapSGIX(uint mask)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_reference_plane", "glReferencePlaneSGIX")]
        public static IntPtr ext__GL_SGIX_reference_plane__glReferencePlaneSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_reference_plane", "glReferencePlaneSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glReferencePlaneSGIX(ref double equation)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_reference_plane", "glReferencePlaneSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glReferencePlaneSGIX(double[] equation)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_sprite", "glSpriteParameterfSGIX")]
        public static IntPtr ext__GL_SGIX_sprite__glSpriteParameterfSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_sprite", "glSpriteParameterfSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glSpriteParameterfSGIX(int pname, float param)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_sprite", "glSpriteParameterfvSGIX")]
        public static IntPtr ext__GL_SGIX_sprite__glSpriteParameterfvSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_sprite", "glSpriteParameterfvSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glSpriteParameterfvSGIX(int pname, ref float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_sprite", "glSpriteParameterfvSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glSpriteParameterfvSGIX(int pname, float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_sprite", "glSpriteParameteriSGIX")]
        public static IntPtr ext__GL_SGIX_sprite__glSpriteParameteriSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_sprite", "glSpriteParameteriSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glSpriteParameteriSGIX(int pname, int param)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_sprite", "glSpriteParameterivSGIX")]
        public static IntPtr ext__GL_SGIX_sprite__glSpriteParameterivSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_sprite", "glSpriteParameterivSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glSpriteParameterivSGIX(int pname, ref int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGIX_sprite", "glSpriteParameterivSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glSpriteParameterivSGIX(int pname, int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGIX_tag_sample_buffer", "glTagSampleBufferSGIX")]
        public static IntPtr ext__GL_SGIX_tag_sample_buffer__glTagSampleBufferSGIX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGIX_tag_sample_buffer", "glTagSampleBufferSGIX"), SuppressUnmanagedCodeSecurity]
        public static void glTagSampleBufferSGIX()
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI")]
        public static IntPtr ext__GL_SGI_color_table__glColorTableSGI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, bool[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, byte[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, short[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, int[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, float[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, double[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, string table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, IntPtr table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, ref sbyte table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, sbyte[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, sbyte[,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, sbyte[, ,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, ref ushort table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, ushort[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, ushort[,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, ushort[, ,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, ref uint table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, uint[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, uint[,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, uint[, ,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, ref bool table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, bool[,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, bool[, ,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, ref byte table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, byte[,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, byte[, ,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, ref short table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, short[,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, short[, ,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, ref int table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, int[,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, int[, ,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, ref float table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, float[,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, float[, ,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, ref double table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, double[,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableSGI(int target, int internalformat, int width, int format, int type, double[, ,] table)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableParameterfvSGI")]
        public static IntPtr ext__GL_SGI_color_table__glColorTableParameterfvSGI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableParameterfvSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableParameterfvSGI(int target, int pname, ref float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableParameterfvSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableParameterfvSGI(int target, int pname, float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableParameterivSGI")]
        public static IntPtr ext__GL_SGI_color_table__glColorTableParameterivSGI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableParameterivSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableParameterivSGI(int target, int pname, ref int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableParameterivSGI"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableParameterivSGI(int target, int pname, int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGI_color_table", "glCopyColorTableSGI")]
        public static IntPtr ext__GL_SGI_color_table__glCopyColorTableSGI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGI_color_table", "glCopyColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glCopyColorTableSGI(int target, int internalformat, int x, int y, int width)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI")]
        public static IntPtr ext__GL_SGI_color_table__glGetColorTableSGI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableSGI(int target, int format, int type, [Out] bool[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableSGI(int target, int format, int type, [Out] byte[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableSGI(int target, int format, int type, [Out] short[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableSGI(int target, int format, int type, [Out] int[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableSGI(int target, int format, int type, [Out] float[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableSGI(int target, int format, int type, [Out] double[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableSGI(int target, int format, int type, IntPtr table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableSGI(int target, int format, int type, out bool table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableSGI(int target, int format, int type, out byte table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableSGI(int target, int format, int type, out short table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableSGI(int target, int format, int type, out int table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableSGI(int target, int format, int type, out float table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableSGI(int target, int format, int type, out double table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableSGI(int target, int format, int type, out sbyte table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableSGI(int target, int format, int type, [Out] sbyte[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableSGI(int target, int format, int type, out ushort table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableSGI(int target, int format, int type, [Out] ushort[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableSGI(int target, int format, int type, out uint table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableSGI(int target, int format, int type, [Out] uint[] table)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableParameterfvSGI")]
        public static IntPtr ext__GL_SGI_color_table__glGetColorTableParameterfvSGI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableParameterfvSGI"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableParameterfvSGI(int target, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableParameterfvSGI"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableParameterfvSGI(int target, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableParameterivSGI")]
        public static IntPtr ext__GL_SGI_color_table__glGetColorTableParameterivSGI = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableParameterivSGI"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableParameterivSGI(int target, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableParameterivSGI"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableParameterivSGI(int target, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUNX_constant_data", "glFinishTextureSUNX")]
        public static IntPtr ext__GL_SUNX_constant_data__glFinishTextureSUNX = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUNX_constant_data", "glFinishTextureSUNX"), SuppressUnmanagedCodeSecurity]
        public static void glFinishTextureSUNX()
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactorbSUN")]
        public static IntPtr ext__GL_SUN_global_alpha__glGlobalAlphaFactorbSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactorbSUN"), SuppressUnmanagedCodeSecurity]
        public static void glGlobalAlphaFactorbSUN(byte factor)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactorbSUN"), SuppressUnmanagedCodeSecurity]
        public static void glGlobalAlphaFactorbSUN(sbyte factor)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactorsSUN")]
        public static IntPtr ext__GL_SUN_global_alpha__glGlobalAlphaFactorsSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactorsSUN"), SuppressUnmanagedCodeSecurity]
        public static void glGlobalAlphaFactorsSUN(short factor)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactoriSUN")]
        public static IntPtr ext__GL_SUN_global_alpha__glGlobalAlphaFactoriSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactoriSUN"), SuppressUnmanagedCodeSecurity]
        public static void glGlobalAlphaFactoriSUN(int factor)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactorfSUN")]
        public static IntPtr ext__GL_SUN_global_alpha__glGlobalAlphaFactorfSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactorfSUN"), SuppressUnmanagedCodeSecurity]
        public static void glGlobalAlphaFactorfSUN(float factor)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactordSUN")]
        public static IntPtr ext__GL_SUN_global_alpha__glGlobalAlphaFactordSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactordSUN"), SuppressUnmanagedCodeSecurity]
        public static void glGlobalAlphaFactordSUN(double factor)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactorubSUN")]
        public static IntPtr ext__GL_SUN_global_alpha__glGlobalAlphaFactorubSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactorubSUN"), SuppressUnmanagedCodeSecurity]
        public static void glGlobalAlphaFactorubSUN(byte factor)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactorusSUN")]
        public static IntPtr ext__GL_SUN_global_alpha__glGlobalAlphaFactorusSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactorusSUN"), SuppressUnmanagedCodeSecurity]
        public static void glGlobalAlphaFactorusSUN(short factor)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactorusSUN"), SuppressUnmanagedCodeSecurity]
        public static void glGlobalAlphaFactorusSUN(ushort factor)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactoruiSUN")]
        public static IntPtr ext__GL_SUN_global_alpha__glGlobalAlphaFactoruiSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactoruiSUN"), SuppressUnmanagedCodeSecurity]
        public static void glGlobalAlphaFactoruiSUN(int factor)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactoruiSUN"), SuppressUnmanagedCodeSecurity]
        public static void glGlobalAlphaFactoruiSUN(uint factor)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_mesh_array", "glDrawMeshArraysSUN")]
        public static IntPtr ext__GL_SUN_mesh_array__glDrawMeshArraysSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_mesh_array", "glDrawMeshArraysSUN"), SuppressUnmanagedCodeSecurity]
        public static void glDrawMeshArraysSUN(int mode, int first, int count, int width)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeuiSUN")]
        public static IntPtr ext__GL_SUN_triangle_list__glReplacementCodeuiSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeuiSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiSUN(int code)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeuiSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiSUN(uint code)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeusSUN")]
        public static IntPtr ext__GL_SUN_triangle_list__glReplacementCodeusSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeusSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeusSUN(short code)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeusSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeusSUN(ushort code)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeubSUN")]
        public static IntPtr ext__GL_SUN_triangle_list__glReplacementCodeubSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeubSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeubSUN(byte code)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeuivSUN")]
        public static IntPtr ext__GL_SUN_triangle_list__glReplacementCodeuivSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeuivSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuivSUN(ref int code)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeuivSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuivSUN(int[] code)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeuivSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuivSUN(ref uint code)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeuivSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuivSUN(uint[] code)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeusvSUN")]
        public static IntPtr ext__GL_SUN_triangle_list__glReplacementCodeusvSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeusvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeusvSUN(ref short code)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeusvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeusvSUN(short[] code)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeusvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeusvSUN(ref ushort code)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeusvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeusvSUN(ushort[] code)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeubvSUN")]
        public static IntPtr ext__GL_SUN_triangle_list__glReplacementCodeubvSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeubvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeubvSUN(ref byte code)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeubvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeubvSUN(byte[] code)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN")]
        public static IntPtr ext__GL_SUN_triangle_list__glReplacementCodePointerSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, string pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, ref sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, sbyte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, sbyte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, ref ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, ushort[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, ushort[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, ref uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, uint[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, uint[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, uint[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, ref bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, bool[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, bool[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, ref byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, byte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, byte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, ref short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, short[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, short[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, ref int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, int[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, int[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, ref float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, float[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, float[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, ref double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, double[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodePointerSUN(int type, int stride, double[, ,] pointer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glColor4ubVertex2fSUN")]
        public static IntPtr ext__GL_SUN_vertex__glColor4ubVertex2fSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glColor4ubVertex2fSUN"), SuppressUnmanagedCodeSecurity]
        public static void glColor4ubVertex2fSUN(byte r, byte g, byte b, byte a, float x, float y)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glColor4ubVertex2fvSUN")]
        public static IntPtr ext__GL_SUN_vertex__glColor4ubVertex2fvSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glColor4ubVertex2fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glColor4ubVertex2fvSUN(ref byte c, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glColor4ubVertex2fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glColor4ubVertex2fvSUN(byte[] c, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glColor4ubVertex2fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glColor4ubVertex2fvSUN(ref byte c, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glColor4ubVertex2fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glColor4ubVertex2fvSUN(byte[] c, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glColor4ubVertex3fSUN")]
        public static IntPtr ext__GL_SUN_vertex__glColor4ubVertex3fSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glColor4ubVertex3fSUN"), SuppressUnmanagedCodeSecurity]
        public static void glColor4ubVertex3fSUN(byte r, byte g, byte b, byte a, float x, float y, float z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glColor4ubVertex3fvSUN")]
        public static IntPtr ext__GL_SUN_vertex__glColor4ubVertex3fvSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glColor4ubVertex3fvSUN(ref byte c, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glColor4ubVertex3fvSUN(byte[] c, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glColor4ubVertex3fvSUN(ref byte c, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glColor4ubVertex3fvSUN(byte[] c, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glColor3fVertex3fSUN")]
        public static IntPtr ext__GL_SUN_vertex__glColor3fVertex3fSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glColor3fVertex3fSUN"), SuppressUnmanagedCodeSecurity]
        public static void glColor3fVertex3fSUN(float r, float g, float b, float x, float y, float z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glColor3fVertex3fvSUN")]
        public static IntPtr ext__GL_SUN_vertex__glColor3fVertex3fvSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glColor3fVertex3fvSUN(ref float c, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glColor3fVertex3fvSUN(float[] c, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glColor3fVertex3fvSUN(ref float c, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glColor3fVertex3fvSUN(float[] c, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glNormal3fVertex3fSUN")]
        public static IntPtr ext__GL_SUN_vertex__glNormal3fVertex3fSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glNormal3fVertex3fSUN"), SuppressUnmanagedCodeSecurity]
        public static void glNormal3fVertex3fSUN(float nx, float ny, float nz, float x, float y, float z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glNormal3fVertex3fvSUN")]
        public static IntPtr ext__GL_SUN_vertex__glNormal3fVertex3fvSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glNormal3fVertex3fvSUN(ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glNormal3fVertex3fvSUN(float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glNormal3fVertex3fvSUN(ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glNormal3fVertex3fvSUN(float[] n, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glColor4fNormal3fVertex3fSUN")]
        public static IntPtr ext__GL_SUN_vertex__glColor4fNormal3fVertex3fSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glColor4fNormal3fVertex3fSUN"), SuppressUnmanagedCodeSecurity]
        public static void glColor4fNormal3fVertex3fSUN(float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glColor4fNormal3fVertex3fvSUN")]
        public static IntPtr ext__GL_SUN_vertex__glColor4fNormal3fVertex3fvSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glColor4fNormal3fVertex3fvSUN(ref float c, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glColor4fNormal3fVertex3fvSUN(float[] c, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glColor4fNormal3fVertex3fvSUN(ref float c, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glColor4fNormal3fVertex3fvSUN(float[] c, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glColor4fNormal3fVertex3fvSUN(ref float c, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glColor4fNormal3fVertex3fvSUN(float[] c, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glColor4fNormal3fVertex3fvSUN(ref float c, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glColor4fNormal3fVertex3fvSUN(float[] c, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fVertex3fSUN")]
        public static IntPtr ext__GL_SUN_vertex__glTexCoord2fVertex3fSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fVertex3fSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fVertex3fSUN(float s, float t, float x, float y, float z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fVertex3fvSUN")]
        public static IntPtr ext__GL_SUN_vertex__glTexCoord2fVertex3fvSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fVertex3fvSUN(ref float tc, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fVertex3fvSUN(float[] tc, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fVertex3fvSUN(ref float tc, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fVertex3fvSUN(float[] tc, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fVertex4fSUN")]
        public static IntPtr ext__GL_SUN_vertex__glTexCoord4fVertex4fSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fVertex4fSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4fVertex4fSUN(float s, float t, float p, float q, float x, float y, float z, float w)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fVertex4fvSUN")]
        public static IntPtr ext__GL_SUN_vertex__glTexCoord4fVertex4fvSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fVertex4fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4fVertex4fvSUN(ref float tc, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fVertex4fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4fVertex4fvSUN(float[] tc, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fVertex4fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4fVertex4fvSUN(ref float tc, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fVertex4fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4fVertex4fvSUN(float[] tc, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4ubVertex3fSUN")]
        public static IntPtr ext__GL_SUN_vertex__glTexCoord2fColor4ubVertex3fSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4ubVertex3fSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fColor4ubVertex3fSUN(float s, float t, byte r, byte g, byte b, byte a, float x, float y, float z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4ubVertex3fvSUN")]
        public static IntPtr ext__GL_SUN_vertex__glTexCoord2fColor4ubVertex3fvSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fColor4ubVertex3fvSUN(ref float tc, ref byte c, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fColor4ubVertex3fvSUN(float[] tc, ref byte c, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fColor4ubVertex3fvSUN(ref float tc, byte[] c, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fColor4ubVertex3fvSUN(float[] tc, byte[] c, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fColor4ubVertex3fvSUN(ref float tc, ref byte c, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fColor4ubVertex3fvSUN(float[] tc, ref byte c, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fColor4ubVertex3fvSUN(ref float tc, byte[] c, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fColor4ubVertex3fvSUN(float[] tc, byte[] c, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor3fVertex3fSUN")]
        public static IntPtr ext__GL_SUN_vertex__glTexCoord2fColor3fVertex3fSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor3fVertex3fSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fColor3fVertex3fSUN(float s, float t, float r, float g, float b, float x, float y, float z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor3fVertex3fvSUN")]
        public static IntPtr ext__GL_SUN_vertex__glTexCoord2fColor3fVertex3fvSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fColor3fVertex3fvSUN(ref float tc, ref float c, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fColor3fVertex3fvSUN(float[] tc, ref float c, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fColor3fVertex3fvSUN(ref float tc, float[] c, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fColor3fVertex3fvSUN(float[] tc, float[] c, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fColor3fVertex3fvSUN(ref float tc, ref float c, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fColor3fVertex3fvSUN(float[] tc, ref float c, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fColor3fVertex3fvSUN(ref float tc, float[] c, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fColor3fVertex3fvSUN(float[] tc, float[] c, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fNormal3fVertex3fSUN")]
        public static IntPtr ext__GL_SUN_vertex__glTexCoord2fNormal3fVertex3fSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fNormal3fVertex3fSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fNormal3fVertex3fSUN(float s, float t, float nx, float ny, float nz, float x, float y, float z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fNormal3fVertex3fvSUN")]
        public static IntPtr ext__GL_SUN_vertex__glTexCoord2fNormal3fVertex3fvSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fNormal3fVertex3fvSUN(ref float tc, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fNormal3fVertex3fvSUN(float[] tc, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fNormal3fVertex3fvSUN(ref float tc, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fNormal3fVertex3fvSUN(float[] tc, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fNormal3fVertex3fvSUN(ref float tc, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fNormal3fVertex3fvSUN(float[] tc, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fNormal3fVertex3fvSUN(ref float tc, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fNormal3fVertex3fvSUN(float[] tc, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fSUN")]
        public static IntPtr ext__GL_SUN_vertex__glTexCoord2fColor4fNormal3fVertex3fSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fColor4fNormal3fVertex3fSUN(float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fvSUN")]
        public static IntPtr ext__GL_SUN_vertex__glTexCoord2fColor4fNormal3fVertex3fvSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(ref float tc, ref float c, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(float[] tc, ref float c, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(ref float tc, float[] c, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(float[] tc, float[] c, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(ref float tc, ref float c, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(float[] tc, ref float c, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(ref float tc, float[] c, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(float[] tc, float[] c, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(ref float tc, ref float c, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(float[] tc, ref float c, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(ref float tc, float[] c, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(float[] tc, float[] c, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(ref float tc, ref float c, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(float[] tc, ref float c, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(ref float tc, float[] c, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(float[] tc, float[] c, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fSUN")]
        public static IntPtr ext__GL_SUN_vertex__glTexCoord4fColor4fNormal3fVertex4fSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4fColor4fNormal3fVertex4fSUN(float s, float t, float p, float q, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z, float w)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fvSUN")]
        public static IntPtr ext__GL_SUN_vertex__glTexCoord4fColor4fNormal3fVertex4fvSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(ref float tc, ref float c, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(float[] tc, ref float c, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(ref float tc, float[] c, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(float[] tc, float[] c, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(ref float tc, ref float c, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(float[] tc, ref float c, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(ref float tc, float[] c, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(float[] tc, float[] c, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(ref float tc, ref float c, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(float[] tc, ref float c, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(ref float tc, float[] c, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(float[] tc, float[] c, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(ref float tc, ref float c, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(float[] tc, ref float c, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(ref float tc, float[] c, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(float[] tc, float[] c, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiVertex3fSUN")]
        public static IntPtr ext__GL_SUN_vertex__glReplacementCodeuiVertex3fSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiVertex3fSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiVertex3fSUN(int rc, float x, float y, float z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiVertex3fSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiVertex3fSUN(uint rc, float x, float y, float z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiVertex3fvSUN")]
        public static IntPtr ext__GL_SUN_vertex__glReplacementCodeuiVertex3fvSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiVertex3fvSUN(ref int rc, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiVertex3fvSUN(int[] rc, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiVertex3fvSUN(ref uint rc, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiVertex3fvSUN(uint[] rc, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiVertex3fvSUN(ref int rc, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiVertex3fvSUN(int[] rc, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiVertex3fvSUN(ref uint rc, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiVertex3fvSUN(uint[] rc, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fSUN")]
        public static IntPtr ext__GL_SUN_vertex__glReplacementCodeuiColor4ubVertex3fSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4ubVertex3fSUN(int rc, byte r, byte g, byte b, byte a, float x, float y, float z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4ubVertex3fSUN(uint rc, byte r, byte g, byte b, byte a, float x, float y, float z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fvSUN")]
        public static IntPtr ext__GL_SUN_vertex__glReplacementCodeuiColor4ubVertex3fvSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(ref int rc, ref byte c, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(int[] rc, ref byte c, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(ref uint rc, ref byte c, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(uint[] rc, ref byte c, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(ref int rc, byte[] c, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(int[] rc, byte[] c, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(ref uint rc, byte[] c, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(uint[] rc, byte[] c, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(ref int rc, ref byte c, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(int[] rc, ref byte c, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(ref uint rc, ref byte c, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(uint[] rc, ref byte c, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(ref int rc, byte[] c, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(int[] rc, byte[] c, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(ref uint rc, byte[] c, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(uint[] rc, byte[] c, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fSUN")]
        public static IntPtr ext__GL_SUN_vertex__glReplacementCodeuiColor3fVertex3fSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor3fVertex3fSUN(int rc, float r, float g, float b, float x, float y, float z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor3fVertex3fSUN(uint rc, float r, float g, float b, float x, float y, float z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fvSUN")]
        public static IntPtr ext__GL_SUN_vertex__glReplacementCodeuiColor3fVertex3fvSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor3fVertex3fvSUN(ref int rc, ref float c, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor3fVertex3fvSUN(int[] rc, ref float c, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor3fVertex3fvSUN(ref uint rc, ref float c, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor3fVertex3fvSUN(uint[] rc, ref float c, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor3fVertex3fvSUN(ref int rc, float[] c, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor3fVertex3fvSUN(int[] rc, float[] c, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor3fVertex3fvSUN(ref uint rc, float[] c, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor3fVertex3fvSUN(uint[] rc, float[] c, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor3fVertex3fvSUN(ref int rc, ref float c, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor3fVertex3fvSUN(int[] rc, ref float c, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor3fVertex3fvSUN(ref uint rc, ref float c, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor3fVertex3fvSUN(uint[] rc, ref float c, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor3fVertex3fvSUN(ref int rc, float[] c, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor3fVertex3fvSUN(int[] rc, float[] c, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor3fVertex3fvSUN(ref uint rc, float[] c, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor3fVertex3fvSUN(uint[] rc, float[] c, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fSUN")]
        public static IntPtr ext__GL_SUN_vertex__glReplacementCodeuiNormal3fVertex3fSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiNormal3fVertex3fSUN(int rc, float nx, float ny, float nz, float x, float y, float z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiNormal3fVertex3fSUN(uint rc, float nx, float ny, float nz, float x, float y, float z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fvSUN")]
        public static IntPtr ext__GL_SUN_vertex__glReplacementCodeuiNormal3fVertex3fvSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(ref int rc, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(int[] rc, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(ref uint rc, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(uint[] rc, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(ref int rc, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(int[] rc, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(ref uint rc, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(uint[] rc, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(ref int rc, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(int[] rc, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(ref uint rc, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(uint[] rc, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(ref int rc, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(int[] rc, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(ref uint rc, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(uint[] rc, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fSUN")]
        public static IntPtr ext__GL_SUN_vertex__glReplacementCodeuiColor4fNormal3fVertex3fSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4fNormal3fVertex3fSUN(int rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4fNormal3fVertex3fSUN(uint rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN")]
        public static IntPtr ext__GL_SUN_vertex__glReplacementCodeuiColor4fNormal3fVertex3fvSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref int rc, ref float c, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(int[] rc, ref float c, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref uint rc, ref float c, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(uint[] rc, ref float c, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref int rc, float[] c, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(int[] rc, float[] c, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref uint rc, float[] c, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(uint[] rc, float[] c, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref int rc, ref float c, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(int[] rc, ref float c, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref uint rc, ref float c, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(uint[] rc, ref float c, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref int rc, float[] c, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(int[] rc, float[] c, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref uint rc, float[] c, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(uint[] rc, float[] c, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref int rc, ref float c, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(int[] rc, ref float c, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref uint rc, ref float c, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(uint[] rc, ref float c, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref int rc, float[] c, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(int[] rc, float[] c, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref uint rc, float[] c, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(uint[] rc, float[] c, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref int rc, ref float c, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(int[] rc, ref float c, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref uint rc, ref float c, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(uint[] rc, ref float c, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref int rc, float[] c, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(int[] rc, float[] c, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref uint rc, float[] c, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(uint[] rc, float[] c, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fSUN")]
        public static IntPtr ext__GL_SUN_vertex__glReplacementCodeuiTexCoord2fVertex3fSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fVertex3fSUN(int rc, float s, float t, float x, float y, float z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fVertex3fSUN(uint rc, float s, float t, float x, float y, float z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fvSUN")]
        public static IntPtr ext__GL_SUN_vertex__glReplacementCodeuiTexCoord2fVertex3fvSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(ref int rc, ref float tc, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(int[] rc, ref float tc, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(ref uint rc, ref float tc, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(uint[] rc, ref float tc, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(ref int rc, float[] tc, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(int[] rc, float[] tc, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(ref uint rc, float[] tc, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(uint[] rc, float[] tc, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(ref int rc, ref float tc, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(int[] rc, ref float tc, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(ref uint rc, ref float tc, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(uint[] rc, ref float tc, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(ref int rc, float[] tc, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(int[] rc, float[] tc, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(ref uint rc, float[] tc, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(uint[] rc, float[] tc, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN")]
        public static IntPtr ext__GL_SUN_vertex__glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(int rc, float s, float t, float nx, float ny, float nz, float x, float y, float z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(uint rc, float s, float t, float nx, float ny, float nz, float x, float y, float z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN")]
        public static IntPtr ext__GL_SUN_vertex__glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref int rc, ref float tc, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(int[] rc, ref float tc, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref uint rc, ref float tc, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(uint[] rc, ref float tc, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref int rc, float[] tc, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(int[] rc, float[] tc, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref uint rc, float[] tc, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(uint[] rc, float[] tc, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref int rc, ref float tc, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(int[] rc, ref float tc, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref uint rc, ref float tc, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(uint[] rc, ref float tc, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref int rc, float[] tc, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(int[] rc, float[] tc, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref uint rc, float[] tc, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(uint[] rc, float[] tc, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref int rc, ref float tc, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(int[] rc, ref float tc, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref uint rc, ref float tc, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(uint[] rc, ref float tc, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref int rc, float[] tc, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(int[] rc, float[] tc, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref uint rc, float[] tc, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(uint[] rc, float[] tc, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref int rc, ref float tc, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(int[] rc, ref float tc, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref uint rc, ref float tc, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(uint[] rc, ref float tc, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref int rc, float[] tc, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(int[] rc, float[] tc, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref uint rc, float[] tc, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(uint[] rc, float[] tc, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN")]
        public static IntPtr ext__GL_SUN_vertex__glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(int rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(uint rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN")]
        public static IntPtr ext__GL_SUN_vertex__glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = IntPtr.Zero;

        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref int rc, ref float tc, ref float c, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(int[] rc, ref float tc, ref float c, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref uint rc, ref float tc, ref float c, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint[] rc, ref float tc, ref float c, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref int rc, float[] tc, ref float c, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(int[] rc, float[] tc, ref float c, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref uint rc, float[] tc, ref float c, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint[] rc, float[] tc, ref float c, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref int rc, ref float tc, float[] c, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(int[] rc, ref float tc, float[] c, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref uint rc, ref float tc, float[] c, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint[] rc, ref float tc, float[] c, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref int rc, float[] tc, float[] c, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(int[] rc, float[] tc, float[] c, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref uint rc, float[] tc, float[] c, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint[] rc, float[] tc, float[] c, ref float n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref int rc, ref float tc, ref float c, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(int[] rc, ref float tc, ref float c, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref uint rc, ref float tc, ref float c, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint[] rc, ref float tc, ref float c, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref int rc, float[] tc, ref float c, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(int[] rc, float[] tc, ref float c, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref uint rc, float[] tc, ref float c, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint[] rc, float[] tc, ref float c, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref int rc, ref float tc, float[] c, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(int[] rc, ref float tc, float[] c, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref uint rc, ref float tc, float[] c, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint[] rc, ref float tc, float[] c, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref int rc, float[] tc, float[] c, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(int[] rc, float[] tc, float[] c, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref uint rc, float[] tc, float[] c, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint[] rc, float[] tc, float[] c, float[] n, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref int rc, ref float tc, ref float c, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(int[] rc, ref float tc, ref float c, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref uint rc, ref float tc, ref float c, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint[] rc, ref float tc, ref float c, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref int rc, float[] tc, ref float c, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(int[] rc, float[] tc, ref float c, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref uint rc, float[] tc, ref float c, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint[] rc, float[] tc, ref float c, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref int rc, ref float tc, float[] c, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(int[] rc, ref float tc, float[] c, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref uint rc, ref float tc, float[] c, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint[] rc, ref float tc, float[] c, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref int rc, float[] tc, float[] c, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(int[] rc, float[] tc, float[] c, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref uint rc, float[] tc, float[] c, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint[] rc, float[] tc, float[] c, ref float n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref int rc, ref float tc, ref float c, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(int[] rc, ref float tc, ref float c, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref uint rc, ref float tc, ref float c, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint[] rc, ref float tc, ref float c, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref int rc, float[] tc, ref float c, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(int[] rc, float[] tc, ref float c, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref uint rc, float[] tc, ref float c, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint[] rc, float[] tc, ref float c, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref int rc, ref float tc, float[] c, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(int[] rc, ref float tc, float[] c, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref uint rc, ref float tc, float[] c, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint[] rc, ref float tc, float[] c, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref int rc, float[] tc, float[] c, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(int[] rc, float[] tc, float[] c, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref uint rc, float[] tc, float[] c, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity]
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint[] rc, float[] tc, float[] c, float[] n, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_2", "glBlendColor")]
        public static IntPtr ext__GL_VERSION_1_2__glBlendColor = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_2", "glBlendColor"), SuppressUnmanagedCodeSecurity]
        public static void glBlendColor(float red, float green, float blue, float alpha)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_2", "glBlendEquation")]
        public static IntPtr ext__GL_VERSION_1_2__glBlendEquation = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_2", "glBlendEquation"), SuppressUnmanagedCodeSecurity]
        public static void glBlendEquation(int mode)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements")]
        public static IntPtr ext__GL_VERSION_1_2__glDrawRangeElements = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, bool[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, bool[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, bool[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, bool[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, byte[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, byte[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, byte[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, byte[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, short[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, short[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, short[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, short[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, int[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, int[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, int[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, int[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, float[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, float[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, float[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, float[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, double[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, double[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, double[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, double[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, string indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, string indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, string indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, string indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, IntPtr indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, IntPtr indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, IntPtr indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, IntPtr indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, ref sbyte indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, ref sbyte indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, ref sbyte indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, ref sbyte indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, sbyte[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, sbyte[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, sbyte[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, sbyte[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, sbyte[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, sbyte[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, sbyte[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, sbyte[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, sbyte[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, sbyte[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, sbyte[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, sbyte[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, ref ushort indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, ref ushort indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, ref ushort indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, ref ushort indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, ushort[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, ushort[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, ushort[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, ushort[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, ushort[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, ushort[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, ushort[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, ushort[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, ushort[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, ushort[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, ushort[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, ushort[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, ref uint indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, ref uint indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, ref uint indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, ref uint indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, uint[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, uint[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, uint[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, uint[] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, uint[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, uint[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, uint[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, uint[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, uint[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, uint[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, uint[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, uint[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, ref bool indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, ref bool indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, ref bool indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, ref bool indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, bool[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, bool[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, bool[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, bool[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, bool[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, bool[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, bool[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, bool[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, ref byte indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, ref byte indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, ref byte indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, ref byte indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, byte[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, byte[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, byte[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, byte[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, byte[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, byte[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, byte[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, byte[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, ref short indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, ref short indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, ref short indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, ref short indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, short[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, short[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, short[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, short[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, short[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, short[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, short[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, short[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, ref int indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, ref int indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, ref int indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, ref int indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, int[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, int[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, int[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, int[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, int[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, int[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, int[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, int[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, ref float indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, ref float indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, ref float indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, ref float indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, float[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, float[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, float[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, float[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, float[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, float[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, float[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, float[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, ref double indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, ref double indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, ref double indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, ref double indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, double[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, double[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, double[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, double[,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, int end, int count, int type, double[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, int end, int count, int type, double[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, int start, uint end, int count, int type, double[, ,] indices)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity]
        public static void glDrawRangeElements(int mode, uint start, uint end, int count, int type, double[, ,] indices)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable")]
        public static IntPtr ext__GL_VERSION_1_2__glColorTable = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, bool[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, byte[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, short[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, int[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, float[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, double[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, string table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, IntPtr table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, ref sbyte table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, sbyte[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, sbyte[,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, sbyte[, ,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, ref ushort table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, ushort[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, ushort[,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, ushort[, ,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, ref uint table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, uint[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, uint[,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, uint[, ,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, ref bool table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, bool[,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, bool[, ,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, ref byte table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, byte[,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, byte[, ,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, ref short table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, short[,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, short[, ,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, ref int table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, int[,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, int[, ,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, ref float table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, float[,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, float[, ,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, ref double table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, double[,] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorTable(int target, int internalformat, int width, int format, int type, double[, ,] table)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTableParameterfv")]
        public static IntPtr ext__GL_VERSION_1_2__glColorTableParameterfv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTableParameterfv"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableParameterfv(int target, int pname, ref float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTableParameterfv"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableParameterfv(int target, int pname, float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTableParameteriv")]
        public static IntPtr ext__GL_VERSION_1_2__glColorTableParameteriv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTableParameteriv"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableParameteriv(int target, int pname, ref int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTableParameteriv"), SuppressUnmanagedCodeSecurity]
        public static void glColorTableParameteriv(int target, int pname, int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_2", "glCopyColorTable")]
        public static IntPtr ext__GL_VERSION_1_2__glCopyColorTable = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_2", "glCopyColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glCopyColorTable(int target, int internalformat, int x, int y, int width)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable")]
        public static IntPtr ext__GL_VERSION_1_2__glGetColorTable = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTable(int target, int format, int type, [Out] bool[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTable(int target, int format, int type, [Out] byte[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTable(int target, int format, int type, [Out] short[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTable(int target, int format, int type, [Out] int[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTable(int target, int format, int type, [Out] float[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTable(int target, int format, int type, [Out] double[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTable(int target, int format, int type, IntPtr table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTable(int target, int format, int type, out bool table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTable(int target, int format, int type, out byte table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTable(int target, int format, int type, out short table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTable(int target, int format, int type, out int table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTable(int target, int format, int type, out float table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTable(int target, int format, int type, out double table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTable(int target, int format, int type, out sbyte table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTable(int target, int format, int type, [Out] sbyte[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTable(int target, int format, int type, out ushort table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTable(int target, int format, int type, [Out] ushort[] table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTable(int target, int format, int type, out uint table)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTable(int target, int format, int type, [Out] uint[] table)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTableParameterfv")]
        public static IntPtr ext__GL_VERSION_1_2__glGetColorTableParameterfv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTableParameterfv"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableParameterfv(int target, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTableParameterfv"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableParameterfv(int target, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTableParameteriv")]
        public static IntPtr ext__GL_VERSION_1_2__glGetColorTableParameteriv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTableParameteriv"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableParameteriv(int target, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTableParameteriv"), SuppressUnmanagedCodeSecurity]
        public static void glGetColorTableParameteriv(int target, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable")]
        public static IntPtr ext__GL_VERSION_1_2__glColorSubTable = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, bool[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, byte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, short[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, int[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, float[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, double[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, string data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, IntPtr data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, ref sbyte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, sbyte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, sbyte[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, sbyte[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, ref ushort data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, ushort[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, ushort[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, ushort[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, ref uint data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, uint[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, uint[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, uint[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, ref bool data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, bool[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, bool[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, ref byte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, byte[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, byte[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, ref short data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, short[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, short[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, ref int data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, int[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, int[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, ref float data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, float[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, float[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, ref double data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, double[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glColorSubTable(int target, int start, int count, int format, int type, double[, ,] data)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_2", "glCopyColorSubTable")]
        public static IntPtr ext__GL_VERSION_1_2__glCopyColorSubTable = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_2", "glCopyColorSubTable"), SuppressUnmanagedCodeSecurity]
        public static void glCopyColorSubTable(int target, int start, int x, int y, int width)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D")]
        public static IntPtr ext__GL_VERSION_1_2__glConvolutionFilter1D = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, bool[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, byte[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, short[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, int[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, float[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, double[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, string image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, IntPtr image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, ref sbyte image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, sbyte[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, sbyte[,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, sbyte[, ,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, ref ushort image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, ushort[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, ushort[,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, ushort[, ,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, ref uint image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, uint[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, uint[,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, uint[, ,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, ref bool image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, bool[,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, bool[, ,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, ref byte image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, byte[,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, byte[, ,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, ref short image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, short[,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, short[, ,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, ref int image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, int[,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, int[, ,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, ref float image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, float[,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, float[, ,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, ref double image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, double[,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, double[, ,] image)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D")]
        public static IntPtr ext__GL_VERSION_1_2__glConvolutionFilter2D = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, bool[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, byte[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, short[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, int[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, float[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, double[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, string image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, IntPtr image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, ref sbyte image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, sbyte[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, sbyte[,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, sbyte[, ,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, ref ushort image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, ushort[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, ushort[,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, ushort[, ,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, ref uint image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, uint[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, uint[,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, uint[, ,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, ref bool image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, bool[,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, bool[, ,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, ref byte image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, byte[,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, byte[, ,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, ref short image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, short[,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, short[, ,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, ref int image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, int[,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, int[, ,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, ref float image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, float[,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, float[, ,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, ref double image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, double[,] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, double[, ,] image)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionParameterf")]
        public static IntPtr ext__GL_VERSION_1_2__glConvolutionParameterf = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionParameterf"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionParameterf(int target, int pname, float arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionParameterfv")]
        public static IntPtr ext__GL_VERSION_1_2__glConvolutionParameterfv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionParameterfv"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionParameterfv(int target, int pname, ref float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionParameterfv"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionParameterfv(int target, int pname, float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionParameteri")]
        public static IntPtr ext__GL_VERSION_1_2__glConvolutionParameteri = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionParameteri"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionParameteri(int target, int pname, int arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionParameteriv")]
        public static IntPtr ext__GL_VERSION_1_2__glConvolutionParameteriv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionParameteriv"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionParameteriv(int target, int pname, ref int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionParameteriv"), SuppressUnmanagedCodeSecurity]
        public static void glConvolutionParameteriv(int target, int pname, int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_2", "glCopyConvolutionFilter1D")]
        public static IntPtr ext__GL_VERSION_1_2__glCopyConvolutionFilter1D = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_2", "glCopyConvolutionFilter1D"), SuppressUnmanagedCodeSecurity]
        public static void glCopyConvolutionFilter1D(int target, int internalformat, int x, int y, int width)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_2", "glCopyConvolutionFilter2D")]
        public static IntPtr ext__GL_VERSION_1_2__glCopyConvolutionFilter2D = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_2", "glCopyConvolutionFilter2D"), SuppressUnmanagedCodeSecurity]
        public static void glCopyConvolutionFilter2D(int target, int internalformat, int x, int y, int width, int height)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter")]
        public static IntPtr ext__GL_VERSION_1_2__glGetConvolutionFilter = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilter(int target, int format, int type, [Out] bool[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilter(int target, int format, int type, [Out] byte[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilter(int target, int format, int type, [Out] short[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilter(int target, int format, int type, [Out] int[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilter(int target, int format, int type, [Out] float[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilter(int target, int format, int type, [Out] double[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilter(int target, int format, int type, IntPtr image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilter(int target, int format, int type, out bool image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilter(int target, int format, int type, out byte image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilter(int target, int format, int type, out short image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilter(int target, int format, int type, out int image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilter(int target, int format, int type, out float image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilter(int target, int format, int type, out double image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilter(int target, int format, int type, out sbyte image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilter(int target, int format, int type, [Out] sbyte[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilter(int target, int format, int type, out ushort image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilter(int target, int format, int type, [Out] ushort[] image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilter(int target, int format, int type, out uint image)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionFilter(int target, int format, int type, [Out] uint[] image)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionParameterfv")]
        public static IntPtr ext__GL_VERSION_1_2__glGetConvolutionParameterfv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionParameterfv"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionParameterfv(int target, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionParameterfv"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionParameterfv(int target, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionParameteriv")]
        public static IntPtr ext__GL_VERSION_1_2__glGetConvolutionParameteriv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionParameteriv"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionParameteriv(int target, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionParameteriv"), SuppressUnmanagedCodeSecurity]
        public static void glGetConvolutionParameteriv(int target, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram")]
        public static IntPtr ext__GL_VERSION_1_2__glGetHistogram = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, int reset, int format, int type, [Out] bool[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, bool reset, int format, int type, [Out] bool[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, int reset, int format, int type, [Out] byte[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, bool reset, int format, int type, [Out] byte[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, int reset, int format, int type, [Out] short[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, bool reset, int format, int type, [Out] short[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, int reset, int format, int type, [Out] int[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, bool reset, int format, int type, [Out] int[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, int reset, int format, int type, [Out] float[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, bool reset, int format, int type, [Out] float[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, int reset, int format, int type, [Out] double[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, bool reset, int format, int type, [Out] double[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, int reset, int format, int type, IntPtr values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, bool reset, int format, int type, IntPtr values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, int reset, int format, int type, out bool values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, bool reset, int format, int type, out bool values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, int reset, int format, int type, out byte values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, bool reset, int format, int type, out byte values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, int reset, int format, int type, out short values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, bool reset, int format, int type, out short values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, int reset, int format, int type, out int values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, bool reset, int format, int type, out int values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, int reset, int format, int type, out float values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, bool reset, int format, int type, out float values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, int reset, int format, int type, out double values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, bool reset, int format, int type, out double values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, int reset, int format, int type, out sbyte values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, bool reset, int format, int type, out sbyte values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, int reset, int format, int type, [Out] sbyte[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, bool reset, int format, int type, [Out] sbyte[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, int reset, int format, int type, out ushort values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, bool reset, int format, int type, out ushort values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, int reset, int format, int type, [Out] ushort[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, bool reset, int format, int type, [Out] ushort[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, int reset, int format, int type, out uint values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, bool reset, int format, int type, out uint values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, int reset, int format, int type, [Out] uint[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogram(int target, bool reset, int format, int type, [Out] uint[] values)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogramParameterfv")]
        public static IntPtr ext__GL_VERSION_1_2__glGetHistogramParameterfv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogramParameterfv"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramParameterfv(int target, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogramParameterfv"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramParameterfv(int target, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogramParameteriv")]
        public static IntPtr ext__GL_VERSION_1_2__glGetHistogramParameteriv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogramParameteriv"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramParameteriv(int target, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogramParameteriv"), SuppressUnmanagedCodeSecurity]
        public static void glGetHistogramParameteriv(int target, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax")]
        public static IntPtr ext__GL_VERSION_1_2__glGetMinmax = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, int reset, int format, int type, [Out] bool[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, bool reset, int format, int type, [Out] bool[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, int reset, int format, int type, [Out] byte[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, bool reset, int format, int type, [Out] byte[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, int reset, int format, int type, [Out] short[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, bool reset, int format, int type, [Out] short[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, int reset, int format, int type, [Out] int[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, bool reset, int format, int type, [Out] int[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, int reset, int format, int type, [Out] float[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, bool reset, int format, int type, [Out] float[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, int reset, int format, int type, [Out] double[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, bool reset, int format, int type, [Out] double[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, int reset, int format, int type, IntPtr values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, bool reset, int format, int type, IntPtr values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, int reset, int format, int type, out bool values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, bool reset, int format, int type, out bool values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, int reset, int format, int type, out byte values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, bool reset, int format, int type, out byte values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, int reset, int format, int type, out short values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, bool reset, int format, int type, out short values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, int reset, int format, int type, out int values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, bool reset, int format, int type, out int values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, int reset, int format, int type, out float values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, bool reset, int format, int type, out float values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, int reset, int format, int type, out double values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, bool reset, int format, int type, out double values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, int reset, int format, int type, out sbyte values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, bool reset, int format, int type, out sbyte values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, int reset, int format, int type, [Out] sbyte[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, bool reset, int format, int type, [Out] sbyte[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, int reset, int format, int type, out ushort values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, bool reset, int format, int type, out ushort values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, int reset, int format, int type, [Out] ushort[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, bool reset, int format, int type, [Out] ushort[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, int reset, int format, int type, out uint values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, bool reset, int format, int type, out uint values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, int reset, int format, int type, [Out] uint[] values)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmax(int target, bool reset, int format, int type, [Out] uint[] values)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmaxParameterfv")]
        public static IntPtr ext__GL_VERSION_1_2__glGetMinmaxParameterfv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmaxParameterfv"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxParameterfv(int target, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmaxParameterfv"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxParameterfv(int target, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmaxParameteriv")]
        public static IntPtr ext__GL_VERSION_1_2__glGetMinmaxParameteriv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmaxParameteriv"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxParameteriv(int target, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmaxParameteriv"), SuppressUnmanagedCodeSecurity]
        public static void glGetMinmaxParameteriv(int target, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_2", "glHistogram")]
        public static IntPtr ext__GL_VERSION_1_2__glHistogram = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_2", "glHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glHistogram(int target, int width, int internalformat, int sink)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glHistogram(int target, int width, int internalformat, bool sink)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_2", "glMinmax")]
        public static IntPtr ext__GL_VERSION_1_2__glMinmax = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_2", "glMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glMinmax(int target, int internalformat, int sink)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glMinmax(int target, int internalformat, bool sink)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_2", "glResetHistogram")]
        public static IntPtr ext__GL_VERSION_1_2__glResetHistogram = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_2", "glResetHistogram"), SuppressUnmanagedCodeSecurity]
        public static void glResetHistogram(int target)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_2", "glResetMinmax")]
        public static IntPtr ext__GL_VERSION_1_2__glResetMinmax = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_2", "glResetMinmax"), SuppressUnmanagedCodeSecurity]
        public static void glResetMinmax(int target)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D")]
        public static IntPtr ext__GL_VERSION_1_2__glTexImage3D = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, bool[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, byte[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, short[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, int[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, float[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, double[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, string pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, IntPtr pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ref sbyte pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, sbyte[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, sbyte[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, sbyte[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ref ushort pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ushort[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ushort[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ushort[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ref uint pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, uint[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, uint[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, uint[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ref bool pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, bool[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, bool[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ref byte pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, byte[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, byte[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ref short pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, short[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, short[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ref int pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, int[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, int[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ref float pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, float[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, float[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ref double pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, double[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, double[, ,] pixels)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D")]
        public static IntPtr ext__GL_VERSION_1_2__glTexSubImage3D = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, bool[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, byte[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, short[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, int[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, float[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, double[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, string pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, IntPtr pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ref sbyte pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, sbyte[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, sbyte[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, sbyte[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ref ushort pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ushort[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ushort[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ushort[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ref uint pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, uint[] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, uint[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, uint[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ref bool pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, bool[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, bool[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ref byte pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, byte[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, byte[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ref short pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, short[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, short[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ref int pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, int[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, int[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ref float pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, float[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, float[, ,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ref double pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, double[,] pixels)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, double[, ,] pixels)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_2", "glCopyTexSubImage3D")]
        public static IntPtr ext__GL_VERSION_1_2__glCopyTexSubImage3D = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_2", "glCopyTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCopyTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glActiveTexture")]
        public static IntPtr ext__GL_VERSION_1_3__glActiveTexture = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glActiveTexture"), SuppressUnmanagedCodeSecurity]
        public static void glActiveTexture(int texture)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glClientActiveTexture")]
        public static IntPtr ext__GL_VERSION_1_3__glClientActiveTexture = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glClientActiveTexture"), SuppressUnmanagedCodeSecurity]
        public static void glClientActiveTexture(int texture)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1d")]
        public static IntPtr ext__GL_VERSION_1_3__glMultiTexCoord1d = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1d"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord1d(int target, double s)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1dv")]
        public static IntPtr ext__GL_VERSION_1_3__glMultiTexCoord1dv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1dv"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord1dv(int target, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1dv"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord1dv(int target, double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1f")]
        public static IntPtr ext__GL_VERSION_1_3__glMultiTexCoord1f = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1f"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord1f(int target, float s)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1fv")]
        public static IntPtr ext__GL_VERSION_1_3__glMultiTexCoord1fv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1fv"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord1fv(int target, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1fv"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord1fv(int target, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1i")]
        public static IntPtr ext__GL_VERSION_1_3__glMultiTexCoord1i = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1i"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord1i(int target, int s)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1iv")]
        public static IntPtr ext__GL_VERSION_1_3__glMultiTexCoord1iv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1iv"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord1iv(int target, ref int v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1iv"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord1iv(int target, int[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1s")]
        public static IntPtr ext__GL_VERSION_1_3__glMultiTexCoord1s = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1s"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord1s(int target, short s)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1sv")]
        public static IntPtr ext__GL_VERSION_1_3__glMultiTexCoord1sv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1sv"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord1sv(int target, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1sv"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord1sv(int target, short[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2d")]
        public static IntPtr ext__GL_VERSION_1_3__glMultiTexCoord2d = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2d"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord2d(int target, double s, double t)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2dv")]
        public static IntPtr ext__GL_VERSION_1_3__glMultiTexCoord2dv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2dv"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord2dv(int target, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2dv"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord2dv(int target, double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2f")]
        public static IntPtr ext__GL_VERSION_1_3__glMultiTexCoord2f = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2f"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord2f(int target, float s, float t)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2fv")]
        public static IntPtr ext__GL_VERSION_1_3__glMultiTexCoord2fv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2fv"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord2fv(int target, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2fv"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord2fv(int target, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2i")]
        public static IntPtr ext__GL_VERSION_1_3__glMultiTexCoord2i = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2i"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord2i(int target, int s, int t)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2iv")]
        public static IntPtr ext__GL_VERSION_1_3__glMultiTexCoord2iv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2iv"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord2iv(int target, ref int v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2iv"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord2iv(int target, int[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2s")]
        public static IntPtr ext__GL_VERSION_1_3__glMultiTexCoord2s = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2s"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord2s(int target, short s, short t)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2sv")]
        public static IntPtr ext__GL_VERSION_1_3__glMultiTexCoord2sv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2sv"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord2sv(int target, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2sv"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord2sv(int target, short[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3d")]
        public static IntPtr ext__GL_VERSION_1_3__glMultiTexCoord3d = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3d"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord3d(int target, double s, double t, double r)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3dv")]
        public static IntPtr ext__GL_VERSION_1_3__glMultiTexCoord3dv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3dv"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord3dv(int target, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3dv"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord3dv(int target, double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3f")]
        public static IntPtr ext__GL_VERSION_1_3__glMultiTexCoord3f = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3f"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord3f(int target, float s, float t, float r)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3fv")]
        public static IntPtr ext__GL_VERSION_1_3__glMultiTexCoord3fv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3fv"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord3fv(int target, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3fv"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord3fv(int target, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3i")]
        public static IntPtr ext__GL_VERSION_1_3__glMultiTexCoord3i = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3i"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord3i(int target, int s, int t, int r)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3iv")]
        public static IntPtr ext__GL_VERSION_1_3__glMultiTexCoord3iv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3iv"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord3iv(int target, ref int v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3iv"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord3iv(int target, int[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3s")]
        public static IntPtr ext__GL_VERSION_1_3__glMultiTexCoord3s = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3s"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord3s(int target, short s, short t, short r)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3sv")]
        public static IntPtr ext__GL_VERSION_1_3__glMultiTexCoord3sv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3sv"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord3sv(int target, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3sv"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord3sv(int target, short[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4d")]
        public static IntPtr ext__GL_VERSION_1_3__glMultiTexCoord4d = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4d"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4d(int target, double s, double t, double r, double q)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4dv")]
        public static IntPtr ext__GL_VERSION_1_3__glMultiTexCoord4dv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4dv"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4dv(int target, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4dv"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4dv(int target, double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4f")]
        public static IntPtr ext__GL_VERSION_1_3__glMultiTexCoord4f = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4f"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4f(int target, float s, float t, float r, float q)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4fv")]
        public static IntPtr ext__GL_VERSION_1_3__glMultiTexCoord4fv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4fv"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4fv(int target, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4fv"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4fv(int target, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4i")]
        public static IntPtr ext__GL_VERSION_1_3__glMultiTexCoord4i = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4i"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4i(int target, int s, int t, int r, int q)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4iv")]
        public static IntPtr ext__GL_VERSION_1_3__glMultiTexCoord4iv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4iv"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4iv(int target, ref int v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4iv"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4iv(int target, int[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4s")]
        public static IntPtr ext__GL_VERSION_1_3__glMultiTexCoord4s = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4s"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4s(int target, short s, short t, short r, short q)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4sv")]
        public static IntPtr ext__GL_VERSION_1_3__glMultiTexCoord4sv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4sv"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4sv(int target, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4sv"), SuppressUnmanagedCodeSecurity]
        public static void glMultiTexCoord4sv(int target, short[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glLoadTransposeMatrixf")]
        public static IntPtr ext__GL_VERSION_1_3__glLoadTransposeMatrixf = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glLoadTransposeMatrixf"), SuppressUnmanagedCodeSecurity]
        public static void glLoadTransposeMatrixf(ref float m)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glLoadTransposeMatrixf"), SuppressUnmanagedCodeSecurity]
        public static void glLoadTransposeMatrixf(float[] m)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glLoadTransposeMatrixd")]
        public static IntPtr ext__GL_VERSION_1_3__glLoadTransposeMatrixd = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glLoadTransposeMatrixd"), SuppressUnmanagedCodeSecurity]
        public static void glLoadTransposeMatrixd(ref double m)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glLoadTransposeMatrixd"), SuppressUnmanagedCodeSecurity]
        public static void glLoadTransposeMatrixd(double[] m)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultTransposeMatrixf")]
        public static IntPtr ext__GL_VERSION_1_3__glMultTransposeMatrixf = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultTransposeMatrixf"), SuppressUnmanagedCodeSecurity]
        public static void glMultTransposeMatrixf(ref float m)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultTransposeMatrixf"), SuppressUnmanagedCodeSecurity]
        public static void glMultTransposeMatrixf(float[] m)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultTransposeMatrixd")]
        public static IntPtr ext__GL_VERSION_1_3__glMultTransposeMatrixd = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultTransposeMatrixd"), SuppressUnmanagedCodeSecurity]
        public static void glMultTransposeMatrixd(ref double m)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glMultTransposeMatrixd"), SuppressUnmanagedCodeSecurity]
        public static void glMultTransposeMatrixd(double[] m)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glSampleCoverage")]
        public static IntPtr ext__GL_VERSION_1_3__glSampleCoverage = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glSampleCoverage"), SuppressUnmanagedCodeSecurity]
        public static void glSampleCoverage(float value, int invert)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glSampleCoverage"), SuppressUnmanagedCodeSecurity]
        public static void glSampleCoverage(float value, bool invert)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D")]
        public static IntPtr ext__GL_VERSION_1_3__glCompressedTexImage3D = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, bool[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, byte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, short[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, int[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, float[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, double[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, string data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ref sbyte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, sbyte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, sbyte[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, sbyte[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ref ushort data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ushort[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ushort[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ushort[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ref uint data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, uint[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, uint[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, uint[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ref bool data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, bool[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, bool[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ref byte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, byte[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, byte[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ref short data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, short[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, short[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ref int data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, int[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, int[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ref float data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, float[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, float[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ref double data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, double[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, double[, ,] data)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D")]
        public static IntPtr ext__GL_VERSION_1_3__glCompressedTexImage2D = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, bool[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, byte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, short[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, int[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, float[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, double[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, string data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, IntPtr data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, ref sbyte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, sbyte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, sbyte[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, sbyte[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, ref ushort data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, ushort[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, ushort[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, ushort[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, ref uint data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, uint[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, uint[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, uint[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, ref bool data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, bool[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, bool[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, ref byte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, byte[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, byte[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, ref short data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, short[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, short[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, ref int data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, int[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, int[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, ref float data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, float[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, float[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, ref double data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, double[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, double[, ,] data)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D")]
        public static IntPtr ext__GL_VERSION_1_3__glCompressedTexImage1D = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, bool[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, byte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, short[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, int[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, float[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, double[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, string data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, IntPtr data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, ref sbyte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, sbyte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, sbyte[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, sbyte[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, ref ushort data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, ushort[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, ushort[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, ushort[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, ref uint data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, uint[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, uint[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, uint[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, ref bool data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, bool[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, bool[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, ref byte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, byte[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, byte[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, ref short data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, short[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, short[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, ref int data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, int[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, int[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, ref float data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, float[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, float[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, ref double data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, double[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, double[, ,] data)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D")]
        public static IntPtr ext__GL_VERSION_1_3__glCompressedTexSubImage3D = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, bool[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, byte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, short[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, int[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, float[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, double[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, string data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, IntPtr data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ref sbyte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, sbyte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, sbyte[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, sbyte[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ref ushort data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ushort[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ushort[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ushort[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ref uint data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, uint[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, uint[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, uint[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ref bool data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, bool[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, bool[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ref byte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, byte[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, byte[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ref short data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, short[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, short[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ref int data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, int[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, int[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ref float data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, float[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, float[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ref double data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, double[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, double[, ,] data)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D")]
        public static IntPtr ext__GL_VERSION_1_3__glCompressedTexSubImage2D = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, bool[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, byte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, short[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, int[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, float[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, double[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, string data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, IntPtr data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ref sbyte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, sbyte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, sbyte[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, sbyte[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ref ushort data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ushort[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ushort[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ushort[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ref uint data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, uint[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, uint[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, uint[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ref bool data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, bool[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, bool[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ref byte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, byte[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, byte[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ref short data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, short[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, short[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ref int data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, int[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, int[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ref float data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, float[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, float[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ref double data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, double[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, double[, ,] data)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D")]
        public static IntPtr ext__GL_VERSION_1_3__glCompressedTexSubImage1D = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, bool[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, byte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, short[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, int[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, float[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, double[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, string data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, IntPtr data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, ref sbyte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, sbyte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, sbyte[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, sbyte[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, ref ushort data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, ushort[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, ushort[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, ushort[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, ref uint data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, uint[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, uint[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, uint[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, ref bool data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, bool[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, bool[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, ref byte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, byte[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, byte[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, ref short data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, short[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, short[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, ref int data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, int[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, int[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, ref float data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, float[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, float[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, ref double data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, double[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity]
        public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, double[, ,] data)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage")]
        public static IntPtr ext__GL_VERSION_1_3__glGetCompressedTexImage = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImage(int target, int level, [Out] bool[] img)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImage(int target, int level, [Out] byte[] img)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImage(int target, int level, [Out] short[] img)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImage(int target, int level, [Out] int[] img)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImage(int target, int level, [Out] float[] img)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImage(int target, int level, [Out] double[] img)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImage(int target, int level, IntPtr img)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImage(int target, int level, out bool img)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImage(int target, int level, out byte img)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImage(int target, int level, out short img)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImage(int target, int level, out int img)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImage(int target, int level, out float img)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImage(int target, int level, out double img)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImage(int target, int level, out sbyte img)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImage(int target, int level, [Out] sbyte[] img)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImage(int target, int level, out ushort img)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImage(int target, int level, [Out] ushort[] img)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImage(int target, int level, out uint img)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity]
        public static void glGetCompressedTexImage(int target, int level, [Out] uint[] img)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glBlendFuncSeparate")]
        public static IntPtr ext__GL_VERSION_1_4__glBlendFuncSeparate = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glBlendFuncSeparate"), SuppressUnmanagedCodeSecurity]
        public static void glBlendFuncSeparate(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordf")]
        public static IntPtr ext__GL_VERSION_1_4__glFogCoordf = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordf"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordf(float coord)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordfv")]
        public static IntPtr ext__GL_VERSION_1_4__glFogCoordfv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordfv"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordfv(ref float coord)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordfv"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordfv(float[] coord)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordd")]
        public static IntPtr ext__GL_VERSION_1_4__glFogCoordd = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordd"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordd(double coord)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoorddv")]
        public static IntPtr ext__GL_VERSION_1_4__glFogCoorddv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoorddv"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoorddv(ref double coord)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoorddv"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoorddv(double[] coord)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer")]
        public static IntPtr ext__GL_VERSION_1_4__glFogCoordPointer = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, string pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, ref sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, sbyte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, sbyte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, ref ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, ushort[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, ushort[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, ref uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, uint[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, uint[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, uint[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, ref bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, bool[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, bool[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, ref byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, byte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, byte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, ref short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, short[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, short[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, ref int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, int[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, int[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, ref float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, float[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, float[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, ref double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, double[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity]
        public static void glFogCoordPointer(int type, int stride, double[, ,] pointer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawArrays")]
        public static IntPtr ext__GL_VERSION_1_4__glMultiDrawArrays = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawArrays"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawArrays(int mode, out int first, out int count, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawArrays"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawArrays(int mode, [Out] int[] first, out int count, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawArrays"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawArrays(int mode, out int first, [Out] int[] count, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawArrays"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawArrays(int mode, [Out] int[] first, [Out] int[] count, int primcount)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements")]
        public static IntPtr ext__GL_VERSION_1_4__glMultiDrawElements = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, bool[] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, bool[] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, byte[] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, byte[] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, short[] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, short[] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, int[] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, int[] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, float[] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, float[] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, double[] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, double[] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, string indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, string indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, IntPtr indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, IntPtr indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, ref sbyte indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, ref sbyte indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, sbyte[] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, sbyte[] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, sbyte[,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, sbyte[,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, sbyte[, ,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, sbyte[, ,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, ref ushort indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, ref ushort indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, ushort[] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, ushort[] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, ushort[,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, ushort[,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, ushort[, ,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, ushort[, ,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, ref uint indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, ref uint indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, uint[] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, uint[] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, uint[,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, uint[,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, uint[, ,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, uint[, ,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, ref bool indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, ref bool indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, bool[,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, bool[,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, bool[, ,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, bool[, ,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, ref byte indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, ref byte indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, byte[,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, byte[,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, byte[, ,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, byte[, ,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, ref short indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, ref short indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, short[,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, short[,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, short[, ,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, short[, ,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, ref int indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, ref int indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, int[,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, int[,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, int[, ,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, int[, ,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, ref float indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, ref float indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, float[,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, float[,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, float[, ,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, float[, ,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, ref double indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, ref double indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, double[,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, double[,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, ref int count, int type, double[, ,] indices, int primcount)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity]
        public static void glMultiDrawElements(int mode, int[] count, int type, double[, ,] indices, int primcount)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glPointParameterf")]
        public static IntPtr ext__GL_VERSION_1_4__glPointParameterf = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glPointParameterf"), SuppressUnmanagedCodeSecurity]
        public static void glPointParameterf(int pname, float param)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glPointParameterfv")]
        public static IntPtr ext__GL_VERSION_1_4__glPointParameterfv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glPointParameterfv"), SuppressUnmanagedCodeSecurity]
        public static void glPointParameterfv(int pname, ref float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glPointParameterfv"), SuppressUnmanagedCodeSecurity]
        public static void glPointParameterfv(int pname, float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glPointParameteri")]
        public static IntPtr ext__GL_VERSION_1_4__glPointParameteri = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glPointParameteri"), SuppressUnmanagedCodeSecurity]
        public static void glPointParameteri(int pname, int param)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glPointParameteriv")]
        public static IntPtr ext__GL_VERSION_1_4__glPointParameteriv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glPointParameteriv"), SuppressUnmanagedCodeSecurity]
        public static void glPointParameteriv(int pname, ref int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glPointParameteriv"), SuppressUnmanagedCodeSecurity]
        public static void glPointParameteriv(int pname, int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3b")]
        public static IntPtr ext__GL_VERSION_1_4__glSecondaryColor3b = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3b"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3b(byte red, byte green, byte blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3b"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3b(sbyte red, byte green, byte blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3b"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3b(byte red, sbyte green, byte blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3b"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3b(sbyte red, sbyte green, byte blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3b"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3b(byte red, byte green, sbyte blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3b"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3b(sbyte red, byte green, sbyte blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3b"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3b(byte red, sbyte green, sbyte blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3b"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3b(sbyte red, sbyte green, sbyte blue)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3bv")]
        public static IntPtr ext__GL_VERSION_1_4__glSecondaryColor3bv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3bv"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3bv(ref byte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3bv"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3bv(byte[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3bv"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3bv(ref sbyte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3bv"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3bv(sbyte[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3d")]
        public static IntPtr ext__GL_VERSION_1_4__glSecondaryColor3d = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3d"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3d(double red, double green, double blue)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3dv")]
        public static IntPtr ext__GL_VERSION_1_4__glSecondaryColor3dv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3dv"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3dv(ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3dv"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3dv(double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3f")]
        public static IntPtr ext__GL_VERSION_1_4__glSecondaryColor3f = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3f"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3f(float red, float green, float blue)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3fv")]
        public static IntPtr ext__GL_VERSION_1_4__glSecondaryColor3fv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3fv"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3fv(ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3fv"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3fv(float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3i")]
        public static IntPtr ext__GL_VERSION_1_4__glSecondaryColor3i = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3i"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3i(int red, int green, int blue)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3iv")]
        public static IntPtr ext__GL_VERSION_1_4__glSecondaryColor3iv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3iv"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3iv(ref int v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3iv"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3iv(int[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3s")]
        public static IntPtr ext__GL_VERSION_1_4__glSecondaryColor3s = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3s"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3s(short red, short green, short blue)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3sv")]
        public static IntPtr ext__GL_VERSION_1_4__glSecondaryColor3sv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3sv"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3sv(ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3sv"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3sv(short[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3ub")]
        public static IntPtr ext__GL_VERSION_1_4__glSecondaryColor3ub = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3ub"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3ub(byte red, byte green, byte blue)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3ubv")]
        public static IntPtr ext__GL_VERSION_1_4__glSecondaryColor3ubv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3ubv"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3ubv(ref byte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3ubv"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3ubv(byte[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3ui")]
        public static IntPtr ext__GL_VERSION_1_4__glSecondaryColor3ui = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3ui"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3ui(int red, int green, int blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3ui"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3ui(uint red, int green, int blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3ui"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3ui(int red, uint green, int blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3ui"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3ui(uint red, uint green, int blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3ui"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3ui(int red, int green, uint blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3ui"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3ui(uint red, int green, uint blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3ui"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3ui(int red, uint green, uint blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3ui"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3ui(uint red, uint green, uint blue)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3uiv")]
        public static IntPtr ext__GL_VERSION_1_4__glSecondaryColor3uiv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3uiv"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3uiv(ref int v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3uiv"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3uiv(int[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3uiv"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3uiv(ref uint v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3uiv"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3uiv(uint[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3us")]
        public static IntPtr ext__GL_VERSION_1_4__glSecondaryColor3us = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3us"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3us(short red, short green, short blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3us"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3us(ushort red, short green, short blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3us"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3us(short red, ushort green, short blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3us"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3us(ushort red, ushort green, short blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3us"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3us(short red, short green, ushort blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3us"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3us(ushort red, short green, ushort blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3us"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3us(short red, ushort green, ushort blue)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3us"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3us(ushort red, ushort green, ushort blue)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3usv")]
        public static IntPtr ext__GL_VERSION_1_4__glSecondaryColor3usv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3usv"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3usv(ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3usv"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3usv(short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3usv"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3usv(ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3usv"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColor3usv(ushort[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer")]
        public static IntPtr ext__GL_VERSION_1_4__glSecondaryColorPointer = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, string pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, ref sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, sbyte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, sbyte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, ref ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, ushort[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, ushort[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, ref uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, uint[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, uint[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, uint[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, ref bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, bool[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, bool[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, ref byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, byte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, byte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, ref short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, short[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, short[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, ref int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, int[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, int[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, ref float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, float[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, float[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, ref double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, double[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity]
        public static void glSecondaryColorPointer(int size, int type, int stride, double[, ,] pointer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2d")]
        public static IntPtr ext__GL_VERSION_1_4__glWindowPos2d = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2d"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos2d(double x, double y)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2dv")]
        public static IntPtr ext__GL_VERSION_1_4__glWindowPos2dv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2dv"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos2dv(ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2dv"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos2dv(double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2f")]
        public static IntPtr ext__GL_VERSION_1_4__glWindowPos2f = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2f"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos2f(float x, float y)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2fv")]
        public static IntPtr ext__GL_VERSION_1_4__glWindowPos2fv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2fv"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos2fv(ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2fv"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos2fv(float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2i")]
        public static IntPtr ext__GL_VERSION_1_4__glWindowPos2i = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2i"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos2i(int x, int y)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2iv")]
        public static IntPtr ext__GL_VERSION_1_4__glWindowPos2iv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2iv"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos2iv(ref int v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2iv"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos2iv(int[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2s")]
        public static IntPtr ext__GL_VERSION_1_4__glWindowPos2s = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2s"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos2s(short x, short y)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2sv")]
        public static IntPtr ext__GL_VERSION_1_4__glWindowPos2sv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2sv"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos2sv(ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2sv"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos2sv(short[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3d")]
        public static IntPtr ext__GL_VERSION_1_4__glWindowPos3d = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3d"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos3d(double x, double y, double z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3dv")]
        public static IntPtr ext__GL_VERSION_1_4__glWindowPos3dv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3dv"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos3dv(ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3dv"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos3dv(double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3f")]
        public static IntPtr ext__GL_VERSION_1_4__glWindowPos3f = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3f"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos3f(float x, float y, float z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3fv")]
        public static IntPtr ext__GL_VERSION_1_4__glWindowPos3fv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3fv"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos3fv(ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3fv"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos3fv(float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3i")]
        public static IntPtr ext__GL_VERSION_1_4__glWindowPos3i = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3i"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos3i(int x, int y, int z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3iv")]
        public static IntPtr ext__GL_VERSION_1_4__glWindowPos3iv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3iv"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos3iv(ref int v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3iv"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos3iv(int[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3s")]
        public static IntPtr ext__GL_VERSION_1_4__glWindowPos3s = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3s"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos3s(short x, short y, short z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3sv")]
        public static IntPtr ext__GL_VERSION_1_4__glWindowPos3sv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3sv"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos3sv(ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3sv"), SuppressUnmanagedCodeSecurity]
        public static void glWindowPos3sv(short[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_5", "glGenQueries")]
        public static IntPtr ext__GL_VERSION_1_5__glGenQueries = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_5", "glGenQueries"), SuppressUnmanagedCodeSecurity]
        public static void glGenQueries(int n, out int ids)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGenQueries"), SuppressUnmanagedCodeSecurity]
        public static void glGenQueries(int n, [Out] int[] ids)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGenQueries"), SuppressUnmanagedCodeSecurity]
        public static void glGenQueries(int n, out uint ids)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGenQueries"), SuppressUnmanagedCodeSecurity]
        public static void glGenQueries(int n, [Out] uint[] ids)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_5", "glDeleteQueries")]
        public static IntPtr ext__GL_VERSION_1_5__glDeleteQueries = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_5", "glDeleteQueries"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteQueries(int n, ref int ids)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glDeleteQueries"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteQueries(int n, int[] ids)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glDeleteQueries"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteQueries(int n, ref uint ids)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glDeleteQueries"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteQueries(int n, uint[] ids)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_5", "glIsQuery")]
        public static IntPtr ext__GL_VERSION_1_5__glIsQuery = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_5", "glIsQuery"), SuppressUnmanagedCodeSecurity]
        public static int glIsQuery(int id)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glIsQuery"), SuppressUnmanagedCodeSecurity]
        public static int glIsQuery(uint id)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_5", "glBeginQuery")]
        public static IntPtr ext__GL_VERSION_1_5__glBeginQuery = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_5", "glBeginQuery"), SuppressUnmanagedCodeSecurity]
        public static void glBeginQuery(int target, int id)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBeginQuery"), SuppressUnmanagedCodeSecurity]
        public static void glBeginQuery(int target, uint id)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_5", "glEndQuery")]
        public static IntPtr ext__GL_VERSION_1_5__glEndQuery = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_5", "glEndQuery"), SuppressUnmanagedCodeSecurity]
        public static void glEndQuery(int target)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetQueryiv")]
        public static IntPtr ext__GL_VERSION_1_5__glGetQueryiv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetQueryiv"), SuppressUnmanagedCodeSecurity]
        public static void glGetQueryiv(int target, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetQueryiv"), SuppressUnmanagedCodeSecurity]
        public static void glGetQueryiv(int target, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetQueryObjectiv")]
        public static IntPtr ext__GL_VERSION_1_5__glGetQueryObjectiv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetQueryObjectiv"), SuppressUnmanagedCodeSecurity]
        public static void glGetQueryObjectiv(int id, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetQueryObjectiv"), SuppressUnmanagedCodeSecurity]
        public static void glGetQueryObjectiv(uint id, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetQueryObjectiv"), SuppressUnmanagedCodeSecurity]
        public static void glGetQueryObjectiv(int id, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetQueryObjectiv"), SuppressUnmanagedCodeSecurity]
        public static void glGetQueryObjectiv(uint id, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetQueryObjectuiv")]
        public static IntPtr ext__GL_VERSION_1_5__glGetQueryObjectuiv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetQueryObjectuiv"), SuppressUnmanagedCodeSecurity]
        public static void glGetQueryObjectuiv(int id, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetQueryObjectuiv"), SuppressUnmanagedCodeSecurity]
        public static void glGetQueryObjectuiv(uint id, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetQueryObjectuiv"), SuppressUnmanagedCodeSecurity]
        public static void glGetQueryObjectuiv(int id, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetQueryObjectuiv"), SuppressUnmanagedCodeSecurity]
        public static void glGetQueryObjectuiv(uint id, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetQueryObjectuiv"), SuppressUnmanagedCodeSecurity]
        public static void glGetQueryObjectuiv(int id, int pname, out uint arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetQueryObjectuiv"), SuppressUnmanagedCodeSecurity]
        public static void glGetQueryObjectuiv(uint id, int pname, out uint arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetQueryObjectuiv"), SuppressUnmanagedCodeSecurity]
        public static void glGetQueryObjectuiv(int id, int pname, [Out] uint[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetQueryObjectuiv"), SuppressUnmanagedCodeSecurity]
        public static void glGetQueryObjectuiv(uint id, int pname, [Out] uint[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_5", "glBindBuffer")]
        public static IntPtr ext__GL_VERSION_1_5__glBindBuffer = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_5", "glBindBuffer"), SuppressUnmanagedCodeSecurity]
        public static void glBindBuffer(int target, int buffer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBindBuffer"), SuppressUnmanagedCodeSecurity]
        public static void glBindBuffer(int target, uint buffer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_5", "glDeleteBuffers")]
        public static IntPtr ext__GL_VERSION_1_5__glDeleteBuffers = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_5", "glDeleteBuffers"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteBuffers(int n, ref int buffers)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glDeleteBuffers"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteBuffers(int n, int[] buffers)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glDeleteBuffers"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteBuffers(int n, ref uint buffers)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glDeleteBuffers"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteBuffers(int n, uint[] buffers)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_5", "glGenBuffers")]
        public static IntPtr ext__GL_VERSION_1_5__glGenBuffers = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_5", "glGenBuffers"), SuppressUnmanagedCodeSecurity]
        public static void glGenBuffers(int n, out int buffers)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGenBuffers"), SuppressUnmanagedCodeSecurity]
        public static void glGenBuffers(int n, [Out] int[] buffers)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGenBuffers"), SuppressUnmanagedCodeSecurity]
        public static void glGenBuffers(int n, out uint buffers)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGenBuffers"), SuppressUnmanagedCodeSecurity]
        public static void glGenBuffers(int n, [Out] uint[] buffers)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_5", "glIsBuffer")]
        public static IntPtr ext__GL_VERSION_1_5__glIsBuffer = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_5", "glIsBuffer"), SuppressUnmanagedCodeSecurity]
        public static int glIsBuffer(int buffer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glIsBuffer"), SuppressUnmanagedCodeSecurity]
        public static int glIsBuffer(uint buffer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData")]
        public static IntPtr ext__GL_VERSION_1_5__glBufferData = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, bool[] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, byte[] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, short[] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, int[] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, float[] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, double[] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, string data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, IntPtr data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, ref sbyte data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, sbyte[] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, sbyte[,] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, sbyte[, ,] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, ref ushort data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, ushort[] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, ushort[,] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, ushort[, ,] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, ref uint data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, uint[] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, uint[,] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, uint[, ,] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, ref bool data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, bool[,] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, bool[, ,] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, ref byte data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, byte[,] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, byte[, ,] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, ref short data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, short[,] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, short[, ,] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, ref int data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, int[,] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, int[, ,] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, ref float data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, float[,] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, float[, ,] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, ref double data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, double[,] data, int usage)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferData(int target, int size, double[, ,] data, int usage)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData")]
        public static IntPtr ext__GL_VERSION_1_5__glBufferSubData = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, bool[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, byte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, short[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, int[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, float[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, double[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, string data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, IntPtr data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, ref sbyte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, sbyte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, sbyte[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, sbyte[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, ref ushort data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, ushort[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, ushort[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, ushort[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, ref uint data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, uint[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, uint[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, uint[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, ref bool data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, bool[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, bool[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, ref byte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, byte[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, byte[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, ref short data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, short[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, short[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, ref int data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, int[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, int[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, ref float data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, float[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, float[, ,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, ref double data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, double[,] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glBufferSubData(int target, int offset, int size, double[, ,] data)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData")]
        public static IntPtr ext__GL_VERSION_1_5__glGetBufferSubData = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubData(int target, int offset, int size, [Out] bool[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubData(int target, int offset, int size, [Out] byte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubData(int target, int offset, int size, [Out] short[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubData(int target, int offset, int size, [Out] int[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubData(int target, int offset, int size, [Out] float[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubData(int target, int offset, int size, [Out] double[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubData(int target, int offset, int size, IntPtr data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubData(int target, int offset, int size, out bool data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubData(int target, int offset, int size, out byte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubData(int target, int offset, int size, out short data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubData(int target, int offset, int size, out int data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubData(int target, int offset, int size, out float data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubData(int target, int offset, int size, out double data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubData(int target, int offset, int size, out sbyte data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubData(int target, int offset, int size, [Out] sbyte[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubData(int target, int offset, int size, out ushort data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubData(int target, int offset, int size, [Out] ushort[] data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubData(int target, int offset, int size, out uint data)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferSubData(int target, int offset, int size, [Out] uint[] data)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_5", "glMapBuffer")]
        public static IntPtr ext__GL_VERSION_1_5__glMapBuffer = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_5", "glMapBuffer"), SuppressUnmanagedCodeSecurity]
        public static IntPtr glMapBuffer(int target, int access)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_5", "glUnmapBuffer")]
        public static IntPtr ext__GL_VERSION_1_5__glUnmapBuffer = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_5", "glUnmapBuffer"), SuppressUnmanagedCodeSecurity]
        public static int glUnmapBuffer(int target)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferParameteriv")]
        public static IntPtr ext__GL_VERSION_1_5__glGetBufferParameteriv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferParameteriv"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferParameteriv(int target, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferParameteriv"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferParameteriv(int target, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv")]
        public static IntPtr ext__GL_VERSION_1_5__glGetBufferPointerv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointerv(int target, int pname, [Out] bool[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointerv(int target, int pname, [Out] byte[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointerv(int target, int pname, [Out] short[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointerv(int target, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointerv(int target, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointerv(int target, int pname, [Out] double[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointerv(int target, int pname, IntPtr arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointerv(int target, int pname, out bool arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointerv(int target, int pname, out byte arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointerv(int target, int pname, out short arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointerv(int target, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointerv(int target, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointerv(int target, int pname, out double arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointerv(int target, int pname, out sbyte arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointerv(int target, int pname, [Out] sbyte[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointerv(int target, int pname, out ushort arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointerv(int target, int pname, [Out] ushort[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointerv(int target, int pname, out uint arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetBufferPointerv(int target, int pname, [Out] uint[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glBlendEquationSeparate")]
        public static IntPtr ext__GL_VERSION_2_0__glBlendEquationSeparate = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glBlendEquationSeparate"), SuppressUnmanagedCodeSecurity]
        public static void glBlendEquationSeparate(int modeRGB, int modeAlpha)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glDrawBuffers")]
        public static IntPtr ext__GL_VERSION_2_0__glDrawBuffers = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glDrawBuffers"), SuppressUnmanagedCodeSecurity]
        public static void glDrawBuffers(int n, ref int bufs)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glDrawBuffers"), SuppressUnmanagedCodeSecurity]
        public static void glDrawBuffers(int n, int[] bufs)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glStencilOpSeparate")]
        public static IntPtr ext__GL_VERSION_2_0__glStencilOpSeparate = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glStencilOpSeparate"), SuppressUnmanagedCodeSecurity]
        public static void glStencilOpSeparate(int face, int sfail, int dpfail, int dppass)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glStencilFuncSeparate")]
        public static IntPtr ext__GL_VERSION_2_0__glStencilFuncSeparate = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glStencilFuncSeparate"), SuppressUnmanagedCodeSecurity]
        public static void glStencilFuncSeparate(int frontfunc, int backfunc, int arg_ref, int mask)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glStencilFuncSeparate"), SuppressUnmanagedCodeSecurity]
        public static void glStencilFuncSeparate(int frontfunc, int backfunc, int arg_ref, uint mask)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glStencilMaskSeparate")]
        public static IntPtr ext__GL_VERSION_2_0__glStencilMaskSeparate = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glStencilMaskSeparate"), SuppressUnmanagedCodeSecurity]
        public static void glStencilMaskSeparate(int face, int mask)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glStencilMaskSeparate"), SuppressUnmanagedCodeSecurity]
        public static void glStencilMaskSeparate(int face, uint mask)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glAttachShader")]
        public static IntPtr ext__GL_VERSION_2_0__glAttachShader = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glAttachShader"), SuppressUnmanagedCodeSecurity]
        public static void glAttachShader(int program, int shader)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glAttachShader"), SuppressUnmanagedCodeSecurity]
        public static void glAttachShader(uint program, int shader)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glAttachShader"), SuppressUnmanagedCodeSecurity]
        public static void glAttachShader(int program, uint shader)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glAttachShader"), SuppressUnmanagedCodeSecurity]
        public static void glAttachShader(uint program, uint shader)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glBindAttribLocation")]
        public static IntPtr ext__GL_VERSION_2_0__glBindAttribLocation = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glBindAttribLocation"), SuppressUnmanagedCodeSecurity]
        public static void glBindAttribLocation(int program, int index, ref string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glBindAttribLocation"), SuppressUnmanagedCodeSecurity]
        public static void glBindAttribLocation(uint program, int index, ref string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glBindAttribLocation"), SuppressUnmanagedCodeSecurity]
        public static void glBindAttribLocation(int program, uint index, ref string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glBindAttribLocation"), SuppressUnmanagedCodeSecurity]
        public static void glBindAttribLocation(uint program, uint index, ref string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glBindAttribLocation"), SuppressUnmanagedCodeSecurity]
        public static void glBindAttribLocation(int program, int index, string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glBindAttribLocation"), SuppressUnmanagedCodeSecurity]
        public static void glBindAttribLocation(uint program, int index, string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glBindAttribLocation"), SuppressUnmanagedCodeSecurity]
        public static void glBindAttribLocation(int program, uint index, string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glBindAttribLocation"), SuppressUnmanagedCodeSecurity]
        public static void glBindAttribLocation(uint program, uint index, string[] name)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glCompileShader")]
        public static IntPtr ext__GL_VERSION_2_0__glCompileShader = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glCompileShader"), SuppressUnmanagedCodeSecurity]
        public static void glCompileShader(int shader)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glCompileShader"), SuppressUnmanagedCodeSecurity]
        public static void glCompileShader(uint shader)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glCreateProgram")]
        public static IntPtr ext__GL_VERSION_2_0__glCreateProgram = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glCreateProgram"), SuppressUnmanagedCodeSecurity]
        public static int glCreateProgram()
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glCreateShader")]
        public static IntPtr ext__GL_VERSION_2_0__glCreateShader = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glCreateShader"), SuppressUnmanagedCodeSecurity]
        public static int glCreateShader(int type)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glDeleteProgram")]
        public static IntPtr ext__GL_VERSION_2_0__glDeleteProgram = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glDeleteProgram"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteProgram(int program)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glDeleteProgram"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteProgram(uint program)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glDeleteShader")]
        public static IntPtr ext__GL_VERSION_2_0__glDeleteShader = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glDeleteShader"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteShader(int shader)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glDeleteShader"), SuppressUnmanagedCodeSecurity]
        public static void glDeleteShader(uint shader)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glDetachShader")]
        public static IntPtr ext__GL_VERSION_2_0__glDetachShader = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glDetachShader"), SuppressUnmanagedCodeSecurity]
        public static void glDetachShader(int program, int shader)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glDetachShader"), SuppressUnmanagedCodeSecurity]
        public static void glDetachShader(uint program, int shader)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glDetachShader"), SuppressUnmanagedCodeSecurity]
        public static void glDetachShader(int program, uint shader)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glDetachShader"), SuppressUnmanagedCodeSecurity]
        public static void glDetachShader(uint program, uint shader)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glDisableVertexAttribArray")]
        public static IntPtr ext__GL_VERSION_2_0__glDisableVertexAttribArray = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glDisableVertexAttribArray"), SuppressUnmanagedCodeSecurity]
        public static void glDisableVertexAttribArray(int index)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glDisableVertexAttribArray"), SuppressUnmanagedCodeSecurity]
        public static void glDisableVertexAttribArray(uint index)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glEnableVertexAttribArray")]
        public static IntPtr ext__GL_VERSION_2_0__glEnableVertexAttribArray = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glEnableVertexAttribArray"), SuppressUnmanagedCodeSecurity]
        public static void glEnableVertexAttribArray(int index)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glEnableVertexAttribArray"), SuppressUnmanagedCodeSecurity]
        public static void glEnableVertexAttribArray(uint index)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib")]
        public static IntPtr ext__GL_VERSION_2_0__glGetActiveAttrib = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(int program, int index, int bufSize, out int length, out int size, out int type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(uint program, int index, int bufSize, out int length, out int size, out int type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(int program, uint index, int bufSize, out int length, out int size, out int type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(uint program, uint index, int bufSize, out int length, out int size, out int type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(int program, int index, int bufSize, [Out] int[] length, out int size, out int type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(uint program, int index, int bufSize, [Out] int[] length, out int size, out int type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(int program, uint index, int bufSize, [Out] int[] length, out int size, out int type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(uint program, uint index, int bufSize, [Out] int[] length, out int size, out int type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(int program, int index, int bufSize, out int length, [Out] int[] size, out int type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(uint program, int index, int bufSize, out int length, [Out] int[] size, out int type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(int program, uint index, int bufSize, out int length, [Out] int[] size, out int type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(uint program, uint index, int bufSize, out int length, [Out] int[] size, out int type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(int program, int index, int bufSize, [Out] int[] length, [Out] int[] size, out int type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(uint program, int index, int bufSize, [Out] int[] length, [Out] int[] size, out int type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(int program, uint index, int bufSize, [Out] int[] length, [Out] int[] size, out int type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(uint program, uint index, int bufSize, [Out] int[] length, [Out] int[] size, out int type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(int program, int index, int bufSize, out int length, out int size, [Out] int[] type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(uint program, int index, int bufSize, out int length, out int size, [Out] int[] type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(int program, uint index, int bufSize, out int length, out int size, [Out] int[] type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(uint program, uint index, int bufSize, out int length, out int size, [Out] int[] type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(int program, int index, int bufSize, [Out] int[] length, out int size, [Out] int[] type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(uint program, int index, int bufSize, [Out] int[] length, out int size, [Out] int[] type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(int program, uint index, int bufSize, [Out] int[] length, out int size, [Out] int[] type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(uint program, uint index, int bufSize, [Out] int[] length, out int size, [Out] int[] type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(int program, int index, int bufSize, out int length, [Out] int[] size, [Out] int[] type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(uint program, int index, int bufSize, out int length, [Out] int[] size, [Out] int[] type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(int program, uint index, int bufSize, out int length, [Out] int[] size, [Out] int[] type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(uint program, uint index, int bufSize, out int length, [Out] int[] size, [Out] int[] type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(int program, int index, int bufSize, [Out] int[] length, [Out] int[] size, [Out] int[] type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(uint program, int index, int bufSize, [Out] int[] length, [Out] int[] size, [Out] int[] type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(int program, uint index, int bufSize, [Out] int[] length, [Out] int[] size, [Out] int[] type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(uint program, uint index, int bufSize, [Out] int[] length, [Out] int[] size, [Out] int[] type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(int program, int index, int bufSize, out int length, out int size, out int type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(uint program, int index, int bufSize, out int length, out int size, out int type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(int program, uint index, int bufSize, out int length, out int size, out int type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(uint program, uint index, int bufSize, out int length, out int size, out int type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(int program, int index, int bufSize, [Out] int[] length, out int size, out int type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(uint program, int index, int bufSize, [Out] int[] length, out int size, out int type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(int program, uint index, int bufSize, [Out] int[] length, out int size, out int type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(uint program, uint index, int bufSize, [Out] int[] length, out int size, out int type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(int program, int index, int bufSize, out int length, [Out] int[] size, out int type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(uint program, int index, int bufSize, out int length, [Out] int[] size, out int type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(int program, uint index, int bufSize, out int length, [Out] int[] size, out int type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(uint program, uint index, int bufSize, out int length, [Out] int[] size, out int type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(int program, int index, int bufSize, [Out] int[] length, [Out] int[] size, out int type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(uint program, int index, int bufSize, [Out] int[] length, [Out] int[] size, out int type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(int program, uint index, int bufSize, [Out] int[] length, [Out] int[] size, out int type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(uint program, uint index, int bufSize, [Out] int[] length, [Out] int[] size, out int type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(int program, int index, int bufSize, out int length, out int size, [Out] int[] type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(uint program, int index, int bufSize, out int length, out int size, [Out] int[] type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(int program, uint index, int bufSize, out int length, out int size, [Out] int[] type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(uint program, uint index, int bufSize, out int length, out int size, [Out] int[] type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(int program, int index, int bufSize, [Out] int[] length, out int size, [Out] int[] type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(uint program, int index, int bufSize, [Out] int[] length, out int size, [Out] int[] type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(int program, uint index, int bufSize, [Out] int[] length, out int size, [Out] int[] type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(uint program, uint index, int bufSize, [Out] int[] length, out int size, [Out] int[] type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(int program, int index, int bufSize, out int length, [Out] int[] size, [Out] int[] type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(uint program, int index, int bufSize, out int length, [Out] int[] size, [Out] int[] type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(int program, uint index, int bufSize, out int length, [Out] int[] size, [Out] int[] type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(uint program, uint index, int bufSize, out int length, [Out] int[] size, [Out] int[] type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(int program, int index, int bufSize, [Out] int[] length, [Out] int[] size, [Out] int[] type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(uint program, int index, int bufSize, [Out] int[] length, [Out] int[] size, [Out] int[] type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(int program, uint index, int bufSize, [Out] int[] length, [Out] int[] size, [Out] int[] type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveAttrib(uint program, uint index, int bufSize, [Out] int[] length, [Out] int[] size, [Out] int[] type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform")]
        public static IntPtr ext__GL_VERSION_2_0__glGetActiveUniform = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(int program, int index, int bufSize, out int length, out int size, out int type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(uint program, int index, int bufSize, out int length, out int size, out int type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(int program, uint index, int bufSize, out int length, out int size, out int type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(uint program, uint index, int bufSize, out int length, out int size, out int type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(int program, int index, int bufSize, [Out] int[] length, out int size, out int type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(uint program, int index, int bufSize, [Out] int[] length, out int size, out int type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(int program, uint index, int bufSize, [Out] int[] length, out int size, out int type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(uint program, uint index, int bufSize, [Out] int[] length, out int size, out int type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(int program, int index, int bufSize, out int length, [Out] int[] size, out int type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(uint program, int index, int bufSize, out int length, [Out] int[] size, out int type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(int program, uint index, int bufSize, out int length, [Out] int[] size, out int type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(uint program, uint index, int bufSize, out int length, [Out] int[] size, out int type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(int program, int index, int bufSize, [Out] int[] length, [Out] int[] size, out int type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(uint program, int index, int bufSize, [Out] int[] length, [Out] int[] size, out int type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(int program, uint index, int bufSize, [Out] int[] length, [Out] int[] size, out int type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(uint program, uint index, int bufSize, [Out] int[] length, [Out] int[] size, out int type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(int program, int index, int bufSize, out int length, out int size, [Out] int[] type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(uint program, int index, int bufSize, out int length, out int size, [Out] int[] type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(int program, uint index, int bufSize, out int length, out int size, [Out] int[] type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(uint program, uint index, int bufSize, out int length, out int size, [Out] int[] type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(int program, int index, int bufSize, [Out] int[] length, out int size, [Out] int[] type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(uint program, int index, int bufSize, [Out] int[] length, out int size, [Out] int[] type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(int program, uint index, int bufSize, [Out] int[] length, out int size, [Out] int[] type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(uint program, uint index, int bufSize, [Out] int[] length, out int size, [Out] int[] type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(int program, int index, int bufSize, out int length, [Out] int[] size, [Out] int[] type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(uint program, int index, int bufSize, out int length, [Out] int[] size, [Out] int[] type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(int program, uint index, int bufSize, out int length, [Out] int[] size, [Out] int[] type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(uint program, uint index, int bufSize, out int length, [Out] int[] size, [Out] int[] type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(int program, int index, int bufSize, [Out] int[] length, [Out] int[] size, [Out] int[] type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(uint program, int index, int bufSize, [Out] int[] length, [Out] int[] size, [Out] int[] type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(int program, uint index, int bufSize, [Out] int[] length, [Out] int[] size, [Out] int[] type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(uint program, uint index, int bufSize, [Out] int[] length, [Out] int[] size, [Out] int[] type, out string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(int program, int index, int bufSize, out int length, out int size, out int type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(uint program, int index, int bufSize, out int length, out int size, out int type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(int program, uint index, int bufSize, out int length, out int size, out int type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(uint program, uint index, int bufSize, out int length, out int size, out int type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(int program, int index, int bufSize, [Out] int[] length, out int size, out int type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(uint program, int index, int bufSize, [Out] int[] length, out int size, out int type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(int program, uint index, int bufSize, [Out] int[] length, out int size, out int type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(uint program, uint index, int bufSize, [Out] int[] length, out int size, out int type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(int program, int index, int bufSize, out int length, [Out] int[] size, out int type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(uint program, int index, int bufSize, out int length, [Out] int[] size, out int type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(int program, uint index, int bufSize, out int length, [Out] int[] size, out int type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(uint program, uint index, int bufSize, out int length, [Out] int[] size, out int type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(int program, int index, int bufSize, [Out] int[] length, [Out] int[] size, out int type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(uint program, int index, int bufSize, [Out] int[] length, [Out] int[] size, out int type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(int program, uint index, int bufSize, [Out] int[] length, [Out] int[] size, out int type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(uint program, uint index, int bufSize, [Out] int[] length, [Out] int[] size, out int type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(int program, int index, int bufSize, out int length, out int size, [Out] int[] type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(uint program, int index, int bufSize, out int length, out int size, [Out] int[] type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(int program, uint index, int bufSize, out int length, out int size, [Out] int[] type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(uint program, uint index, int bufSize, out int length, out int size, [Out] int[] type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(int program, int index, int bufSize, [Out] int[] length, out int size, [Out] int[] type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(uint program, int index, int bufSize, [Out] int[] length, out int size, [Out] int[] type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(int program, uint index, int bufSize, [Out] int[] length, out int size, [Out] int[] type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(uint program, uint index, int bufSize, [Out] int[] length, out int size, [Out] int[] type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(int program, int index, int bufSize, out int length, [Out] int[] size, [Out] int[] type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(uint program, int index, int bufSize, out int length, [Out] int[] size, [Out] int[] type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(int program, uint index, int bufSize, out int length, [Out] int[] size, [Out] int[] type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(uint program, uint index, int bufSize, out int length, [Out] int[] size, [Out] int[] type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(int program, int index, int bufSize, [Out] int[] length, [Out] int[] size, [Out] int[] type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(uint program, int index, int bufSize, [Out] int[] length, [Out] int[] size, [Out] int[] type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(int program, uint index, int bufSize, [Out] int[] length, [Out] int[] size, [Out] int[] type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity]
        public static void glGetActiveUniform(uint program, uint index, int bufSize, [Out] int[] length, [Out] int[] size, [Out] int[] type, [Out] string[] name)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttachedShaders")]
        public static IntPtr ext__GL_VERSION_2_0__glGetAttachedShaders = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttachedShaders"), SuppressUnmanagedCodeSecurity]
        public static void glGetAttachedShaders(int program, int maxCount, out int count, out int obj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttachedShaders"), SuppressUnmanagedCodeSecurity]
        public static void glGetAttachedShaders(uint program, int maxCount, out int count, out int obj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttachedShaders"), SuppressUnmanagedCodeSecurity]
        public static void glGetAttachedShaders(int program, int maxCount, [Out] int[] count, out int obj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttachedShaders"), SuppressUnmanagedCodeSecurity]
        public static void glGetAttachedShaders(uint program, int maxCount, [Out] int[] count, out int obj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttachedShaders"), SuppressUnmanagedCodeSecurity]
        public static void glGetAttachedShaders(int program, int maxCount, out int count, [Out] int[] obj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttachedShaders"), SuppressUnmanagedCodeSecurity]
        public static void glGetAttachedShaders(uint program, int maxCount, out int count, [Out] int[] obj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttachedShaders"), SuppressUnmanagedCodeSecurity]
        public static void glGetAttachedShaders(int program, int maxCount, [Out] int[] count, [Out] int[] obj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttachedShaders"), SuppressUnmanagedCodeSecurity]
        public static void glGetAttachedShaders(uint program, int maxCount, [Out] int[] count, [Out] int[] obj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttachedShaders"), SuppressUnmanagedCodeSecurity]
        public static void glGetAttachedShaders(int program, int maxCount, out int count, out uint obj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttachedShaders"), SuppressUnmanagedCodeSecurity]
        public static void glGetAttachedShaders(uint program, int maxCount, out int count, out uint obj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttachedShaders"), SuppressUnmanagedCodeSecurity]
        public static void glGetAttachedShaders(int program, int maxCount, [Out] int[] count, out uint obj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttachedShaders"), SuppressUnmanagedCodeSecurity]
        public static void glGetAttachedShaders(uint program, int maxCount, [Out] int[] count, out uint obj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttachedShaders"), SuppressUnmanagedCodeSecurity]
        public static void glGetAttachedShaders(int program, int maxCount, out int count, [Out] uint[] obj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttachedShaders"), SuppressUnmanagedCodeSecurity]
        public static void glGetAttachedShaders(uint program, int maxCount, out int count, [Out] uint[] obj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttachedShaders"), SuppressUnmanagedCodeSecurity]
        public static void glGetAttachedShaders(int program, int maxCount, [Out] int[] count, [Out] uint[] obj)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttachedShaders"), SuppressUnmanagedCodeSecurity]
        public static void glGetAttachedShaders(uint program, int maxCount, [Out] int[] count, [Out] uint[] obj)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttribLocation")]
        public static IntPtr ext__GL_VERSION_2_0__glGetAttribLocation = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttribLocation"), SuppressUnmanagedCodeSecurity]
        public static int glGetAttribLocation(int program, ref string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttribLocation"), SuppressUnmanagedCodeSecurity]
        public static int glGetAttribLocation(uint program, ref string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttribLocation"), SuppressUnmanagedCodeSecurity]
        public static int glGetAttribLocation(int program, string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttribLocation"), SuppressUnmanagedCodeSecurity]
        public static int glGetAttribLocation(uint program, string[] name)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetProgramiv")]
        public static IntPtr ext__GL_VERSION_2_0__glGetProgramiv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetProgramiv"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramiv(int program, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetProgramiv"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramiv(uint program, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetProgramiv"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramiv(int program, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetProgramiv"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramiv(uint program, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetProgramInfoLog")]
        public static IntPtr ext__GL_VERSION_2_0__glGetProgramInfoLog = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetProgramInfoLog"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramInfoLog(int program, int bufSize, out int length, out string infoLog)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetProgramInfoLog"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramInfoLog(uint program, int bufSize, out int length, out string infoLog)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetProgramInfoLog"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramInfoLog(int program, int bufSize, [Out] int[] length, out string infoLog)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetProgramInfoLog"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramInfoLog(uint program, int bufSize, [Out] int[] length, out string infoLog)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetProgramInfoLog"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramInfoLog(int program, int bufSize, out int length, [Out] string[] infoLog)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetProgramInfoLog"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramInfoLog(uint program, int bufSize, out int length, [Out] string[] infoLog)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetProgramInfoLog"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramInfoLog(int program, int bufSize, [Out] int[] length, [Out] string[] infoLog)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetProgramInfoLog"), SuppressUnmanagedCodeSecurity]
        public static void glGetProgramInfoLog(uint program, int bufSize, [Out] int[] length, [Out] string[] infoLog)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderiv")]
        public static IntPtr ext__GL_VERSION_2_0__glGetShaderiv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderiv"), SuppressUnmanagedCodeSecurity]
        public static void glGetShaderiv(int shader, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderiv"), SuppressUnmanagedCodeSecurity]
        public static void glGetShaderiv(uint shader, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderiv"), SuppressUnmanagedCodeSecurity]
        public static void glGetShaderiv(int shader, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderiv"), SuppressUnmanagedCodeSecurity]
        public static void glGetShaderiv(uint shader, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderInfoLog")]
        public static IntPtr ext__GL_VERSION_2_0__glGetShaderInfoLog = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderInfoLog"), SuppressUnmanagedCodeSecurity]
        public static void glGetShaderInfoLog(int shader, int bufSize, out int length, out string infoLog)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderInfoLog"), SuppressUnmanagedCodeSecurity]
        public static void glGetShaderInfoLog(uint shader, int bufSize, out int length, out string infoLog)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderInfoLog"), SuppressUnmanagedCodeSecurity]
        public static void glGetShaderInfoLog(int shader, int bufSize, [Out] int[] length, out string infoLog)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderInfoLog"), SuppressUnmanagedCodeSecurity]
        public static void glGetShaderInfoLog(uint shader, int bufSize, [Out] int[] length, out string infoLog)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderInfoLog"), SuppressUnmanagedCodeSecurity]
        public static void glGetShaderInfoLog(int shader, int bufSize, out int length, [Out] string[] infoLog)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderInfoLog"), SuppressUnmanagedCodeSecurity]
        public static void glGetShaderInfoLog(uint shader, int bufSize, out int length, [Out] string[] infoLog)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderInfoLog"), SuppressUnmanagedCodeSecurity]
        public static void glGetShaderInfoLog(int shader, int bufSize, [Out] int[] length, [Out] string[] infoLog)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderInfoLog"), SuppressUnmanagedCodeSecurity]
        public static void glGetShaderInfoLog(uint shader, int bufSize, [Out] int[] length, [Out] string[] infoLog)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderSource")]
        public static IntPtr ext__GL_VERSION_2_0__glGetShaderSource = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderSource"), SuppressUnmanagedCodeSecurity]
        public static void glGetShaderSource(int shader, int bufSize, out int length, out string source)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderSource"), SuppressUnmanagedCodeSecurity]
        public static void glGetShaderSource(uint shader, int bufSize, out int length, out string source)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderSource"), SuppressUnmanagedCodeSecurity]
        public static void glGetShaderSource(int shader, int bufSize, [Out] int[] length, out string source)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderSource"), SuppressUnmanagedCodeSecurity]
        public static void glGetShaderSource(uint shader, int bufSize, [Out] int[] length, out string source)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderSource"), SuppressUnmanagedCodeSecurity]
        public static void glGetShaderSource(int shader, int bufSize, out int length, [Out] string[] source)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderSource"), SuppressUnmanagedCodeSecurity]
        public static void glGetShaderSource(uint shader, int bufSize, out int length, [Out] string[] source)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderSource"), SuppressUnmanagedCodeSecurity]
        public static void glGetShaderSource(int shader, int bufSize, [Out] int[] length, [Out] string[] source)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderSource"), SuppressUnmanagedCodeSecurity]
        public static void glGetShaderSource(uint shader, int bufSize, [Out] int[] length, [Out] string[] source)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetUniformLocation")]
        public static IntPtr ext__GL_VERSION_2_0__glGetUniformLocation = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetUniformLocation"), SuppressUnmanagedCodeSecurity]
        public static int glGetUniformLocation(int program, ref string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetUniformLocation"), SuppressUnmanagedCodeSecurity]
        public static int glGetUniformLocation(uint program, ref string name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetUniformLocation"), SuppressUnmanagedCodeSecurity]
        public static int glGetUniformLocation(int program, string[] name)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetUniformLocation"), SuppressUnmanagedCodeSecurity]
        public static int glGetUniformLocation(uint program, string[] name)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetUniformfv")]
        public static IntPtr ext__GL_VERSION_2_0__glGetUniformfv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetUniformfv"), SuppressUnmanagedCodeSecurity]
        public static void glGetUniformfv(int program, int location, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetUniformfv"), SuppressUnmanagedCodeSecurity]
        public static void glGetUniformfv(uint program, int location, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetUniformfv"), SuppressUnmanagedCodeSecurity]
        public static void glGetUniformfv(int program, int location, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetUniformfv"), SuppressUnmanagedCodeSecurity]
        public static void glGetUniformfv(uint program, int location, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetUniformiv")]
        public static IntPtr ext__GL_VERSION_2_0__glGetUniformiv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetUniformiv"), SuppressUnmanagedCodeSecurity]
        public static void glGetUniformiv(int program, int location, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetUniformiv"), SuppressUnmanagedCodeSecurity]
        public static void glGetUniformiv(uint program, int location, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetUniformiv"), SuppressUnmanagedCodeSecurity]
        public static void glGetUniformiv(int program, int location, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetUniformiv"), SuppressUnmanagedCodeSecurity]
        public static void glGetUniformiv(uint program, int location, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribdv")]
        public static IntPtr ext__GL_VERSION_2_0__glGetVertexAttribdv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribdv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribdv(int index, int pname, out double arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribdv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribdv(uint index, int pname, out double arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribdv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribdv(int index, int pname, [Out] double[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribdv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribdv(uint index, int pname, [Out] double[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribfv")]
        public static IntPtr ext__GL_VERSION_2_0__glGetVertexAttribfv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribfv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribfv(int index, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribfv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribfv(uint index, int pname, out float arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribfv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribfv(int index, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribfv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribfv(uint index, int pname, [Out] float[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribiv")]
        public static IntPtr ext__GL_VERSION_2_0__glGetVertexAttribiv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribiv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribiv(int index, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribiv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribiv(uint index, int pname, out int arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribiv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribiv(int index, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribiv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribiv(uint index, int pname, [Out] int[] arg_params)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv")]
        public static IntPtr ext__GL_VERSION_2_0__glGetVertexAttribPointerv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(int index, int pname, [Out] bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(uint index, int pname, [Out] bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(int index, int pname, [Out] byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(uint index, int pname, [Out] byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(int index, int pname, [Out] short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(uint index, int pname, [Out] short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(int index, int pname, [Out] int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(uint index, int pname, [Out] int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(int index, int pname, [Out] float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(uint index, int pname, [Out] float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(int index, int pname, [Out] double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(uint index, int pname, [Out] double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(int index, int pname, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(uint index, int pname, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(int index, int pname, out bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(uint index, int pname, out bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(int index, int pname, out byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(uint index, int pname, out byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(int index, int pname, out short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(uint index, int pname, out short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(int index, int pname, out int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(uint index, int pname, out int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(int index, int pname, out float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(uint index, int pname, out float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(int index, int pname, out double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(uint index, int pname, out double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(int index, int pname, out sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(uint index, int pname, out sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(int index, int pname, [Out] sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(uint index, int pname, [Out] sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(int index, int pname, out ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(uint index, int pname, out ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(int index, int pname, [Out] ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(uint index, int pname, [Out] ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(int index, int pname, out uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(uint index, int pname, out uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(int index, int pname, [Out] uint[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity]
        public static void glGetVertexAttribPointerv(uint index, int pname, [Out] uint[] pointer)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glIsProgram")]
        public static IntPtr ext__GL_VERSION_2_0__glIsProgram = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glIsProgram"), SuppressUnmanagedCodeSecurity]
        public static int glIsProgram(int program)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glIsProgram"), SuppressUnmanagedCodeSecurity]
        public static int glIsProgram(uint program)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glIsShader")]
        public static IntPtr ext__GL_VERSION_2_0__glIsShader = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glIsShader"), SuppressUnmanagedCodeSecurity]
        public static int glIsShader(int shader)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glIsShader"), SuppressUnmanagedCodeSecurity]
        public static int glIsShader(uint shader)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glLinkProgram")]
        public static IntPtr ext__GL_VERSION_2_0__glLinkProgram = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glLinkProgram"), SuppressUnmanagedCodeSecurity]
        public static void glLinkProgram(int program)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glLinkProgram"), SuppressUnmanagedCodeSecurity]
        public static void glLinkProgram(uint program)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glShaderSource")]
        public static IntPtr ext__GL_VERSION_2_0__glShaderSource = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glShaderSource"), SuppressUnmanagedCodeSecurity]
        public static void glShaderSource(int shader, int count, ref string[] arg_string, ref int length)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glShaderSource"), SuppressUnmanagedCodeSecurity]
        public static void glShaderSource(uint shader, int count, ref string[] arg_string, ref int length)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glShaderSource"), SuppressUnmanagedCodeSecurity]
        public static void glShaderSource(int shader, int count, string[][] arg_string, ref int length)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glShaderSource"), SuppressUnmanagedCodeSecurity]
        public static void glShaderSource(uint shader, int count, string[][] arg_string, ref int length)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glShaderSource"), SuppressUnmanagedCodeSecurity]
        public static void glShaderSource(int shader, int count, ref string[] arg_string, int[] length)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glShaderSource"), SuppressUnmanagedCodeSecurity]
        public static void glShaderSource(uint shader, int count, ref string[] arg_string, int[] length)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glShaderSource"), SuppressUnmanagedCodeSecurity]
        public static void glShaderSource(int shader, int count, string[][] arg_string, int[] length)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glShaderSource"), SuppressUnmanagedCodeSecurity]
        public static void glShaderSource(uint shader, int count, string[][] arg_string, int[] length)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUseProgram")]
        public static IntPtr ext__GL_VERSION_2_0__glUseProgram = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUseProgram"), SuppressUnmanagedCodeSecurity]
        public static void glUseProgram(int program)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glUseProgram"), SuppressUnmanagedCodeSecurity]
        public static void glUseProgram(uint program)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform1f")]
        public static IntPtr ext__GL_VERSION_2_0__glUniform1f = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform1f"), SuppressUnmanagedCodeSecurity]
        public static void glUniform1f(int location, float v0)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform2f")]
        public static IntPtr ext__GL_VERSION_2_0__glUniform2f = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform2f"), SuppressUnmanagedCodeSecurity]
        public static void glUniform2f(int location, float v0, float v1)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform3f")]
        public static IntPtr ext__GL_VERSION_2_0__glUniform3f = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform3f"), SuppressUnmanagedCodeSecurity]
        public static void glUniform3f(int location, float v0, float v1, float v2)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform4f")]
        public static IntPtr ext__GL_VERSION_2_0__glUniform4f = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform4f"), SuppressUnmanagedCodeSecurity]
        public static void glUniform4f(int location, float v0, float v1, float v2, float v3)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform1i")]
        public static IntPtr ext__GL_VERSION_2_0__glUniform1i = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform1i"), SuppressUnmanagedCodeSecurity]
        public static void glUniform1i(int location, int v0)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform2i")]
        public static IntPtr ext__GL_VERSION_2_0__glUniform2i = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform2i"), SuppressUnmanagedCodeSecurity]
        public static void glUniform2i(int location, int v0, int v1)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform3i")]
        public static IntPtr ext__GL_VERSION_2_0__glUniform3i = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform3i"), SuppressUnmanagedCodeSecurity]
        public static void glUniform3i(int location, int v0, int v1, int v2)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform4i")]
        public static IntPtr ext__GL_VERSION_2_0__glUniform4i = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform4i"), SuppressUnmanagedCodeSecurity]
        public static void glUniform4i(int location, int v0, int v1, int v2, int v3)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform1fv")]
        public static IntPtr ext__GL_VERSION_2_0__glUniform1fv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform1fv"), SuppressUnmanagedCodeSecurity]
        public static void glUniform1fv(int location, int count, ref float value)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform1fv"), SuppressUnmanagedCodeSecurity]
        public static void glUniform1fv(int location, int count, float[] value)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform2fv")]
        public static IntPtr ext__GL_VERSION_2_0__glUniform2fv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform2fv"), SuppressUnmanagedCodeSecurity]
        public static void glUniform2fv(int location, int count, ref float value)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform2fv"), SuppressUnmanagedCodeSecurity]
        public static void glUniform2fv(int location, int count, float[] value)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform3fv")]
        public static IntPtr ext__GL_VERSION_2_0__glUniform3fv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform3fv"), SuppressUnmanagedCodeSecurity]
        public static void glUniform3fv(int location, int count, ref float value)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform3fv"), SuppressUnmanagedCodeSecurity]
        public static void glUniform3fv(int location, int count, float[] value)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform4fv")]
        public static IntPtr ext__GL_VERSION_2_0__glUniform4fv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform4fv"), SuppressUnmanagedCodeSecurity]
        public static void glUniform4fv(int location, int count, ref float value)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform4fv"), SuppressUnmanagedCodeSecurity]
        public static void glUniform4fv(int location, int count, float[] value)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform1iv")]
        public static IntPtr ext__GL_VERSION_2_0__glUniform1iv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform1iv"), SuppressUnmanagedCodeSecurity]
        public static void glUniform1iv(int location, int count, ref int value)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform1iv"), SuppressUnmanagedCodeSecurity]
        public static void glUniform1iv(int location, int count, int[] value)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform2iv")]
        public static IntPtr ext__GL_VERSION_2_0__glUniform2iv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform2iv"), SuppressUnmanagedCodeSecurity]
        public static void glUniform2iv(int location, int count, ref int value)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform2iv"), SuppressUnmanagedCodeSecurity]
        public static void glUniform2iv(int location, int count, int[] value)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform3iv")]
        public static IntPtr ext__GL_VERSION_2_0__glUniform3iv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform3iv"), SuppressUnmanagedCodeSecurity]
        public static void glUniform3iv(int location, int count, ref int value)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform3iv"), SuppressUnmanagedCodeSecurity]
        public static void glUniform3iv(int location, int count, int[] value)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform4iv")]
        public static IntPtr ext__GL_VERSION_2_0__glUniform4iv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform4iv"), SuppressUnmanagedCodeSecurity]
        public static void glUniform4iv(int location, int count, ref int value)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform4iv"), SuppressUnmanagedCodeSecurity]
        public static void glUniform4iv(int location, int count, int[] value)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniformMatrix2fv")]
        public static IntPtr ext__GL_VERSION_2_0__glUniformMatrix2fv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniformMatrix2fv"), SuppressUnmanagedCodeSecurity]
        public static void glUniformMatrix2fv(int location, int count, int transpose, ref float value)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniformMatrix2fv"), SuppressUnmanagedCodeSecurity]
        public static void glUniformMatrix2fv(int location, int count, bool transpose, ref float value)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniformMatrix2fv"), SuppressUnmanagedCodeSecurity]
        public static void glUniformMatrix2fv(int location, int count, int transpose, float[] value)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniformMatrix2fv"), SuppressUnmanagedCodeSecurity]
        public static void glUniformMatrix2fv(int location, int count, bool transpose, float[] value)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniformMatrix3fv")]
        public static IntPtr ext__GL_VERSION_2_0__glUniformMatrix3fv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniformMatrix3fv"), SuppressUnmanagedCodeSecurity]
        public static void glUniformMatrix3fv(int location, int count, int transpose, ref float value)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniformMatrix3fv"), SuppressUnmanagedCodeSecurity]
        public static void glUniformMatrix3fv(int location, int count, bool transpose, ref float value)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniformMatrix3fv"), SuppressUnmanagedCodeSecurity]
        public static void glUniformMatrix3fv(int location, int count, int transpose, float[] value)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniformMatrix3fv"), SuppressUnmanagedCodeSecurity]
        public static void glUniformMatrix3fv(int location, int count, bool transpose, float[] value)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniformMatrix4fv")]
        public static IntPtr ext__GL_VERSION_2_0__glUniformMatrix4fv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniformMatrix4fv"), SuppressUnmanagedCodeSecurity]
        public static void glUniformMatrix4fv(int location, int count, int transpose, ref float value)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniformMatrix4fv"), SuppressUnmanagedCodeSecurity]
        public static void glUniformMatrix4fv(int location, int count, bool transpose, ref float value)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniformMatrix4fv"), SuppressUnmanagedCodeSecurity]
        public static void glUniformMatrix4fv(int location, int count, int transpose, float[] value)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glUniformMatrix4fv"), SuppressUnmanagedCodeSecurity]
        public static void glUniformMatrix4fv(int location, int count, bool transpose, float[] value)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glValidateProgram")]
        public static IntPtr ext__GL_VERSION_2_0__glValidateProgram = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glValidateProgram"), SuppressUnmanagedCodeSecurity]
        public static void glValidateProgram(int program)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glValidateProgram"), SuppressUnmanagedCodeSecurity]
        public static void glValidateProgram(uint program)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1d")]
        public static IntPtr ext__GL_VERSION_2_0__glVertexAttrib1d = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1d"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1d(int index, double x)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1d"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1d(uint index, double x)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1dv")]
        public static IntPtr ext__GL_VERSION_2_0__glVertexAttrib1dv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1dv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1dv(int index, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1dv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1dv(uint index, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1dv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1dv(int index, double[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1dv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1dv(uint index, double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1f")]
        public static IntPtr ext__GL_VERSION_2_0__glVertexAttrib1f = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1f"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1f(int index, float x)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1f"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1f(uint index, float x)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1fv")]
        public static IntPtr ext__GL_VERSION_2_0__glVertexAttrib1fv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1fv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1fv(int index, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1fv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1fv(uint index, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1fv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1fv(int index, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1fv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1fv(uint index, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1s")]
        public static IntPtr ext__GL_VERSION_2_0__glVertexAttrib1s = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1s"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1s(int index, short x)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1s"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1s(uint index, short x)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1sv")]
        public static IntPtr ext__GL_VERSION_2_0__glVertexAttrib1sv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1sv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1sv(int index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1sv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1sv(uint index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1sv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1sv(int index, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1sv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib1sv(uint index, short[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2d")]
        public static IntPtr ext__GL_VERSION_2_0__glVertexAttrib2d = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2d"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2d(int index, double x, double y)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2d"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2d(uint index, double x, double y)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2dv")]
        public static IntPtr ext__GL_VERSION_2_0__glVertexAttrib2dv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2dv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2dv(int index, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2dv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2dv(uint index, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2dv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2dv(int index, double[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2dv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2dv(uint index, double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2f")]
        public static IntPtr ext__GL_VERSION_2_0__glVertexAttrib2f = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2f"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2f(int index, float x, float y)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2f"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2f(uint index, float x, float y)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2fv")]
        public static IntPtr ext__GL_VERSION_2_0__glVertexAttrib2fv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2fv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2fv(int index, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2fv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2fv(uint index, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2fv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2fv(int index, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2fv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2fv(uint index, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2s")]
        public static IntPtr ext__GL_VERSION_2_0__glVertexAttrib2s = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2s"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2s(int index, short x, short y)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2s"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2s(uint index, short x, short y)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2sv")]
        public static IntPtr ext__GL_VERSION_2_0__glVertexAttrib2sv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2sv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2sv(int index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2sv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2sv(uint index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2sv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2sv(int index, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2sv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib2sv(uint index, short[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3d")]
        public static IntPtr ext__GL_VERSION_2_0__glVertexAttrib3d = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3d"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3d(int index, double x, double y, double z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3d"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3d(uint index, double x, double y, double z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3dv")]
        public static IntPtr ext__GL_VERSION_2_0__glVertexAttrib3dv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3dv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3dv(int index, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3dv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3dv(uint index, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3dv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3dv(int index, double[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3dv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3dv(uint index, double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3f")]
        public static IntPtr ext__GL_VERSION_2_0__glVertexAttrib3f = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3f"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3f(int index, float x, float y, float z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3f"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3f(uint index, float x, float y, float z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3fv")]
        public static IntPtr ext__GL_VERSION_2_0__glVertexAttrib3fv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3fv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3fv(int index, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3fv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3fv(uint index, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3fv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3fv(int index, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3fv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3fv(uint index, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3s")]
        public static IntPtr ext__GL_VERSION_2_0__glVertexAttrib3s = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3s"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3s(int index, short x, short y, short z)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3s"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3s(uint index, short x, short y, short z)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3sv")]
        public static IntPtr ext__GL_VERSION_2_0__glVertexAttrib3sv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3sv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3sv(int index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3sv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3sv(uint index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3sv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3sv(int index, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3sv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib3sv(uint index, short[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nbv")]
        public static IntPtr ext__GL_VERSION_2_0__glVertexAttrib4Nbv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nbv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Nbv(int index, ref byte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nbv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Nbv(uint index, ref byte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nbv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Nbv(int index, byte[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nbv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Nbv(uint index, byte[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nbv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Nbv(int index, ref sbyte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nbv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Nbv(uint index, ref sbyte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nbv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Nbv(int index, sbyte[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nbv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Nbv(uint index, sbyte[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Niv")]
        public static IntPtr ext__GL_VERSION_2_0__glVertexAttrib4Niv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Niv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Niv(int index, ref int v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Niv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Niv(uint index, ref int v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Niv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Niv(int index, int[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Niv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Niv(uint index, int[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nsv")]
        public static IntPtr ext__GL_VERSION_2_0__glVertexAttrib4Nsv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nsv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Nsv(int index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nsv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Nsv(uint index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nsv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Nsv(int index, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nsv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Nsv(uint index, short[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nub")]
        public static IntPtr ext__GL_VERSION_2_0__glVertexAttrib4Nub = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nub"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Nub(int index, byte x, byte y, byte z, byte w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nub"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Nub(uint index, byte x, byte y, byte z, byte w)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nubv")]
        public static IntPtr ext__GL_VERSION_2_0__glVertexAttrib4Nubv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nubv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Nubv(int index, ref byte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nubv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Nubv(uint index, ref byte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nubv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Nubv(int index, byte[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nubv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Nubv(uint index, byte[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nuiv")]
        public static IntPtr ext__GL_VERSION_2_0__glVertexAttrib4Nuiv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nuiv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Nuiv(int index, ref int v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nuiv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Nuiv(uint index, ref int v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nuiv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Nuiv(int index, int[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nuiv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Nuiv(uint index, int[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nuiv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Nuiv(int index, ref uint v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nuiv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Nuiv(uint index, ref uint v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nuiv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Nuiv(int index, uint[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nuiv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Nuiv(uint index, uint[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nusv")]
        public static IntPtr ext__GL_VERSION_2_0__glVertexAttrib4Nusv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nusv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Nusv(int index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nusv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Nusv(uint index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nusv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Nusv(int index, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nusv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Nusv(uint index, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nusv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Nusv(int index, ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nusv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Nusv(uint index, ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nusv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Nusv(int index, ushort[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nusv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4Nusv(uint index, ushort[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4bv")]
        public static IntPtr ext__GL_VERSION_2_0__glVertexAttrib4bv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4bv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4bv(int index, ref byte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4bv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4bv(uint index, ref byte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4bv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4bv(int index, byte[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4bv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4bv(uint index, byte[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4bv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4bv(int index, ref sbyte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4bv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4bv(uint index, ref sbyte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4bv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4bv(int index, sbyte[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4bv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4bv(uint index, sbyte[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4d")]
        public static IntPtr ext__GL_VERSION_2_0__glVertexAttrib4d = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4d"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4d(int index, double x, double y, double z, double w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4d"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4d(uint index, double x, double y, double z, double w)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4dv")]
        public static IntPtr ext__GL_VERSION_2_0__glVertexAttrib4dv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4dv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4dv(int index, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4dv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4dv(uint index, ref double v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4dv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4dv(int index, double[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4dv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4dv(uint index, double[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4f")]
        public static IntPtr ext__GL_VERSION_2_0__glVertexAttrib4f = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4f"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4f(int index, float x, float y, float z, float w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4f"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4f(uint index, float x, float y, float z, float w)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4fv")]
        public static IntPtr ext__GL_VERSION_2_0__glVertexAttrib4fv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4fv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4fv(int index, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4fv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4fv(uint index, ref float v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4fv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4fv(int index, float[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4fv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4fv(uint index, float[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4iv")]
        public static IntPtr ext__GL_VERSION_2_0__glVertexAttrib4iv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4iv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4iv(int index, ref int v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4iv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4iv(uint index, ref int v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4iv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4iv(int index, int[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4iv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4iv(uint index, int[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4s")]
        public static IntPtr ext__GL_VERSION_2_0__glVertexAttrib4s = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4s"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4s(int index, short x, short y, short z, short w)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4s"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4s(uint index, short x, short y, short z, short w)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4sv")]
        public static IntPtr ext__GL_VERSION_2_0__glVertexAttrib4sv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4sv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4sv(int index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4sv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4sv(uint index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4sv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4sv(int index, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4sv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4sv(uint index, short[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4ubv")]
        public static IntPtr ext__GL_VERSION_2_0__glVertexAttrib4ubv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4ubv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4ubv(int index, ref byte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4ubv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4ubv(uint index, ref byte v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4ubv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4ubv(int index, byte[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4ubv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4ubv(uint index, byte[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4uiv")]
        public static IntPtr ext__GL_VERSION_2_0__glVertexAttrib4uiv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4uiv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4uiv(int index, ref int v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4uiv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4uiv(uint index, ref int v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4uiv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4uiv(int index, int[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4uiv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4uiv(uint index, int[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4uiv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4uiv(int index, ref uint v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4uiv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4uiv(uint index, ref uint v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4uiv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4uiv(int index, uint[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4uiv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4uiv(uint index, uint[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4usv")]
        public static IntPtr ext__GL_VERSION_2_0__glVertexAttrib4usv = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4usv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4usv(int index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4usv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4usv(uint index, ref short v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4usv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4usv(int index, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4usv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4usv(uint index, short[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4usv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4usv(int index, ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4usv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4usv(uint index, ref ushort v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4usv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4usv(int index, ushort[] v)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4usv"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttrib4usv(uint index, ushort[] v)
        {
            throw new NotImplementedException();
        }

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer")]
        public static IntPtr ext__GL_VERSION_2_0__glVertexAttribPointer = IntPtr.Zero;

        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, bool[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, byte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, short[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, int[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, float[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, double[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, string pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, string pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, string pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, string pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, IntPtr pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, ref sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, ref sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, ref sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, ref sbyte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, sbyte[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, sbyte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, sbyte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, sbyte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, sbyte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, sbyte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, sbyte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, sbyte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, sbyte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, ref ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, ref ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, ref ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, ref ushort pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, ushort[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, ushort[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, ushort[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, ushort[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, ushort[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, ushort[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, ushort[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, ushort[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, ushort[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, ref uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, ref uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, ref uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, ref uint pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, uint[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, uint[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, uint[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, uint[] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, uint[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, uint[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, uint[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, uint[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, uint[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, uint[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, uint[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, uint[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, ref bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, ref bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, ref bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, ref bool pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, bool[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, bool[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, bool[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, bool[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, bool[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, bool[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, bool[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, bool[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, ref byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, ref byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, ref byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, ref byte pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, byte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, byte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, byte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, byte[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, byte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, byte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, byte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, byte[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, ref short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, ref short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, ref short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, ref short pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, short[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, short[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, short[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, short[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, short[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, short[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, short[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, short[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, ref int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, ref int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, ref int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, ref int pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, int[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, int[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, int[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, int[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, int[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, int[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, int[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, int[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, ref float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, ref float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, ref float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, ref float pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, float[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, float[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, float[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, float[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, float[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, float[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, float[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, float[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, ref double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, ref double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, ref double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, ref double pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, double[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, double[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, double[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, double[,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, double[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, int normalized, int stride, double[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(int index, int size, int type, bool normalized, int stride, double[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity]
        public static void glVertexAttribPointer(uint index, int size, int type, bool normalized, int stride, double[, ,] pointer)
        {
            throw new NotImplementedException();
        }
        */
    }

    public static class Glu
    {
        private const CallingConvention CALLING_CONVENTION = CallingConvention.Winapi;
        [StructLayout(LayoutKind.Sequential)]
        public struct GLUnurbs
        {
            /// <summary>
            ///     Keeps the struct from being garbage collected prematurely.
            /// </summary>
            private IntPtr Data;
        }
        public const int GLU_SAMPLING_TOLERANCE = 100203;
        [DllImport("glu32.dll", CallingConvention = CALLING_CONVENTION), SuppressUnmanagedCodeSecurity]
        public static extern GLUnurbs gluNewNurbsRenderer();
        [DllImport("glu32.dll", CallingConvention = CALLING_CONVENTION), SuppressUnmanagedCodeSecurity]
        public static extern void gluNurbsProperty([In] GLUnurbs nurb, int property, float val);
        [DllImport("glu32.dll", CallingConvention = CALLING_CONVENTION), SuppressUnmanagedCodeSecurity]
        public static extern void gluBeginCurve([In] GLUnurbs nurb);
        [DllImport("glu32.dll", CallingConvention = CALLING_CONVENTION), SuppressUnmanagedCodeSecurity]
        public static extern void gluNurbsCurve([In] GLUnurbs nurb, int knotCount, [In] float[] knots, int stride, [In] float[] control, int order, int type);
        [DllImport("glu32.dll", CallingConvention = CALLING_CONVENTION), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern void gluNurbsCurve([In] GLUnurbs nurb, int knotCount, [In] float[] knots, int stride, [In] float[,] control, int order, int type);
        [DllImport("glu32.dll", CallingConvention = CALLING_CONVENTION), SuppressUnmanagedCodeSecurity]
        public static extern void gluEndCurve([In] GLUnurbs nurb);
        [DllImport("glu32.dll", CallingConvention = CALLING_CONVENTION), SuppressUnmanagedCodeSecurity]
        public static extern void gluOrtho2D(double left, double right, double bottom, double top);
        [DllImport("glu32.dll", CallingConvention = CALLING_CONVENTION), SuppressUnmanagedCodeSecurity]
        public static extern void gluPickMatrix(double x, double y, double width, double height, [In] int[] viewport);
    }

    public static class User
    {
        private const CallingConvention CALLING_CONVENTION = CallingConvention.StdCall;
        private const string USER_NATIVE_LIBRARY = "user32.dll";
        [DllImport(USER_NATIVE_LIBRARY, CallingConvention = CALLING_CONVENTION), SuppressUnmanagedCodeSecurity]
        public static extern bool ReleaseDC(IntPtr windowHandle, IntPtr deviceContext);
        [DllImport(USER_NATIVE_LIBRARY, CallingConvention = CALLING_CONVENTION, SetLastError = true), SuppressUnmanagedCodeSecurity]
        public static extern IntPtr GetDC(IntPtr windowHandle);
    }

    public static class Gdi
    {
        private const CallingConvention CALLING_CONVENTION = CallingConvention.StdCall;
        private const string GDI_NATIVE_LIBRARY = "gdi32.dll";

        #region int PFD_TYPE_RGBA
        /// <summary>
        ///     RGBA pixels.  Each pixel has four components in this order: red, green, blue,
        ///     and alpha.
        /// </summary>
        // #define PFD_TYPE_RGBA        0
        public const int PFD_TYPE_RGBA = 0;
        #endregion int PFD_TYPE_RGBA

        #region int PFD_TYPE_COLORINDEX
        /// <summary>
        ///     Color-index pixels.  Each pixel uses a color-index value.
        /// </summary>
        // #define PFD_TYPE_COLORINDEX  1
        public const int PFD_TYPE_COLORINDEX = 1;
        #endregion int PFD_TYPE_COLORINDEX

        #region int PFD_MAIN_PLANE
        /// <summary>
        ///     The layer is the main plane.
        /// </summary>
        // #define PFD_MAIN_PLANE       0
        public const int PFD_MAIN_PLANE = 0;
        #endregion int PFD_MAIN_PLANE

        #region int PFD_DOUBLEBUFFER
        /// <summary>
        ///     <para>
        ///         The buffer is double-buffered.  This flag and <see cref="PFD_SUPPORT_GDI" />
        ///         are mutually exclusive in the current generic implementation.
        ///     </para>
        /// </summary>
        // #define PFD_DOUBLEBUFFER            0x00000001
        public const int PFD_DOUBLEBUFFER = 0x00000001;
        #endregion int PFD_DOUBLEBUFFER

        #region int PFD_STEREO
        /// <summary>
        ///     <para>
        ///         The buffer is stereoscopic.  This flag is not supported in the current
        ///         generic implementation.
        ///     </para>
        /// </summary>
        // #define PFD_STEREO                  0x00000002
        public const int PFD_STEREO = 0x00000002;
        #endregion int PFD_STEREO

        #region int PFD_DRAW_TO_WINDOW
        /// <summary>
        ///     <para>
        ///         The buffer can draw to a window or device surface.
        ///     </para>
        /// </summary>
        // #define PFD_DRAW_TO_WINDOW          0x00000004
        public const int PFD_DRAW_TO_WINDOW = 0x00000004;
        #endregion int PFD_DRAW_TO_WINDOW

        #region int PFD_DRAW_TO_BITMAP
        /// <summary>
        ///     <para>
        ///         The buffer can draw to a memory bitmap.
        ///     </para>
        /// </summary>
        // #define PFD_DRAW_TO_BITMAP          0x00000008
        public const int PFD_DRAW_TO_BITMAP = 0x00000008;
        #endregion int PFD_DRAW_TO_BITMAP

        #region int PFD_SUPPORT_GDI
        /// <summary>
        ///     <para>
        ///         The buffer supports GDI drawing.  This flag and
        ///         <see cref="PFD_DOUBLEBUFFER" /> are mutually exclusive in the current generic
        ///         implementation.
        ///     </para>
        /// </summary>
        // #define PFD_SUPPORT_GDI             0x00000010
        public const int PFD_SUPPORT_GDI = 0x00000010;
        #endregion int PFD_SUPPORT_GDI

        #region int PFD_SUPPORT_OPENGL
        /// <summary>
        ///     <para>
        ///         The buffer supports OpenGL drawing.
        ///     </para>
        /// </summary>
        // #define PFD_SUPPORT_OPENGL          0x00000020
        public const int PFD_SUPPORT_OPENGL = 0x00000020;
        #endregion int PFD_SUPPORT_OPENGL

        #region int PFD_GENERIC_FORMAT
        /// <summary>
        ///     <para>
        ///         The pixel format is supported by the GDI software implementation, which is
        ///         also known as the generic implementation.  If this bit is clear, the pixel
        ///         format is supported by a device driver or hardware.
        ///     </para>
        /// </summary>
        // #define PFD_GENERIC_FORMAT          0x00000040
        public const int PFD_GENERIC_FORMAT = 0x00000040;
        #endregion int PFD_GENERIC_FORMAT

        #region int PFD_NEED_PALETTE
        /// <summary>
        ///     <para>
        ///         The buffer uses RGBA pixels on a palette-managed device.  A logical palette
        ///         is required to achieve the best results for this pixel type.  Colors in the
        ///         palette should be specified according to the values of the <b>cRedBits</b>,
        ///         <b>cRedShift</b>, <b>cGreenBits</b>, <b>cGreenShift</b>, <b>cBluebits</b>,
        ///         and <b>cBlueShift</b> members.  The palette should be created and realized in
        ///         the device context before calling <see cref="Wgl.wglMakeCurrent" />.
        ///     </para>
        /// </summary>
        // #define PFD_NEED_PALETTE            0x00000080
        public const int PFD_NEED_PALETTE = 0x00000080;
        #endregion int PFD_NEED_PALETTE

        #region int PFD_NEED_SYSTEM_PALETTE
        /// <summary>
        ///     <para>
        ///         Defined in the pixel format descriptors of hardware that supports one
        ///         hardware palette in 256-color mode only.  For such systems to use
        ///         hardware acceleration, the hardware palette must be in a fixed order
        ///         (for example, 3-3-2) when in RGBA mode or must match the logical palette
        ///         when in color-index mode.
        ///     </para>
        ///     <para>
        ///         When this flag is set, you must call <see cref="SetSystemPaletteUse" /> in
        ///         your program to force a one-to-one mapping of the logical palette and the
        ///         system palette.  If your OpenGL hardware supports multiple hardware palettes
        ///         and the device driver can allocate spare hardware palettes for OpenGL, this
        ///         flag is typically clear.
        ///     </para>
        ///     <para>
        ///         This flag is not set in the generic pixel formats.
        ///     </para>
        /// </summary>
        // #define PFD_NEED_SYSTEM_PALETTE     0x00000100
        public const int PFD_NEED_SYSTEM_PALETTE = 0x00000100;
        #endregion int PFD_NEED_SYSTEM_PALETTE

        #region int PFD_SWAP_EXCHANGE
        /// <summary>
        ///     <para>
        ///         Specifies the content of the back buffer in the double-buffered main color
        ///         plane following a buffer swap.  Swapping the color buffers causes the
        ///         exchange of the back buffer's content with the front buffer's content.
        ///         Following the swap, the back buffer's content contains the front buffer's
        ///         content before the swap. <b>PFD_SWAP_EXCHANGE</b> is a hint only and might
        ///         not be provided by a driver.
        ///     </para>
        /// </summary>
        // #define PFD_SWAP_EXCHANGE           0x00000200
        public const int PFD_SWAP_EXCHANGE = 0x00000200;
        #endregion int PFD_SWAP_EXCHANGE

        #region int PFD_SWAP_COPY
        /// <summary>
        ///     <para>
        ///         Specifies the content of the back buffer in the double-buffered main color
        ///         plane following a buffer swap.  Swapping the color buffers causes the content
        ///         of the back buffer to be copied to the front buffer.  The content of the back
        ///         buffer is not affected by the swap.  <b>PFD_SWAP_COPY</b> is a hint only and
        ///         might not be provided by a driver.
        ///     </para>
        /// </summary>
        // #define PFD_SWAP_COPY               0x00000400
        public const int PFD_SWAP_COPY = 0x00000400;
        #endregion int PFD_SWAP_COPY

        #region int PFD_SWAP_LAYER_BUFFERS
        /// <summary>
        ///     <para>
        ///         Indicates whether a device can swap individual layer planes with pixel
        ///         formats that include double-buffered overlay or underlay planes.
        ///         Otherwise all layer planes are swapped together as a group.  When this
        ///         flag is set, <see cref="Wgl.wglSwapLayerBuffers" /> is supported.
        ///     </para>
        /// </summary>
        // #define PFD_SWAP_LAYER_BUFFERS      0x00000800
        public const int PFD_SWAP_LAYER_BUFFERS = 0x00000800;
        #endregion int PFD_SWAP_LAYER_BUFFERS

        #region int PFD_GENERIC_ACCELERATED
        /// <summary>
        ///     <para>
        ///         The pixel format is supported by a device driver that accelerates the generic
        ///         implementation.  If this flag is clear and the
        ///         <see cref="PFD_GENERIC_FORMAT" /> flag is set, the pixel format is supported
        ///         by the generic implementation only.
        ///     </para>
        /// </summary>
        // #define PFD_GENERIC_ACCELERATED     0x00001000
        public const int PFD_GENERIC_ACCELERATED = 0x00001000;
        #endregion int PFD_GENERIC_ACCELERATED

        #region int PFD_SUPPORT_DIRECTDRAW
        /// <summary>
        ///     <para>
        ///         The buffer supports DirectDraw drawing.
        ///     </para>
        /// </summary>
        // #define PFD_SUPPORT_DIRECTDRAW      0x00002000
        public const int PFD_SUPPORT_DIRECTDRAW = 0x00002000;
        #endregion int PFD_SUPPORT_DIRECTDRAW
        [StructLayout(LayoutKind.Sequential)]
        public struct PIXELFORMATDESCRIPTOR
        {
            /// <summary>
            /// Specifies the size of this data structure. This value should be set to <c>sizeof(PIXELFORMATDESCRIPTOR)</c>.
            /// </summary>
            public Int16 nSize;

            /// <summary>
            /// Specifies the version of this data structure. This value should be set to 1.
            /// </summary>
            public Int16 nVersion;

            /// <summary>
            /// A set of bit flags that specify properties of the pixel buffer. The properties are generally not mutually exclusive;
            /// you can set any combination of bit flags, with the exceptions noted.
            /// </summary>
            /// <remarks>
            ///     <para>The following bit flag constants are defined:</para>
            ///     <list type="table">
            ///			<listheader>
            ///				<term>Value</term>
            ///				<description>Meaning</description>
            ///			</listheader>
            ///			<item>
            ///				<term>PFD_DRAW_TO_WINDOW</term>
            ///				<description>The buffer can draw to a window or device surface.</description>
            ///			</item>
            ///			<item>
            ///				<term>PFD_DRAW_TO_BITMAP</term>
            ///				<description>The buffer can draw to a memory bitmap.</description>
            ///			</item>
            ///			<item>
            ///				<term>PFD_SUPPORT_GDI</term>
            ///				<description>
            ///					The buffer supports GDI drawing. This flag and PFD_DOUBLEBUFFER are mutually exclusive
            ///					in the current generic implementation.
            ///				</description>
            ///			</item>
            ///			<item>
            ///				<term>PFD_SUPPORT_OPENGL</term>
            ///				<description>The buffer supports OpenGL drawing.</description>
            ///			</item>
            ///			<item>
            ///				<term>PFD_GENERIC_ACCELERATED</term>
            ///				<description>
            ///					The pixel format is supported by a device driver that accelerates the generic implementation.
            ///					If this flag is clear and the PFD_GENERIC_FORMAT flag is set, the pixel format is supported by
            ///					the generic implementation only.
            ///				</description>
            ///			</item>
            ///			<item>
            ///				<term>PFD_GENERIC_FORMAT</term>
            ///				<description>
            ///					The pixel format is supported by the GDI software implementation, which is also known as the
            ///					generic implementation. If this bit is clear, the pixel format is supported by a device
            ///					driver or hardware.
            ///				</description>
            ///			</item>
            ///			<item>
            ///				<term>PFD_NEED_PALETTE</term>
            ///				<description>
            ///					The buffer uses RGBA pixels on a palette-managed device. A logical palette is required to achieve
            ///					the best results for this pixel type. Colors in the palette should be specified according to the
            ///					values of the <b>cRedBits</b>, <b>cRedShift</b>, <b>cGreenBits</b>, <b>cGreenShift</b>,
            ///					<b>cBluebits</b>, and <b>cBlueShift</b> members. The palette should be created and realized in
            ///					the device context before calling <see cref="Wgl.wglMakeCurrent" />.
            ///				</description>
            ///			</item>
            ///			<item>
            ///				<term>PFD_NEED_SYSTEM_PALETTE</term>
            ///				<description>
            ///					Defined in the pixel format descriptors of hardware that supports one hardware palette in
            ///					256-color mode only. For such systems to use hardware acceleration, the hardware palette must be in
            ///					a fixed order (for example, 3-3-2) when in RGBA mode or must match the logical palette when in
            ///					color-index mode.
            ///
            ///					When this flag is set, you must call SetSystemPaletteUse in your program to force a one-to-one
            ///					mapping of the logical palette and the system palette. If your OpenGL hardware supports multiple
            ///					hardware palettes and the device driver can allocate spare hardware palettes for OpenGL, this
            ///					flag is typically clear.
            ///
            ///					This flag is not set in the generic pixel formats.
            ///				</description>
            ///			</item>
            ///			<item>
            ///				<term>PFD_DOUBLEBUFFER</term>
            ///				<description>
            ///					The buffer is double-buffered. This flag and PFD_SUPPORT_GDI are mutually exclusive in the
            ///					current generic implementation.
            ///				</description>
            ///			</item>
            ///			<item>
            ///				<term>PFD_STEREO</term>
            ///				<description>
            ///					The buffer is stereoscopic. This flag is not supported in the current generic implementation.
            ///				</description>
            ///			</item>
            ///			<item>
            ///				<term>PFD_SWAP_LAYER_BUFFERS</term>
            ///				<description>
            ///					Indicates whether a device can swap individual layer planes with pixel formats that include
            ///					double-buffered overlay or underlay planes. Otherwise all layer planes are swapped together
            ///					as a group. When this flag is set, <b>wglSwapLayerBuffers</b> is supported.
            ///				</description>
            ///			</item>
            ///		</list>
            ///		<para>You can specify the following bit flags when calling <see cref="ChoosePixelFormat" />.</para>
            ///		<list type="table">
            ///			<listheader>
            ///				<term>Value</term>
            ///				<description>Meaning</description>
            ///			</listheader>
            ///			<item>
            ///				<term>PFD_DEPTH_DONTCARE</term>
            ///				<description>
            ///					The requested pixel format can either have or not have a depth buffer. To select
            ///					a pixel format without a depth buffer, you must specify this flag. The requested pixel format
            ///					can be with or without a depth buffer. Otherwise, only pixel formats with a depth buffer
            ///					are considered.
            ///				</description>
            ///			</item>
            ///			<item>
            ///				<term>PFD_DOUBLEBUFFER_DONTCARE</term>
            ///				<description>The requested pixel format can be either single- or double-buffered.</description>
            ///			</item>
            ///			<item>
            ///				<term>PFD_STEREO_DONTCARE</term>
            ///				<description>The requested pixel format can be either monoscopic or stereoscopic.</description>
            ///			</item>
            ///		</list>
            ///		<para>
            ///			With the <b>glAddSwapHintRectWIN</b> extension function, two new flags are included for the
            ///			<b>PIXELFORMATDESCRIPTOR</b> pixel format structure.
            ///		</para>
            ///		<list type="table">
            ///			<listheader>
            ///				<term>Value</term>
            ///				<description>Meaning</description>
            ///			</listheader>
            ///			<item>
            ///				<term>PFD_SWAP_COPY</term>
            ///				<description>
            ///					Specifies the content of the back buffer in the double-buffered main color plane following
            ///					a buffer swap. Swapping the color buffers causes the content of the back buffer to be copied
            ///					to the front buffer. The content of the back buffer is not affected by the swap. PFD_SWAP_COPY
            ///					is a hint only and might not be provided by a driver.
            ///				</description>
            ///			</item>
            ///			<item>
            ///				<term>PFD_SWAP_EXCHANGE</term>
            ///				<description>
            ///					Specifies the content of the back buffer in the double-buffered main color plane following a
            ///					buffer swap. Swapping the color buffers causes the exchange of the back buffer's content
            ///					with the front buffer's content. Following the swap, the back buffer's content contains the
            ///					front buffer's content before the swap. PFD_SWAP_EXCHANGE is a hint only and might not be
            ///					provided by a driver.
            ///				</description>
            ///			</item>
            ///		</list>
            /// </remarks>
            public Int32 dwFlags;

            /// <summary>
            /// Specifies the type of pixel data. The following types are defined.
            /// </summary>
            /// <remarks>
            ///		<list type="table">
            ///			<listheader>
            ///				<term>Value</term>
            ///				<description>Meaning</description>
            ///			</listheader>
            ///			<item>
            ///				<term>PFD_TYPE_RGBA</term>
            ///				<description>
            ///					RGBA pixels. Each pixel has four components in this order: red, green, blue, and alpha.
            ///				</description>
            ///			</item>
            ///			<item>
            ///				<term>PFD_TYPE_COLORINDEX</term>
            ///				<description>Color-index pixels. Each pixel uses a color-index value.</description>
            ///			</item>
            ///		</list>
            /// </remarks>
            public Byte iPixelType;

            /// <summary>
            /// Specifies the number of color bitplanes in each color buffer. For RGBA pixel types, it is the size
            /// of the color buffer, excluding the alpha bitplanes. For color-index pixels, it is the size of the
            /// color-index buffer.
            /// </summary>
            public Byte cColorBits;

            /// <summary>
            /// Specifies the number of red bitplanes in each RGBA color buffer.
            /// </summary>
            public Byte cRedBits;

            /// <summary>
            /// Specifies the shift count for red bitplanes in each RGBA color buffer.
            /// </summary>
            public Byte cRedShift;

            /// <summary>
            /// Specifies the number of green bitplanes in each RGBA color buffer.
            /// </summary>
            public Byte cGreenBits;

            /// <summary>
            /// Specifies the shift count for green bitplanes in each RGBA color buffer.
            /// </summary>
            public Byte cGreenShift;

            /// <summary>
            /// Specifies the number of blue bitplanes in each RGBA color buffer.
            /// </summary>
            public Byte cBlueBits;

            /// <summary>
            /// Specifies the shift count for blue bitplanes in each RGBA color buffer.
            /// </summary>
            public Byte cBlueShift;

            /// <summary>
            /// Specifies the number of alpha bitplanes in each RGBA color buffer. Alpha bitplanes are not supported.
            /// </summary>
            public Byte cAlphaBits;

            /// <summary>
            /// Specifies the shift count for alpha bitplanes in each RGBA color buffer. Alpha bitplanes are not supported.
            /// </summary>
            public Byte cAlphaShift;

            /// <summary>
            /// Specifies the total number of bitplanes in the accumulation buffer.
            /// </summary>
            public Byte cAccumBits;

            /// <summary>
            /// Specifies the number of red bitplanes in the accumulation buffer.
            /// </summary>
            public Byte cAccumRedBits;

            /// <summary>
            /// Specifies the number of green bitplanes in the accumulation buffer.
            /// </summary>
            public Byte cAccumGreenBits;

            /// <summary>
            /// Specifies the number of blue bitplanes in the accumulation buffer.
            /// </summary>
            public Byte cAccumBlueBits;

            /// <summary>
            /// Specifies the number of alpha bitplanes in the accumulation buffer.
            /// </summary>
            public Byte cAccumAlphaBits;

            /// <summary>
            /// Specifies the depth of the depth (z-axis) buffer.
            /// </summary>
            public Byte cDepthBits;

            /// <summary>
            /// Specifies the depth of the stencil buffer.
            /// </summary>
            public Byte cStencilBits;

            /// <summary>
            /// Specifies the number of auxiliary buffers. Auxiliary buffers are not supported.
            /// </summary>
            public Byte cAuxBuffers;

            /// <summary>
            /// Ignored. Earlier implementations of OpenGL used this member, but it is no longer used.
            /// </summary>
            /// <remarks>Specifies the type of layer.</remarks>
            public Byte iLayerType;

            /// <summary>
            /// Specifies the number of overlay and underlay planes. Bits 0 through 3 specify up to 15 overlay planes and
            /// bits 4 through 7 specify up to 15 underlay planes.
            /// </summary>
            public Byte bReserved;

            /// <summary>
            /// Ignored. Earlier implementations of OpenGL used this member, but it is no longer used.
            /// </summary>
            /// <remarks>
            ///		Specifies the layer mask. The layer mask is used in conjunction with the visible mask to determine
            ///		if one layer overlays another.
            /// </remarks>
            public Int32 dwLayerMask;

            /// <summary>
            /// Specifies the transparent color or index of an underlay plane. When the pixel type is RGBA, <b>dwVisibleMask</b>
            /// is a transparent RGB color value. When the pixel type is color index, it is a transparent index value.
            /// </summary>
            public Int32 dwVisibleMask;

            /// <summary>
            /// Ignored. Earlier implementations of OpenGL used this member, but it is no longer used.
            /// </summary>
            /// <remarks>
            ///		Specifies whether more than one pixel format shares the same frame buffer. If the result of the bitwise
            ///		AND of the damage masks between two pixel formats is nonzero, then they share the same buffers.
            /// </remarks>
            public Int32 dwDamageMask;
        };
        [StructLayout(LayoutKind.Sequential)]
        public struct POINTFLOAT
        {
            /// <summary>
            /// Specifies the horizontal (x) coordinate of a point.
            /// </summary>
            public float X;

            /// <summary>
            /// Specifies the vertical (y) coordinate of a point.
            /// </summary>
            public float Y;
        };
        [StructLayout(LayoutKind.Sequential)]
        public struct GLYPHMETRICSFLOAT
        {
            /// <summary>
            /// Specifies the width of the smallest rectangle (the glyph's black box) that completely encloses the glyph.
            /// </summary>
            public float gmfBlackBoxX;

            /// <summary>
            /// Specifies the height of the smallest rectangle (the glyph's black box) that completely encloses the glyph.
            /// </summary>
            public float gmfBlackBoxY;

            /// <summary>
            /// Specifies the x and y coordinates of the upper-left corner of the smallest rectangle that completely encloses the glyph.
            /// </summary>
            public POINTFLOAT gmfptGlyphOrigin;

            /// <summary>
            /// Specifies the horizontal distance from the origin of the current character cell to the origin of the next character cell.
            /// </summary>
            public float gmfCellIncX;

            /// <summary>
            /// Specifies the vertical distance from the origin of the current character cell to the origin of the next character cell.
            /// </summary>
            public float gmfCellIncY;
        };
        [DllImport(GDI_NATIVE_LIBRARY, EntryPoint = "SetPixelFormat", SetLastError = true), CLSCompliant(false), SuppressUnmanagedCodeSecurity]
        public static extern bool _SetPixelFormat(IntPtr deviceContext, int pixelFormat, ref PIXELFORMATDESCRIPTOR pixelFormatDescriptor);
        public static bool SetPixelFormat(IntPtr deviceContext, int pixelFormat, ref PIXELFORMATDESCRIPTOR pixelFormatDescriptor)
        {
            Kernel.LoadLibrary("opengl32.dll");
            return _SetPixelFormat(deviceContext, pixelFormat, ref pixelFormatDescriptor);
        }
        [DllImport(GDI_NATIVE_LIBRARY, SetLastError = true), SuppressUnmanagedCodeSecurity]
        public static extern int ChoosePixelFormat(IntPtr deviceContext, ref PIXELFORMATDESCRIPTOR pixelFormatDescriptor);
        [DllImport(GDI_NATIVE_LIBRARY, SetLastError = true), SuppressUnmanagedCodeSecurity]
        public static extern bool DeleteObject(IntPtr objectHandle);
        [DllImport(GDI_NATIVE_LIBRARY), SuppressUnmanagedCodeSecurity]
        public static extern IntPtr SelectObject(IntPtr deviceContext, IntPtr objectHandle);
        [DllImport(GDI_NATIVE_LIBRARY, SetLastError = true), SuppressUnmanagedCodeSecurity]
        public static extern IntPtr CreateFont(int height, int width, int escapement, int orientation, int weight, bool italic, bool underline, bool strikeOut, int charSet, int outputPrecision, int clipPrecision, int quality, int pitchAndFamily, string typeFace);
        [DllImport(GDI_NATIVE_LIBRARY, CallingConvention = CALLING_CONVENTION, EntryPoint = "SwapBuffers"), SuppressUnmanagedCodeSecurity]
        public static extern int SwapBuffersFast([In] IntPtr deviceContext);
        [DllImport(GDI_NATIVE_LIBRARY, SetLastError = true), SuppressUnmanagedCodeSecurity]
        public static extern int GetPixelFormat(IntPtr deviceContext);
        [DllImport(GDI_NATIVE_LIBRARY, SetLastError = true), SuppressUnmanagedCodeSecurity]
        public static extern IntPtr CreateCompatibleDC(IntPtr hdc);
        [CLSCompliant(false)]
        public struct ABC
        {
            public int abcA;
            public uint abcB;
            public int abcC;
        }
        [DllImport(GDI_NATIVE_LIBRARY, SetLastError = true, EntryPoint = "GetCharABCWidthsW"), SuppressUnmanagedCodeSecurity, CLSCompliant(false)]
        public static extern bool GetCharABCWidths(IntPtr hdc, uint uFirstChar, uint uLastChar, [Out] ABC[] lpabc);
        [DllImport(GDI_NATIVE_LIBRARY, SetLastError = true, EntryPoint = "GetCharWidth32W"), SuppressUnmanagedCodeSecurity, CLSCompliant(false)]
        public static extern bool GetCharWidth32(IntPtr hdc, uint uFirstChar, uint uLastChar, [Out] int[] lpwidth);
        [DllImport(GDI_NATIVE_LIBRARY, SetLastError = true), SuppressUnmanagedCodeSecurity]
        public static extern bool DeleteDC(IntPtr hdc);
        public struct KERNINGPAIR
        {
            public short wFirst;
            public short wSecond;
            public int iKernAmount;
        }
        [DllImport("gdi32", EntryPoint = "GetKerningPairsW")]
        public static extern int GetKerningPairs(IntPtr hDC, int cPairs, [Out] KERNINGPAIR[] lpkrnpair);
    }

    public static class Wgl
    {
        private const CallingConvention CALLING_CONVENTION = CallingConvention.StdCall;
        private const string WGL_NATIVE_LIBRARY = "opengl32.dll";
        public const int WGL_FONT_LINES = 0;
        public const int WGL_FONT_POLYGONS = 1;
        [DllImport(WGL_NATIVE_LIBRARY, SetLastError = true), SuppressUnmanagedCodeSecurity]
        public static extern bool wglUseFontOutlines(IntPtr deviceContext, int first, int count, int listBase, float deviation, float extrusion, int format, [Out, MarshalAs(UnmanagedType.LPArray)] Gdi.GLYPHMETRICSFLOAT[] glyphMetrics);
        [DllImport(WGL_NATIVE_LIBRARY, SetLastError = true), SuppressUnmanagedCodeSecurity]
        public static extern bool wglMakeCurrent(IntPtr deviceContext, IntPtr renderingContext);
        [DllImport(WGL_NATIVE_LIBRARY, SetLastError = true), SuppressUnmanagedCodeSecurity]
        public static extern bool wglDeleteContext(IntPtr renderingContext);
        [DllImport(WGL_NATIVE_LIBRARY, SetLastError = true), SuppressUnmanagedCodeSecurity]
        public static extern IntPtr wglCreateContext(IntPtr deviceContext);
        [DllImport(WGL_NATIVE_LIBRARY), SuppressUnmanagedCodeSecurity]
        public static extern IntPtr wglGetCurrentContext();
        [DllImport(WGL_NATIVE_LIBRARY, SetLastError = true), SuppressUnmanagedCodeSecurity]
        public static extern bool wglShareLists(IntPtr source, IntPtr destination);
    }
}